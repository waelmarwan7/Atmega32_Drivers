
LAB11_SPI_DRIVER09.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00002ba2  00002c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  0080013c  0080013c  00002d12  2**0
                  ALLOC
  3 .stab         00002e5c  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000131d  00000000  00000000  00005b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000713d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ab80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b5db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_10>
      2c:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <main>
      8a:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 13 	jmp	0x260c	; 0x260c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 06 13 	jmp	0x260c	; 0x260c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidInit>:
#include "USART_config.h"
#include "avr/io.h"


void USART_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <USART_voidInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	/* We will adjust this value according to the configrations then store it in UCSRC in one operation */
	u8 Local_u8UCSRC = 0 ;
     b52:	1b 82       	std	Y+3, r1	; 0x03

	/*Calculate The Baud Rate From The Equation */
	u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1) ;
     b54:	83 e3       	ldi	r24, 0x33	; 51
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9a 83       	std	Y+2, r25	; 0x02
     b5a:	89 83       	std	Y+1, r24	; 0x01

	/*
		$ Set Baud Rate
		Hint : UBRRH then UBRRL to avoid problems
	*/
	UBRRH = (u8)(Local_u16UBRR >> 8) ; /* MSBs at Local_u16UBRR */
     b5c:	e0 e4       	ldi	r30, 0x40	; 64
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	89 2f       	mov	r24, r25
     b66:	99 27       	eor	r25, r25
     b68:	80 83       	st	Z, r24
	UBRRL = (u8)Local_u16UBRR;
     b6a:	e9 e2       	ldi	r30, 0x29	; 41
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	80 83       	st	Z, r24


	/***** Check 3 Modes   *****/
	#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1)

		CLR_BIT(UCSRA , UCSRA_U2X) ;
     b72:	ab e2       	ldi	r26, 0x2B	; 43
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	eb e2       	ldi	r30, 0x2B	; 43
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8d 7f       	andi	r24, 0xFD	; 253
     b7e:	8c 93       	st	X, r24



	/*Multi-Processor Communication mode*/
	#if USART_MPCM == DISABLE
		CLR_BIT(UCSRA , UCSRA_MPCM) ;
     b80:	ab e2       	ldi	r26, 0x2B	; 43
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	eb e2       	ldi	r30, 0x2B	; 43
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	8e 7f       	andi	r24, 0xFE	; 254
     b8c:	8c 93       	st	X, r24

	/*UCSRC Register Config*/

	/*USART Mode*/
	#if USART_MODE == ASYNCHRONOUS
		CLR_BIT(Local_u8UCSRC , UCSRC_UMSEL) ;
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	8f 7b       	andi	r24, 0xBF	; 191
     b92:	8b 83       	std	Y+3, r24	; 0x03
		#error "Wrong USART_MODE config"
	#endif

	/*Parity Mode*/
	#if USART_PARITY_MODE == DISABLE
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM0) ;
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	8f 7e       	andi	r24, 0xEF	; 239
     b98:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM1) ;
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	8f 7d       	andi	r24, 0xDF	; 223
     b9e:	8b 83       	std	Y+3, r24	; 0x03
		#error "Wrong USART_PARITY_MODE config"
	#endif

	/*Stop Bit*/
	#if USART_STOP_BIT == STOP_BIT_1
		CLR_BIT(Local_u8UCSRC , UCSRC_USBS) ;
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	87 7f       	andi	r24, 0xF7	; 247
     ba4:	8b 83       	std	Y+3, r24	; 0x03
	#elif USART_DATA_SIZE == DATA_SIZE_7_BIT
		CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
	#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	82 60       	ori	r24, 0x02	; 2
     baa:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	84 60       	ori	r24, 0x04	; 4
     bb0:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
     bb2:	aa e2       	ldi	r26, 0x2A	; 42
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e2       	ldi	r30, 0x2A	; 42
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8b 7f       	andi	r24, 0xFB	; 251
     bbe:	8c 93       	st	X, r24
			#error "Wrong USART_STOP_BIT config"
		#endif
	#endif

	/*Set UCSRC Mode*/
	SET_BIT(Local_u8UCSRC , UCSRC_URSEL) ;
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	8b 83       	std	Y+3, r24	; 0x03

	/*Store the value in UCSRC Register (one operation) */
	UCSRC = Local_u8UCSRC ;
     bc6:	e0 e4       	ldi	r30, 0x40	; 64
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	80 83       	st	Z, r24

	/* Finally Enable the components */

	/*RX Complete Interrupt Enable*/
	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
     bce:	aa e2       	ldi	r26, 0x2A	; 42
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e2       	ldi	r30, 0x2A	; 42
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8f 77       	andi	r24, 0x7F	; 127
     bda:	8c 93       	st	X, r24
		#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
	#endif

	/*TX Complete Interrupt Enable*/
	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
     bdc:	aa e2       	ldi	r26, 0x2A	; 42
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e2       	ldi	r30, 0x2A	; 42
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7b       	andi	r24, 0xBF	; 191
     be8:	8c 93       	st	X, r24
		#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
	#endif

	/*UDR Empty Interrupt Enable*/
	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_UDRIE) ;
     bea:	aa e2       	ldi	r26, 0x2A	; 42
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ea e2       	ldi	r30, 0x2A	; 42
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 7d       	andi	r24, 0xDF	; 223
     bf6:	8c 93       	st	X, r24

	/*Receive Enable*/
	#if USART_RECEIVER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXEN) ;
	#elif USART_RECEIVER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_RXEN) ;
     bf8:	aa e2       	ldi	r26, 0x2A	; 42
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e2       	ldi	r30, 0x2A	; 42
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 61       	ori	r24, 0x10	; 16
     c04:	8c 93       	st	X, r24

	/*Transmitter Enable*/
	#if USART_TRANSMITTER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXEN) ;
	#elif USART_TRANSMITTER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_TXEN) ;
     c06:	aa e2       	ldi	r26, 0x2A	; 42
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e2       	ldi	r30, 0x2A	; 42
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 60       	ori	r24, 0x08	; 8
     c12:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TRANSMITTER_ENABLE config"
	#endif
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <USART_U8SendData>:

void USART_U8SendData(u8 u8data_Copy)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	0f 92       	push	r0
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : wait flag UDRFE to finish
	// Wait until transmission Register Empty
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
     c2c:	eb e2       	ldi	r30, 0x2B	; 43
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	82 95       	swap	r24
     c34:	86 95       	lsr	r24
     c36:	87 70       	andi	r24, 0x07	; 7
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	a1 f3       	breq	.-24     	; 0xc2c <USART_U8SendData+0xc>

	// step 2 : send Data
	UDR = u8data_Copy; //UDR is buffer register
     c44:	ec e2       	ldi	r30, 0x2C	; 44
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	80 83       	st	Z, r24
}
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <USART_U8ReceiveData>:


u8   USART_U8ReceiveData(void)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
	// step 1 : wait flag RXC to finish
	while(GET_BIT(UCSRA,UCSRA_RXC)==0) ;
     c5c:	eb e2       	ldi	r30, 0x2B	; 43
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 23       	and	r24, r24
     c64:	dc f7       	brge	.-10     	; 0xc5c <USART_U8ReceiveData+0x8>
	// step 2 : Receive Data
	return UDR ;
     c66:	ec e2       	ldi	r30, 0x2C	; 44
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
}
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <USART_voidSendString>:

void USART_voidSendString(u8* Copy_pu8Data)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	00 d0       	rcall	.+0      	; 0xc78 <USART_voidSendString+0x6>
     c78:	0f 92       	push	r0
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	9b 83       	std	Y+3, r25	; 0x03
     c80:	8a 83       	std	Y+2, r24	; 0x02
	 u8 i =0 ;
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	0e c0       	rjmp	.+28     	; 0xca2 <USART_voidSendString+0x30>
	 while(Copy_pu8Data[i]!=0)
	    {USART_U8SendData(Copy_pu8Data[i]) ; i++;}
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	9b 81       	ldd	r25, Y+3	; 0x03
     c90:	fc 01       	movw	r30, r24
     c92:	e2 0f       	add	r30, r18
     c94:	f3 1f       	adc	r31, r19
     c96:	80 81       	ld	r24, Z
     c98:	0e 94 10 06 	call	0xc20	; 0xc20 <USART_U8SendData>
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidSendString(u8* Copy_pu8Data)
{
	 u8 i =0 ;
	 while(Copy_pu8Data[i]!=0)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	fc 01       	movw	r30, r24
     cae:	e2 0f       	add	r30, r18
     cb0:	f3 1f       	adc	r31, r19
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	39 f7       	brne	.-50     	; 0xc86 <USART_voidSendString+0x14>
	    {USART_U8SendData(Copy_pu8Data[i]) ; i++;}
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <USART_voidReceiveString>:

void USART_voidReceiveString(u8* Copy_pu8Data)
{
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <USART_voidReceiveString+0xa>
     cce:	0f 92       	push	r0
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	9b 83       	std	Y+3, r25	; 0x03
     cd6:	8a 83       	std	Y+2, r24	; 0x02
	 u8 i =0 ;
     cd8:	19 82       	std	Y+1, r1	; 0x01
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <USART_voidReceiveString+0x36>
	 while(Copy_pu8Data[i]!=0)
		{Copy_pu8Data[i]= USART_U8ReceiveData() ; i++;}
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	9b 81       	ldd	r25, Y+3	; 0x03
     ce6:	8c 01       	movw	r16, r24
     ce8:	02 0f       	add	r16, r18
     cea:	13 1f       	adc	r17, r19
     cec:	0e 94 2a 06 	call	0xc54	; 0xc54 <USART_U8ReceiveData>
     cf0:	f8 01       	movw	r30, r16
     cf2:	80 83       	st	Z, r24
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveString(u8* Copy_pu8Data)
{
	 u8 i =0 ;
	 while(Copy_pu8Data[i]!=0)
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	fc 01       	movw	r30, r24
     d06:	e2 0f       	add	r30, r18
     d08:	f3 1f       	adc	r31, r19
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	31 f7       	brne	.-52     	; 0xcdc <USART_voidReceiveString+0x18>
		{Copy_pu8Data[i]= USART_U8ReceiveData() ; i++;}

}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <TIMER_voidWDTSleep>:



/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
     d28:	a1 e4       	ldi	r26, 0x41	; 65
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e1 e4       	ldi	r30, 0x41	; 65
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	88 7f       	andi	r24, 0xF8	; 248
     d34:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
     d36:	a1 e4       	ldi	r26, 0x41	; 65
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 e4       	ldi	r30, 0x41	; 65
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	86 60       	ori	r24, 0x06	; 6
     d42:	8c 93       	st	X, r24
}
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
     d52:	a1 e4       	ldi	r26, 0x41	; 65
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e1 e4       	ldi	r30, 0x41	; 65
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 60       	ori	r24, 0x08	; 8
     d5e:	8c 93       	st	X, r24
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
     d6e:	a1 e4       	ldi	r26, 0x41	; 65
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e1 e4       	ldi	r30, 0x41	; 65
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	88 61       	ori	r24, 0x18	; 24
     d7a:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
     d7c:	e1 e4       	ldi	r30, 0x41	; 65
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	10 82       	st	Z, r1
}
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8f 7b       	andi	r24, 0xBF	; 191
     d9c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
     d9e:	a3 e5       	ldi	r26, 0x53	; 83
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e3 e5       	ldi	r30, 0x53	; 83
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	87 7f       	andi	r24, 0xF7	; 247
     daa:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
     dac:	e2 e5       	ldi	r30, 0x52	; 82
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 ec       	ldi	r24, 0xC0	; 192
     db2:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
     db4:	a9 e5       	ldi	r26, 0x59	; 89
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e9 e5       	ldi	r30, 0x59	; 89
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	81 60       	ori	r24, 0x01	; 1
     dc0:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
     dc2:	a3 e5       	ldi	r26, 0x53	; 83
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e3 e5       	ldi	r30, 0x53	; 83
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 7f       	andi	r24, 0xF8	; 248
     dce:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER  ;
     dd0:	a3 e5       	ldi	r26, 0x53	; 83
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e3 e5       	ldi	r30, 0x53	; 83
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	8c 93       	st	X, r24
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <TIMER0_voidSetPreload>:


void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
     df0:	e2 e5       	ldi	r30, 0x52	; 82
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	80 83       	st	Z, r24
}
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	0f 92       	push	r0
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
     e0c:	ec e5       	ldi	r30, 0x5C	; 92
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	80 83       	st	Z, r24
}
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
     e24:	e2 e5       	ldi	r30, 0x52	; 82
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <TIMER_u8SetCallBack>:




u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <TIMER_u8SetCallBack+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <TIMER_u8SetCallBack+0x8>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
     e42:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	69 f0       	breq	.+26     	; 0xe66 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	fc 01       	movw	r30, r24
     e58:	e4 5c       	subi	r30, 0xC4	; 196
     e5a:	fe 4f       	sbci	r31, 0xFE	; 254
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <__vector_11>:


/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
     ea4:	80 91 52 01 	lds	r24, 0x0152
     ea8:	90 91 53 01 	lds	r25, 0x0153
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	29 f0       	breq	.+10     	; 0xeba <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
     eb0:	e0 91 52 01 	lds	r30, 0x0152
     eb4:	f0 91 53 01 	lds	r31, 0x0153
     eb8:	09 95       	icall
	}
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <__vector_10>:


/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
     f0a:	80 91 50 01 	lds	r24, 0x0150
     f0e:	90 91 51 01 	lds	r25, 0x0151
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	29 f0       	breq	.+10     	; 0xf20 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
     f16:	e0 91 50 01 	lds	r30, 0x0150
     f1a:	f0 91 51 01 	lds	r31, 0x0151
     f1e:	09 95       	icall
	}
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <SPI_VoidInit>:
#include "avr/io.h"



void SPI_VoidInit(void)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
     f4e:	ad e2       	ldi	r26, 0x2D	; 45
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ed e2       	ldi	r30, 0x2D	; 45
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 7d       	andi	r24, 0xDF	; 223
     f5a:	8c 93       	st	X, r24
		#error "wrong SPI_DATA_ORDER config"
	#endif

	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
     f5c:	ad e2       	ldi	r26, 0x2D	; 45
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	ed e2       	ldi	r30, 0x2D	; 45
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 61       	ori	r24, 0x10	; 16
     f68:	8c 93       	st	X, r24
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
     f6a:	ad e2       	ldi	r26, 0x2D	; 45
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ed e2       	ldi	r30, 0x2D	; 45
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	8c 93       	st	X, r24
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
     f78:	ad e2       	ldi	r26, 0x2D	; 45
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ed e2       	ldi	r30, 0x2D	; 45
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8b 7f       	andi	r24, 0xFB	; 251
     f84:	8c 93       	st	X, r24
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
     f86:	ad e2       	ldi	r26, 0x2D	; 45
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ed e2       	ldi	r30, 0x2D	; 45
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	8c 93       	st	X, r24
		CLR_BIT(SPCR , SPCR_SPR1) ;
     f94:	ad e2       	ldi	r26, 0x2D	; 45
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ed e2       	ldi	r30, 0x2D	; 45
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8d 7f       	andi	r24, 0xFD	; 253
     fa0:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X) ;
     fa2:	ae e2       	ldi	r26, 0x2E	; 46
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ee e2       	ldi	r30, 0x2E	; 46
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8e 7f       	andi	r24, 0xFE	; 254
     fae:	8c 93       	st	X, r24
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
     fb0:	ad e2       	ldi	r26, 0x2D	; 45
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ed e2       	ldi	r30, 0x2D	; 45
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 77       	andi	r24, 0x7F	; 127
     fbc:	8c 93       	st	X, r24

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
     fbe:	ad e2       	ldi	r26, 0x2D	; 45
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ed e2       	ldi	r30, 0x2D	; 45
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	8c 93       	st	X, r24
	#else
		#error "wrong SPI_ENABLE_MODE config"
	#endif

}
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <SPI_transceive>:



u8   SPI_transceive(u8 u8Data_copy){
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	89 83       	std	Y+1, r24	; 0x01

	/*  send the data  */
	SPDR = u8Data_copy;
     fde:	ef e2       	ldi	r30, 0x2F	; 47
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	80 83       	st	Z, r24

	/*  Wait (busy wait ) until transfer complete */
	while((GET_BIT(SPSR , SPIF)) == 0 );
     fe6:	ee e2       	ldi	r30, 0x2E	; 46
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 23       	and	r24, r24
     fee:	dc f7       	brge	.-10     	; 0xfe6 <SPI_transceive+0x14>

	/*  Get  the exchange  data   */
	return SPDR;
     ff0:	ef e2       	ldi	r30, 0x2F	; 47
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z


}
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <GIE_Enable>:
 */
#include "../../LIB/BIT_MATH.h"
#include "avr/io.h"
#include "GIE.h"

void GIE_Enable (void){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	//SET bit 7 in SREG
	SET_BIT(SREG  ,  SREG_I );
    1006:	af e5       	ldi	r26, 0x5F	; 95
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ef e5       	ldi	r30, 0x5F	; 95
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 68       	ori	r24, 0x80	; 128
    1012:	8c 93       	st	X, r24

}
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <GIE_Disable>:
void GIE_Disable(void){
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62

	//CLR bit 7 in SREG
	CLR_BIT(SREG  ,  SREG_I );
    1022:	af e5       	ldi	r26, 0x5F	; 95
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ef e5       	ldi	r30, 0x5F	; 95
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 77       	andi	r24, 0x7F	; 127
    102e:	8c 93       	st	X, r24

}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <EXTI_void_Int0Init>:


/* Global pointer to function to hold INT0 ISR address */
void (*EXTI_pvInt0func)(void)=NULL;

void    EXTI_void_Int0Init(void){
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62


	//Check Sense control :
#if   EXTI_SENSE_CONTROL == EXTI_LOW_LEVEL
	CLR_BIT(MCUCR , MCUCR_ISC00 );
    103e:	a5 e5       	ldi	r26, 0x55	; 85
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e5       	ldi	r30, 0x55	; 85
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8e 7f       	andi	r24, 0xFE	; 254
    104a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , MCUCR_ISC01 );
    104c:	a5 e5       	ldi	r26, 0x55	; 85
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e5       	ldi	r30, 0x55	; 85
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8d 7f       	andi	r24, 0xFD	; 253
    1058:	8c 93       	st	X, r24
#error "Warning Sense control configration option"
#endif

	/*Check Peripheral intrrupt enable*/
#if INT0_INITIAL_STATE == EXTI_ENABLED
	SET_BIT(GICR , GICR_INT0 );
    105a:	ab e5       	ldi	r26, 0x5B	; 91
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	eb e5       	ldi	r30, 0x5B	; 91
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == EXTI_DISABLED
	CLR_BIT(GICR , GICR_INT0 );
#else
#error "Wrong Int0_INITIAL_STATE Configuration option "
#endif
}
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <EXTI_void_Int1Init>:


void    EXTI_void_Int1Init(void){
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
	//TODO
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <EXTI_void_Int2Init>:
void    EXTI_void_Int2Init(void){
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
	//TODO

}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <EXTI_u8Int0SetSenseControl>:


u8 EXTI_u8Int0SetSenseControl(u8 u8SenseCopy ){
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <EXTI_u8Int0SetSenseControl+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <EXTI_u8Int0SetSenseControl+0x8>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8ErrorState_Copy = OK;
    1098:	19 82       	std	Y+1, r1	; 0x01
	switch( u8SenseCopy )
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	3c 83       	std	Y+4, r19	; 0x04
    10a2:	2b 83       	std	Y+3, r18	; 0x03
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	91 05       	cpc	r25, r1
    10ac:	a1 f1       	breq	.+104    	; 0x1116 <EXTI_u8Int0SetSenseControl+0x8c>
    10ae:	2b 81       	ldd	r18, Y+3	; 0x03
    10b0:	3c 81       	ldd	r19, Y+4	; 0x04
    10b2:	23 30       	cpi	r18, 0x03	; 3
    10b4:	31 05       	cpc	r19, r1
    10b6:	34 f4       	brge	.+12     	; 0x10c4 <EXTI_u8Int0SetSenseControl+0x3a>
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	c9 f1       	breq	.+114    	; 0x1134 <EXTI_u8Int0SetSenseControl+0xaa>
    10c2:	47 c0       	rjmp	.+142    	; 0x1152 <EXTI_u8Int0SetSenseControl+0xc8>
    10c4:	2b 81       	ldd	r18, Y+3	; 0x03
    10c6:	3c 81       	ldd	r19, Y+4	; 0x04
    10c8:	23 30       	cpi	r18, 0x03	; 3
    10ca:	31 05       	cpc	r19, r1
    10cc:	31 f0       	breq	.+12     	; 0x10da <EXTI_u8Int0SetSenseControl+0x50>
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	91 05       	cpc	r25, r1
    10d6:	81 f0       	breq	.+32     	; 0x10f8 <EXTI_u8Int0SetSenseControl+0x6e>
    10d8:	3c c0       	rjmp	.+120    	; 0x1152 <EXTI_u8Int0SetSenseControl+0xc8>
	{
	case EXTI_LOW_LEVEL :
		CLR_BIT(MCUCR , MCUCR_ISC00);
    10da:	a5 e5       	ldi	r26, 0x55	; 85
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e5 e5       	ldi	r30, 0x55	; 85
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8e 7f       	andi	r24, 0xFE	; 254
    10e6:	8c 93       	st	X, r24
		CLR_BIT(MCUCR , MCUCR_ISC01);
    10e8:	a5 e5       	ldi	r26, 0x55	; 85
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e5 e5       	ldi	r30, 0x55	; 85
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8d 7f       	andi	r24, 0xFD	; 253
    10f4:	8c 93       	st	X, r24
    10f6:	2f c0       	rjmp	.+94     	; 0x1156 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_ON_CHANGE :
		SET_BIT(MCUCR , MCUCR_ISC00);
    10f8:	a5 e5       	ldi	r26, 0x55	; 85
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e5 e5       	ldi	r30, 0x55	; 85
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	8c 93       	st	X, r24
		CLR_BIT(MCUCR , MCUCR_ISC01);
    1106:	a5 e5       	ldi	r26, 0x55	; 85
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e5       	ldi	r30, 0x55	; 85
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8d 7f       	andi	r24, 0xFD	; 253
    1112:	8c 93       	st	X, r24
    1114:	20 c0       	rjmp	.+64     	; 0x1156 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_FALLING_EDGE :
		CLR_BIT(MCUCR , MCUCR_ISC00);
    1116:	a5 e5       	ldi	r26, 0x55	; 85
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e5       	ldi	r30, 0x55	; 85
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8e 7f       	andi	r24, 0xFE	; 254
    1122:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
    1124:	a5 e5       	ldi	r26, 0x55	; 85
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e5       	ldi	r30, 0x55	; 85
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	8c 93       	st	X, r24
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_RISING_EDGE :
		SET_BIT(MCUCR , MCUCR_ISC00);
    1134:	a5 e5       	ldi	r26, 0x55	; 85
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e5       	ldi	r30, 0x55	; 85
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	81 60       	ori	r24, 0x01	; 1
    1140:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
    1142:	a5 e5       	ldi	r26, 0x55	; 85
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e5       	ldi	r30, 0x55	; 85
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	82 60       	ori	r24, 0x02	; 2
    114e:	8c 93       	st	X, r24
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	default : u8ErrorState_Copy = NOK ;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01

	}
	return u8ErrorState_Copy ;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <EXTI_u8Int1SetSenseControl>:
u8 EXTI_u8Int1SetSenseControl(u8 u8SenseCopy ){
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <EXTI_u8Int1SetSenseControl+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	89 83       	std	Y+1, r24	; 0x01
	//TODO

}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <EXTI_u8Int2SetSenseControl>:
u8 EXTI_u8Int2SetSenseControl(u8 u8SenseCopy ){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <EXTI_u8Int2SetSenseControl+0x6>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	89 83       	std	Y+1, r24	; 0x01
	//TODO

}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack (void (*PvInt0Func_Copy) (void)){
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <EXTI_u8Int0SetCallBack+0x6>
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	9b 83       	std	Y+3, r25	; 0x03
    11a0:	8a 83       	std	Y+2, r24	; 0x02

	u8 u8ErrorStatusLocal = OK;
    11a2:	19 82       	std	Y+1, r1	; 0x01
	if( PvInt0Func_Copy != NULL ){
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	39 f0       	breq	.+14     	; 0x11ba <EXTI_u8Int0SetCallBack+0x28>
		//global ptr = local variable
		EXTI_pvInt0func = PvInt0Func_Copy;
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	9b 81       	ldd	r25, Y+3	; 0x03
    11b0:	90 93 5d 01 	sts	0x015D, r25
    11b4:	80 93 5c 01 	sts	0x015C, r24
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <EXTI_u8Int0SetCallBack+0x2c>
	}
	else{
		u8ErrorStatusLocal = NULL_POINTER;
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorStatusLocal ;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <__vector_1>:


/* ISR of INT0 */
void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void){
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0func != NULL){
    11f6:	80 91 5c 01 	lds	r24, 0x015C
    11fa:	90 91 5d 01 	lds	r25, 0x015D
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	29 f0       	breq	.+10     	; 0x120c <__vector_1+0x40>
		//global ptr
		EXTI_pvInt0func();
    1202:	e0 91 5c 01 	lds	r30, 0x015C
    1206:	f0 91 5d 01 	lds	r31, 0x015D
    120a:	09 95       	icall
	}
	else{
		/* DO NOTHING */
	}

}
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	0f 90       	pop	r0
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti

00001232 <DIO_SetPinValue>:
#include  "util/delay.h"



void  DIO_SetPinValue (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinValueCopy)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	27 97       	sbiw	r28, 0x07	; 7
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	6a 83       	std	Y+2, r22	; 0x02
    124a:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	08 f0       	brcs	.+2      	; 0x1254 <DIO_SetPinValue+0x22>
    1252:	fc c0       	rjmp	.+504    	; 0x144c <DIO_SetPinValue+0x21a>
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	88 30       	cpi	r24, 0x08	; 8
    1258:	08 f0       	brcs	.+2      	; 0x125c <DIO_SetPinValue+0x2a>
    125a:	f8 c0       	rjmp	.+496    	; 0x144c <DIO_SetPinValue+0x21a>
	{
		if(U8PinValueCopy == DIO_HIGH)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	09 f0       	breq	.+2      	; 0x1264 <DIO_SetPinValue+0x32>
    1262:	6f c0       	rjmp	.+222    	; 0x1342 <DIO_SetPinValue+0x110>
		{
			switch (U8PortIdcopy)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3f 83       	std	Y+7, r19	; 0x07
    126c:	2e 83       	std	Y+6, r18	; 0x06
    126e:	8e 81       	ldd	r24, Y+6	; 0x06
    1270:	9f 81       	ldd	r25, Y+7	; 0x07
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	49 f1       	breq	.+82     	; 0x12ca <DIO_SetPinValue+0x98>
    1278:	2e 81       	ldd	r18, Y+6	; 0x06
    127a:	3f 81       	ldd	r19, Y+7	; 0x07
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	2c f4       	brge	.+10     	; 0x128c <DIO_SetPinValue+0x5a>
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	9f 81       	ldd	r25, Y+7	; 0x07
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	61 f0       	breq	.+24     	; 0x12a2 <DIO_SetPinValue+0x70>
    128a:	ec c0       	rjmp	.+472    	; 0x1464 <DIO_SetPinValue+0x232>
    128c:	2e 81       	ldd	r18, Y+6	; 0x06
    128e:	3f 81       	ldd	r19, Y+7	; 0x07
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	71 f1       	breq	.+92     	; 0x12f2 <DIO_SetPinValue+0xc0>
    1296:	8e 81       	ldd	r24, Y+6	; 0x06
    1298:	9f 81       	ldd	r25, Y+7	; 0x07
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	e9 f1       	breq	.+122    	; 0x131a <DIO_SetPinValue+0xe8>
    12a0:	e1 c0       	rjmp	.+450    	; 0x1464 <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : SET_BIT(PORTA,U8PinIdCopy); break;
    12a2:	ab e3       	ldi	r26, 0x3B	; 59
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	eb e3       	ldi	r30, 0x3B	; 59
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_SetPinValue+0x8e>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_SetPinValue+0x8a>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	cd c0       	rjmp	.+410    	; 0x1464 <DIO_SetPinValue+0x232>
				case DIO_PORTB : SET_BIT(PORTB,U8PinIdCopy); break;
    12ca:	a8 e3       	ldi	r26, 0x38	; 56
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e8 e3       	ldi	r30, 0x38	; 56
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_SetPinValue+0xb6>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_SetPinValue+0xb2>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	b9 c0       	rjmp	.+370    	; 0x1464 <DIO_SetPinValue+0x232>
				case DIO_PORTC : SET_BIT(PORTC,U8PinIdCopy); break;
    12f2:	a5 e3       	ldi	r26, 0x35	; 53
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e3       	ldi	r30, 0x35	; 53
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_SetPinValue+0xde>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_SetPinValue+0xda>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	a5 c0       	rjmp	.+330    	; 0x1464 <DIO_SetPinValue+0x232>
				case DIO_PORTD : SET_BIT(PORTD,U8PinIdCopy); break;
    131a:	a2 e3       	ldi	r26, 0x32	; 50
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e2 e3       	ldi	r30, 0x32	; 50
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_SetPinValue+0x106>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_SetPinValue+0x102>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	91 c0       	rjmp	.+290    	; 0x1464 <DIO_SetPinValue+0x232>
			}
		}
		else if (U8PinValueCopy == DIO_LOW)
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <DIO_SetPinValue+0x118>
    1348:	74 c0       	rjmp	.+232    	; 0x1432 <DIO_SetPinValue+0x200>
		{
			switch (U8PortIdcopy)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3d 83       	std	Y+5, r19	; 0x05
    1352:	2c 83       	std	Y+4, r18	; 0x04
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	59 f1       	breq	.+86     	; 0x13b4 <DIO_SetPinValue+0x182>
    135e:	2c 81       	ldd	r18, Y+4	; 0x04
    1360:	3d 81       	ldd	r19, Y+5	; 0x05
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	2c f4       	brge	.+10     	; 0x1372 <DIO_SetPinValue+0x140>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	69 f0       	breq	.+26     	; 0x138a <DIO_SetPinValue+0x158>
    1370:	79 c0       	rjmp	.+242    	; 0x1464 <DIO_SetPinValue+0x232>
    1372:	2c 81       	ldd	r18, Y+4	; 0x04
    1374:	3d 81       	ldd	r19, Y+5	; 0x05
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	89 f1       	breq	.+98     	; 0x13de <DIO_SetPinValue+0x1ac>
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <DIO_SetPinValue+0x156>
    1386:	40 c0       	rjmp	.+128    	; 0x1408 <DIO_SetPinValue+0x1d6>
    1388:	6d c0       	rjmp	.+218    	; 0x1464 <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : CLR_BIT(PORTA,U8PinIdCopy); break;
    138a:	ab e3       	ldi	r26, 0x3B	; 59
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	eb e3       	ldi	r30, 0x3B	; 59
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_SetPinValue+0x176>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_SetPinValue+0x172>
    13ac:	80 95       	com	r24
    13ae:	84 23       	and	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	58 c0       	rjmp	.+176    	; 0x1464 <DIO_SetPinValue+0x232>
				case DIO_PORTB : CLR_BIT(PORTB,U8PinIdCopy); break;
    13b4:	a8 e3       	ldi	r26, 0x38	; 56
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e8 e3       	ldi	r30, 0x38	; 56
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_SetPinValue+0x1a0>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_SetPinValue+0x19c>
    13d6:	80 95       	com	r24
    13d8:	84 23       	and	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	43 c0       	rjmp	.+134    	; 0x1464 <DIO_SetPinValue+0x232>
				case DIO_PORTC : CLR_BIT(PORTC,U8PinIdCopy); break;
    13de:	a5 e3       	ldi	r26, 0x35	; 53
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e5 e3       	ldi	r30, 0x35	; 53
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_SetPinValue+0x1ca>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_SetPinValue+0x1c6>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	2e c0       	rjmp	.+92     	; 0x1464 <DIO_SetPinValue+0x232>
				case DIO_PORTD : CLR_BIT(PORTD,U8PinIdCopy); break;
    1408:	a2 e3       	ldi	r26, 0x32	; 50
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e2 e3       	ldi	r30, 0x32	; 50
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_SetPinValue+0x1f4>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_SetPinValue+0x1f0>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	19 c0       	rjmp	.+50     	; 0x1464 <DIO_SetPinValue+0x232>
			}
		}
		else
			printf("ERROR SELECT HIGH OR LOW VALUE.. ");
    1432:	00 d0       	rcall	.+0      	; 0x1434 <DIO_SetPinValue+0x202>
    1434:	ed b7       	in	r30, 0x3d	; 61
    1436:	fe b7       	in	r31, 0x3e	; 62
    1438:	31 96       	adiw	r30, 0x01	; 1
    143a:	80 e6       	ldi	r24, 0x60	; 96
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	80 83       	st	Z, r24
    1442:	0e 94 3d 13 	call	0x267a	; 0x267a <printf>
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0c c0       	rjmp	.+24     	; 0x1464 <DIO_SetPinValue+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_SetPinValue+0x21c>
    144e:	ed b7       	in	r30, 0x3d	; 61
    1450:	fe b7       	in	r31, 0x3e	; 62
    1452:	31 96       	adiw	r30, 0x01	; 1
    1454:	82 e8       	ldi	r24, 0x82	; 130
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
    145c:	0e 94 3d 13 	call	0x267a	; 0x267a <printf>
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0

}
    1464:	27 96       	adiw	r28, 0x07	; 7
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <DIO_SetPinDirection>:



void  DIO_SetPinDirection (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinDirCopy)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	27 97       	sbiw	r28, 0x07	; 7
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	6a 83       	std	Y+2, r22	; 0x02
    148e:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	08 f0       	brcs	.+2      	; 0x1498 <DIO_SetPinDirection+0x22>
    1496:	fc c0       	rjmp	.+504    	; 0x1690 <DIO_SetPinDirection+0x21a>
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	88 30       	cpi	r24, 0x08	; 8
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <DIO_SetPinDirection+0x2a>
    149e:	f8 c0       	rjmp	.+496    	; 0x1690 <DIO_SetPinDirection+0x21a>
	{
		if(U8PinDirCopy == DIO_OUTPUT)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <DIO_SetPinDirection+0x32>
    14a6:	6f c0       	rjmp	.+222    	; 0x1586 <DIO_SetPinDirection+0x110>
		{
			switch (U8PortIdcopy)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3f 83       	std	Y+7, r19	; 0x07
    14b0:	2e 83       	std	Y+6, r18	; 0x06
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	49 f1       	breq	.+82     	; 0x150e <DIO_SetPinDirection+0x98>
    14bc:	2e 81       	ldd	r18, Y+6	; 0x06
    14be:	3f 81       	ldd	r19, Y+7	; 0x07
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <DIO_SetPinDirection+0x5a>
    14c6:	8e 81       	ldd	r24, Y+6	; 0x06
    14c8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <DIO_SetPinDirection+0x70>
    14ce:	ec c0       	rjmp	.+472    	; 0x16a8 <DIO_SetPinDirection+0x232>
    14d0:	2e 81       	ldd	r18, Y+6	; 0x06
    14d2:	3f 81       	ldd	r19, Y+7	; 0x07
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	71 f1       	breq	.+92     	; 0x1536 <DIO_SetPinDirection+0xc0>
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	9f 81       	ldd	r25, Y+7	; 0x07
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	e9 f1       	breq	.+122    	; 0x155e <DIO_SetPinDirection+0xe8>
    14e4:	e1 c0       	rjmp	.+450    	; 0x16a8 <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : SET_BIT(DDRA,U8PinIdCopy); break;
    14e6:	aa e3       	ldi	r26, 0x3A	; 58
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ea e3       	ldi	r30, 0x3A	; 58
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_SetPinDirection+0x8e>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_SetPinDirection+0x8a>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	cd c0       	rjmp	.+410    	; 0x16a8 <DIO_SetPinDirection+0x232>
			case DIO_PORTB : SET_BIT(DDRB,U8PinIdCopy); break;
    150e:	a7 e3       	ldi	r26, 0x37	; 55
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e7 e3       	ldi	r30, 0x37	; 55
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_SetPinDirection+0xb6>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_SetPinDirection+0xb2>
    1530:	84 2b       	or	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	b9 c0       	rjmp	.+370    	; 0x16a8 <DIO_SetPinDirection+0x232>
			case DIO_PORTC : SET_BIT(DDRC,U8PinIdCopy); break;
    1536:	a4 e3       	ldi	r26, 0x34	; 52
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e4 e3       	ldi	r30, 0x34	; 52
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_SetPinDirection+0xde>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_SetPinDirection+0xda>
    1558:	84 2b       	or	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	a5 c0       	rjmp	.+330    	; 0x16a8 <DIO_SetPinDirection+0x232>
			case DIO_PORTD : SET_BIT(DDRD,U8PinIdCopy); break;
    155e:	a1 e3       	ldi	r26, 0x31	; 49
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e1 e3       	ldi	r30, 0x31	; 49
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_SetPinDirection+0x106>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_SetPinDirection+0x102>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	91 c0       	rjmp	.+290    	; 0x16a8 <DIO_SetPinDirection+0x232>
			}
		}
		else if (U8PinDirCopy == DIO_INPUT)
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	88 23       	and	r24, r24
    158a:	09 f0       	breq	.+2      	; 0x158e <DIO_SetPinDirection+0x118>
    158c:	74 c0       	rjmp	.+232    	; 0x1676 <DIO_SetPinDirection+0x200>
		{
			switch (U8PortIdcopy)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3d 83       	std	Y+5, r19	; 0x05
    1596:	2c 83       	std	Y+4, r18	; 0x04
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	59 f1       	breq	.+86     	; 0x15f8 <DIO_SetPinDirection+0x182>
    15a2:	2c 81       	ldd	r18, Y+4	; 0x04
    15a4:	3d 81       	ldd	r19, Y+5	; 0x05
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <DIO_SetPinDirection+0x140>
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	69 f0       	breq	.+26     	; 0x15ce <DIO_SetPinDirection+0x158>
    15b4:	79 c0       	rjmp	.+242    	; 0x16a8 <DIO_SetPinDirection+0x232>
    15b6:	2c 81       	ldd	r18, Y+4	; 0x04
    15b8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	89 f1       	breq	.+98     	; 0x1622 <DIO_SetPinDirection+0x1ac>
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <DIO_SetPinDirection+0x156>
    15ca:	40 c0       	rjmp	.+128    	; 0x164c <DIO_SetPinDirection+0x1d6>
    15cc:	6d c0       	rjmp	.+218    	; 0x16a8 <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : CLR_BIT(DDRA,U8PinIdCopy); break;
    15ce:	aa e3       	ldi	r26, 0x3A	; 58
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ea e3       	ldi	r30, 0x3A	; 58
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_SetPinDirection+0x176>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_SetPinDirection+0x172>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	58 c0       	rjmp	.+176    	; 0x16a8 <DIO_SetPinDirection+0x232>
			case DIO_PORTB : CLR_BIT(DDRB,U8PinIdCopy); break;
    15f8:	a7 e3       	ldi	r26, 0x37	; 55
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e7 e3       	ldi	r30, 0x37	; 55
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_SetPinDirection+0x1a0>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_SetPinDirection+0x19c>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	43 c0       	rjmp	.+134    	; 0x16a8 <DIO_SetPinDirection+0x232>
			case DIO_PORTC : CLR_BIT(DDRC,U8PinIdCopy); break;
    1622:	a4 e3       	ldi	r26, 0x34	; 52
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e4 e3       	ldi	r30, 0x34	; 52
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_SetPinDirection+0x1ca>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_SetPinDirection+0x1c6>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	2e c0       	rjmp	.+92     	; 0x16a8 <DIO_SetPinDirection+0x232>
			case DIO_PORTD : CLR_BIT(DDRD,U8PinIdCopy); break;
    164c:	a1 e3       	ldi	r26, 0x31	; 49
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e1 e3       	ldi	r30, 0x31	; 49
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_SetPinDirection+0x1f4>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_SetPinDirection+0x1f0>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	19 c0       	rjmp	.+50     	; 0x16a8 <DIO_SetPinDirection+0x232>
			}
		}else
			printf("ERROR SELECT OUTPUT OR INPUT VALUE.. ");
    1676:	00 d0       	rcall	.+0      	; 0x1678 <DIO_SetPinDirection+0x202>
    1678:	ed b7       	in	r30, 0x3d	; 61
    167a:	fe b7       	in	r31, 0x3e	; 62
    167c:	31 96       	adiw	r30, 0x01	; 1
    167e:	86 eb       	ldi	r24, 0xB6	; 182
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
    1686:	0e 94 3d 13 	call	0x267a	; 0x267a <printf>
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0c c0       	rjmp	.+24     	; 0x16a8 <DIO_SetPinDirection+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    1690:	00 d0       	rcall	.+0      	; 0x1692 <DIO_SetPinDirection+0x21c>
    1692:	ed b7       	in	r30, 0x3d	; 61
    1694:	fe b7       	in	r31, 0x3e	; 62
    1696:	31 96       	adiw	r30, 0x01	; 1
    1698:	82 e8       	ldi	r24, 0x82	; 130
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
    16a0:	0e 94 3d 13 	call	0x267a	; 0x267a <printf>
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
}
    16a8:	27 96       	adiw	r28, 0x07	; 7
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <DIO_GetPinValue>:


u8    DIO_GetPinValue  (u8 U8PortIdCopy , u8 U8PinIdCopy)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <DIO_GetPinValue+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <DIO_GetPinValue+0x8>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <DIO_GetPinValue+0xa>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	6b 83       	std	Y+3, r22	; 0x03
	if((U8PortIdCopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <DIO_GetPinValue+0x1a>
    16d2:	6f c0       	rjmp	.+222    	; 0x17b2 <DIO_GetPinValue+0xf8>
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	88 30       	cpi	r24, 0x08	; 8
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <DIO_GetPinValue+0x22>
    16da:	6b c0       	rjmp	.+214    	; 0x17b2 <DIO_GetPinValue+0xf8>
	{
		u8 PinValue=0;
    16dc:	19 82       	std	Y+1, r1	; 0x01

			switch (U8PortIdCopy)
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	3e 83       	std	Y+6, r19	; 0x06
    16e6:	2d 83       	std	Y+5, r18	; 0x05
    16e8:	4d 81       	ldd	r20, Y+5	; 0x05
    16ea:	5e 81       	ldd	r21, Y+6	; 0x06
    16ec:	41 30       	cpi	r20, 0x01	; 1
    16ee:	51 05       	cpc	r21, r1
    16f0:	41 f1       	breq	.+80     	; 0x1742 <DIO_GetPinValue+0x88>
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	91 05       	cpc	r25, r1
    16fa:	34 f4       	brge	.+12     	; 0x1708 <DIO_GetPinValue+0x4e>
    16fc:	2d 81       	ldd	r18, Y+5	; 0x05
    16fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1700:	21 15       	cp	r18, r1
    1702:	31 05       	cpc	r19, r1
    1704:	61 f0       	breq	.+24     	; 0x171e <DIO_GetPinValue+0x64>
    1706:	52 c0       	rjmp	.+164    	; 0x17ac <DIO_GetPinValue+0xf2>
    1708:	4d 81       	ldd	r20, Y+5	; 0x05
    170a:	5e 81       	ldd	r21, Y+6	; 0x06
    170c:	42 30       	cpi	r20, 0x02	; 2
    170e:	51 05       	cpc	r21, r1
    1710:	51 f1       	breq	.+84     	; 0x1766 <DIO_GetPinValue+0xac>
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	91 05       	cpc	r25, r1
    171a:	b9 f1       	breq	.+110    	; 0x178a <DIO_GetPinValue+0xd0>
    171c:	47 c0       	rjmp	.+142    	; 0x17ac <DIO_GetPinValue+0xf2>
			{
				case DIO_PORTA : PinValue= GET_BIT(PINA,U8PinIdCopy); break;
    171e:	e9 e3       	ldi	r30, 0x39	; 57
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a9 01       	movw	r20, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_GetPinValue+0x7c>
    1732:	55 95       	asr	r21
    1734:	47 95       	ror	r20
    1736:	8a 95       	dec	r24
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_GetPinValue+0x78>
    173a:	ca 01       	movw	r24, r20
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	35 c0       	rjmp	.+106    	; 0x17ac <DIO_GetPinValue+0xf2>
				case DIO_PORTB : PinValue= GET_BIT(PINB,U8PinIdCopy); break;
    1742:	e6 e3       	ldi	r30, 0x36	; 54
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a9 01       	movw	r20, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_GetPinValue+0xa0>
    1756:	55 95       	asr	r21
    1758:	47 95       	ror	r20
    175a:	8a 95       	dec	r24
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_GetPinValue+0x9c>
    175e:	ca 01       	movw	r24, r20
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	23 c0       	rjmp	.+70     	; 0x17ac <DIO_GetPinValue+0xf2>
				case DIO_PORTC : PinValue= GET_BIT(PINC,U8PinIdCopy); break;
    1766:	e3 e3       	ldi	r30, 0x33	; 51
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a9 01       	movw	r20, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_GetPinValue+0xc4>
    177a:	55 95       	asr	r21
    177c:	47 95       	ror	r20
    177e:	8a 95       	dec	r24
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_GetPinValue+0xc0>
    1782:	ca 01       	movw	r24, r20
    1784:	81 70       	andi	r24, 0x01	; 1
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	11 c0       	rjmp	.+34     	; 0x17ac <DIO_GetPinValue+0xf2>
				case DIO_PORTD : PinValue= GET_BIT(PIND,U8PinIdCopy); break;
    178a:	e0 e3       	ldi	r30, 0x30	; 48
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <DIO_GetPinValue+0xe8>
    179e:	55 95       	asr	r21
    17a0:	47 95       	ror	r20
    17a2:	8a 95       	dec	r24
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <DIO_GetPinValue+0xe4>
    17a6:	ca 01       	movw	r24, r20
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
			}
		return PinValue;
    17ac:	59 81       	ldd	r21, Y+1	; 0x01
    17ae:	5c 83       	std	Y+4, r21	; 0x04
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <DIO_GetPinValue+0xfa>

	}else
	{
	}
	return 0;
    17b2:	1c 82       	std	Y+4, r1	; 0x04
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17b6:	26 96       	adiw	r28, 0x06	; 6
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <DIO_SetPortValue>:


void  DIO_SetPortValue (u8 U8PortIdcopy ,u8 U8PinValueCopy)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <DIO_SetPortValue+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <DIO_SetPortValue+0x8>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	98 f5       	brcc	.+102    	; 0x1844 <DIO_SetPortValue+0x7c>
	{

			switch (U8PortIdcopy)
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3c 83       	std	Y+4, r19	; 0x04
    17e6:	2b 83       	std	Y+3, r18	; 0x03
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	91 05       	cpc	r25, r1
    17f0:	d1 f0       	breq	.+52     	; 0x1826 <DIO_SetPortValue+0x5e>
    17f2:	2b 81       	ldd	r18, Y+3	; 0x03
    17f4:	3c 81       	ldd	r19, Y+4	; 0x04
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	31 05       	cpc	r19, r1
    17fa:	2c f4       	brge	.+10     	; 0x1806 <DIO_SetPortValue+0x3e>
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	61 f0       	breq	.+24     	; 0x181c <DIO_SetPortValue+0x54>
    1804:	2b c0       	rjmp	.+86     	; 0x185c <DIO_SetPortValue+0x94>
    1806:	2b 81       	ldd	r18, Y+3	; 0x03
    1808:	3c 81       	ldd	r19, Y+4	; 0x04
    180a:	22 30       	cpi	r18, 0x02	; 2
    180c:	31 05       	cpc	r19, r1
    180e:	81 f0       	breq	.+32     	; 0x1830 <DIO_SetPortValue+0x68>
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	91 05       	cpc	r25, r1
    1818:	81 f0       	breq	.+32     	; 0x183a <DIO_SetPortValue+0x72>
    181a:	20 c0       	rjmp	.+64     	; 0x185c <DIO_SetPortValue+0x94>
			{
				case DIO_PORTA : SET_PORT(PORTA,U8PinValueCopy); break;
    181c:	eb e3       	ldi	r30, 0x3B	; 59
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	80 83       	st	Z, r24
    1824:	1b c0       	rjmp	.+54     	; 0x185c <DIO_SetPortValue+0x94>
				case DIO_PORTB : SET_PORT(PORTB,U8PinValueCopy); break;
    1826:	e8 e3       	ldi	r30, 0x38	; 56
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	80 83       	st	Z, r24
    182e:	16 c0       	rjmp	.+44     	; 0x185c <DIO_SetPortValue+0x94>
				case DIO_PORTC : SET_PORT(PORTC,U8PinValueCopy); break;
    1830:	e5 e3       	ldi	r30, 0x35	; 53
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	80 83       	st	Z, r24
    1838:	11 c0       	rjmp	.+34     	; 0x185c <DIO_SetPortValue+0x94>
				case DIO_PORTD : SET_PORT(PORTD,U8PinValueCopy); break;
    183a:	e2 e3       	ldi	r30, 0x32	; 50
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	80 83       	st	Z, r24
    1842:	0c c0       	rjmp	.+24     	; 0x185c <DIO_SetPortValue+0x94>
			}



	}else
		printf("ERROR SELECTION PORTS FROM 0--3...");
    1844:	00 d0       	rcall	.+0      	; 0x1846 <DIO_SetPortValue+0x7e>
    1846:	ed b7       	in	r30, 0x3d	; 61
    1848:	fe b7       	in	r31, 0x3e	; 62
    184a:	31 96       	adiw	r30, 0x01	; 1
    184c:	8c ed       	ldi	r24, 0xDC	; 220
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	0e 94 3d 13 	call	0x267a	; 0x267a <printf>
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0


}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <DIO_SetPortDirection>:
void  DIO_SetPortDirection (u8 U8PortIdcopy ,u8 U8PinDirCopy)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <DIO_SetPortDirection+0x6>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <DIO_SetPortDirection+0x8>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	98 f5       	brcc	.+102    	; 0x18e6 <DIO_SetPortDirection+0x7c>
	{

			switch (U8PortIdcopy)
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3c 83       	std	Y+4, r19	; 0x04
    1888:	2b 83       	std	Y+3, r18	; 0x03
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	d1 f0       	breq	.+52     	; 0x18c8 <DIO_SetPortDirection+0x5e>
    1894:	2b 81       	ldd	r18, Y+3	; 0x03
    1896:	3c 81       	ldd	r19, Y+4	; 0x04
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	2c f4       	brge	.+10     	; 0x18a8 <DIO_SetPortDirection+0x3e>
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	61 f0       	breq	.+24     	; 0x18be <DIO_SetPortDirection+0x54>
    18a6:	2b c0       	rjmp	.+86     	; 0x18fe <DIO_SetPortDirection+0x94>
    18a8:	2b 81       	ldd	r18, Y+3	; 0x03
    18aa:	3c 81       	ldd	r19, Y+4	; 0x04
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	31 05       	cpc	r19, r1
    18b0:	81 f0       	breq	.+32     	; 0x18d2 <DIO_SetPortDirection+0x68>
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	91 05       	cpc	r25, r1
    18ba:	81 f0       	breq	.+32     	; 0x18dc <DIO_SetPortDirection+0x72>
    18bc:	20 c0       	rjmp	.+64     	; 0x18fe <DIO_SetPortDirection+0x94>
			{
			case DIO_PORTA : SET_PORT(DDRA,0XFF); break;
    18be:	ea e3       	ldi	r30, 0x3A	; 58
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	80 83       	st	Z, r24
    18c6:	1b c0       	rjmp	.+54     	; 0x18fe <DIO_SetPortDirection+0x94>
			case DIO_PORTB : SET_PORT(DDRB,0XFF); break;
    18c8:	e7 e3       	ldi	r30, 0x37	; 55
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
    18ce:	80 83       	st	Z, r24
    18d0:	16 c0       	rjmp	.+44     	; 0x18fe <DIO_SetPortDirection+0x94>
			case DIO_PORTC : SET_PORT(DDRC,0XFF); break;
    18d2:	e4 e3       	ldi	r30, 0x34	; 52
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	80 83       	st	Z, r24
    18da:	11 c0       	rjmp	.+34     	; 0x18fe <DIO_SetPortDirection+0x94>
			case DIO_PORTD : SET_PORT(DDRD,0XFF); break;
    18dc:	e1 e3       	ldi	r30, 0x31	; 49
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	80 83       	st	Z, r24
    18e4:	0c c0       	rjmp	.+24     	; 0x18fe <DIO_SetPortDirection+0x94>
			}


	}else
		printf("ERROR SELECTION PORTS FROM 0--3....");
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <DIO_SetPortDirection+0x7e>
    18e8:	ed b7       	in	r30, 0x3d	; 61
    18ea:	fe b7       	in	r31, 0x3e	; 62
    18ec:	31 96       	adiw	r30, 0x01	; 1
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	0e 94 3d 13 	call	0x267a	; 0x267a <printf>
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0

}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <ADC_Init>:
#include "avr/io.h"
#include "ADC.h"


void ADC_Init (void)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
	// ADC Enable
	SET_BIT(ADCSRA , ADCSRA_ADEN);
    1914:	a6 e2       	ldi	r26, 0x26	; 38
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e6 e2       	ldi	r30, 0x26	; 38
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	80 68       	ori	r24, 0x80	; 128
    1920:	8c 93       	st	X, r24

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA , ADCSRA_ADPS2);
    1922:	a6 e2       	ldi	r26, 0x26	; 38
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e6 e2       	ldi	r30, 0x26	; 38
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	84 60       	ori	r24, 0x04	; 4
    192e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1);
    1930:	a6 e2       	ldi	r26, 0x26	; 38
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e6 e2       	ldi	r30, 0x26	; 38
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS0);
    193e:	a6 e2       	ldi	r26, 0x26	; 38
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e6 e2       	ldi	r30, 0x26	; 38
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	81 60       	ori	r24, 0x01	; 1
    194a:	8c 93       	st	X, r24


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT (ADMUX  , ADMUX_REFS1);
    194c:	a7 e2       	ldi	r26, 0x27	; 39
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e7 e2       	ldi	r30, 0x27	; 39
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8f 77       	andi	r24, 0x7F	; 127
    1958:	8c 93       	st	X, r24
	SET_BIT (ADMUX  , ADMUX_REFS0);
    195a:	a7 e2       	ldi	r26, 0x27	; 39
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e7 e2       	ldi	r30, 0x27	; 39
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 64       	ori	r24, 0x40	; 64
    1966:	8c 93       	st	X, r24

	/*ADC Data Rgith Adjustment 10 bits
	CLR_BIT(ADMUX , ADMUX_ADLAR);*/

	/*Activate Left adjustment result 8 bits */
	SET_BIT(ADMUX , ADMUX_ADLAR);
    1968:	a7 e2       	ldi	r26, 0x27	; 39
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e7 e2       	ldi	r30, 0x27	; 39
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	80 62       	ori	r24, 0x20	; 32
    1974:	8c 93       	st	X, r24

}
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <ADC_Read>:

u16 ADC_Read (u8 channel)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01
	//step 1 : Clear MUX bits in ADMUX
	ADMUX   &= 0b11100000;
    1988:	a7 e2       	ldi	r26, 0x27	; 39
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e7 e2       	ldi	r30, 0x27	; 39
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 7e       	andi	r24, 0xE0	; 224
    1994:	8c 93       	st	X, r24


	//Step 2 : Set the required  ADC Channel Selection into the MUX bits
	ADMUX   |=channel;
    1996:	a7 e2       	ldi	r26, 0x27	; 39
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e7 e2       	ldi	r30, 0x27	; 39
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	90 81       	ld	r25, Z
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	89 2b       	or	r24, r25
    19a4:	8c 93       	st	X, r24


	// Step 3 : Start Single Converstion
	SET_BIT(ADCSRA , ADCSRA_ADSC );
    19a6:	a6 e2       	ldi	r26, 0x26	; 38
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e6 e2       	ldi	r30, 0x26	; 38
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 64       	ori	r24, 0x40	; 64
    19b2:	8c 93       	st	X, r24


	// Step 4 :  Polling (busy wait ) until the conversion complete flag is set
	while((GET_BIT(ADCSRA , ADCSRA_ADIF)) == 0);
    19b4:	e6 e2       	ldi	r30, 0x26	; 38
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	82 95       	swap	r24
    19bc:	8f 70       	andi	r24, 0x0F	; 15
    19be:	88 2f       	mov	r24, r24
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	81 70       	andi	r24, 0x01	; 1
    19c4:	90 70       	andi	r25, 0x00	; 0
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	a9 f3       	breq	.-22     	; 0x19b4 <ADC_Read+0x38>


	// Step 5 :  Clear Conversion Complete Flag
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    19ca:	a6 e2       	ldi	r26, 0x26	; 38
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e6 e2       	ldi	r30, 0x26	; 38
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	80 61       	ori	r24, 0x10	; 16
    19d6:	8c 93       	st	X, r24

	// Step 7 :   return value in ADCH (Left adjustment result 8 bits)

	return ADCH;
    19d8:	e5 e2       	ldi	r30, 0x25	; 37
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
}
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <LCD_VoidSendChar>:




void LCD_VoidSendChar(u8 U8DataCopy)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	2f 97       	sbiw	r28, 0x0f	; 15
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	6f ef       	ldi	r22, 0xFF	; 255
    1a04:	0e 94 35 0c 	call	0x186a	; 0x186a <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	41 e0       	ldi	r20, 0x01	; 1
    1a18:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	62 e0       	ldi	r22, 0x02	; 2
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_HIGH);
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8DataCopy);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a3e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	62 e0       	ldi	r22, 0x02	; 2
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 ea       	ldi	r26, 0xA0	; 160
    1a52:	b1 e4       	ldi	r27, 0x41	; 65
    1a54:	8b 87       	std	Y+11, r24	; 0x0b
    1a56:	9c 87       	std	Y+12, r25	; 0x0c
    1a58:	ad 87       	std	Y+13, r26	; 0x0d
    1a5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a ef       	ldi	r20, 0xFA	; 250
    1a6a:	54 e4       	ldi	r21, 0x44	; 68
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8f 83       	std	Y+7, r24	; 0x07
    1a76:	98 87       	std	Y+8, r25	; 0x08
    1a78:	a9 87       	std	Y+9, r26	; 0x09
    1a7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	4c f5       	brge	.+82     	; 0x1b08 <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <LCD_VoidSendChar+0x114>
    1ae0:	88 ec       	ldi	r24, 0xC8	; 200
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_VoidSendChar+0x102>
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	69 f7       	brne	.-38     	; 0x1ae0 <LCD_VoidSendChar+0xf6>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_VoidSendChar+0x13e>
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	62 e0       	ldi	r22, 0x02	; 2
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>


}
    1b3a:	2f 96       	adiw	r28, 0x0f	; 15
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 U8CommandCopy)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	2f 97       	sbiw	r28, 0x0f	; 15
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	6f ef       	ldi	r22, 0xFF	; 255
    1b66:	0e 94 35 0c 	call	0x186a	; 0x186a <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8CommandCopy);
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ba0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	62 e0       	ldi	r22, 0x02	; 2
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 ea       	ldi	r26, 0xA0	; 160
    1bb4:	b1 e4       	ldi	r27, 0x41	; 65
    1bb6:	8b 87       	std	Y+11, r24	; 0x0b
    1bb8:	9c 87       	std	Y+12, r25	; 0x0c
    1bba:	ad 87       	std	Y+13, r26	; 0x0d
    1bbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a ef       	ldi	r20, 0xFA	; 250
    1bcc:	54 e4       	ldi	r21, 0x44	; 68
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8f 83       	std	Y+7, r24	; 0x07
    1bd8:	98 87       	std	Y+8, r25	; 0x08
    1bda:	a9 87       	std	Y+9, r26	; 0x09
    1bdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bde:	6f 81       	ldd	r22, Y+7	; 0x07
    1be0:	78 85       	ldd	r23, Y+8	; 0x08
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <LCD_VoidSendCommand+0x114>
    1c42:	88 ec       	ldi	r24, 0xC8	; 200
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9c 83       	std	Y+4, r25	; 0x04
    1c48:	8b 83       	std	Y+3, r24	; 0x03
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <LCD_VoidSendCommand+0x102>
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <LCD_VoidSendCommand+0xf6>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	9a 83       	std	Y+2, r25	; 0x02
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_VoidSendCommand+0x13e>
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>


}
    1c9c:	2f 96       	adiw	r28, 0x0f	; 15
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <LCD_voidSendData>:
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <LCD_voidSendData+0x6>
    1cb4:	0f 92       	push	r0
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	9b 83       	std	Y+3, r25	; 0x03
    1cbc:	8a 83       	std	Y+2, r24	; 0x02
    1cbe:	19 82       	std	Y+1, r1	; 0x01
    1cc0:	0e c0       	rjmp	.+28     	; 0x1cde <LCD_voidSendData+0x30>
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	fc 01       	movw	r30, r24
    1cce:	e2 0f       	add	r30, r18
    1cd0:	f3 1f       	adc	r31, r19
    1cd2:	80 81       	ld	r24, Z
    1cd4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_VoidSendChar>
    	  Local_u8Counter ++;
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	89 83       	std	Y+1, r24	; 0x01


}
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e2 0f       	add	r30, r18
    1cec:	f3 1f       	adc	r31, r19
    1cee:	80 81       	ld	r24, Z
    1cf0:	88 23       	and	r24, r24
    1cf2:	39 f7       	brne	.-50     	; 0x1cc2 <LCD_voidSendData+0x14>
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    	  Local_u8Counter ++;
      }
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <LCD_Voidinit>:
void LCD_Voidinit(void)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	e8 97       	sbiw	r28, 0x38	; 56
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e2       	ldi	r26, 0x20	; 32
    1d42:	b2 e4       	ldi	r27, 0x42	; 66
    1d44:	8d ab       	std	Y+53, r24	; 0x35
    1d46:	9e ab       	std	Y+54, r25	; 0x36
    1d48:	af ab       	std	Y+55, r26	; 0x37
    1d4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d50:	8f a9       	ldd	r24, Y+55	; 0x37
    1d52:	98 ad       	ldd	r25, Y+56	; 0x38
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a ef       	ldi	r20, 0xFA	; 250
    1d5a:	54 e4       	ldi	r21, 0x44	; 68
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	89 ab       	std	Y+49, r24	; 0x31
    1d66:	9a ab       	std	Y+50, r25	; 0x32
    1d68:	ab ab       	std	Y+51, r26	; 0x33
    1d6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d70:	8b a9       	ldd	r24, Y+51	; 0x33
    1d72:	9c a9       	ldd	r25, Y+52	; 0x34
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <LCD_Voidinit+0x8e>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	98 ab       	std	Y+48, r25	; 0x30
    1d8a:	8f a7       	std	Y+47, r24	; 0x2f
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <LCD_Voidinit+0x10c>
	else if (__tmp > 65535)
    1d8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d90:	7a a9       	ldd	r23, Y+50	; 0x32
    1d92:	8b a9       	ldd	r24, Y+51	; 0x33
    1d94:	9c a9       	ldd	r25, Y+52	; 0x34
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <LCD_Voidinit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	6d a9       	ldd	r22, Y+53	; 0x35
    1da8:	7e a9       	ldd	r23, Y+54	; 0x36
    1daa:	8f a9       	ldd	r24, Y+55	; 0x37
    1dac:	98 ad       	ldd	r25, Y+56	; 0x38
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	98 ab       	std	Y+48, r25	; 0x30
    1dcc:	8f a7       	std	Y+47, r24	; 0x2f
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <LCD_Voidinit+0xee>
    1dd0:	88 ec       	ldi	r24, 0xC8	; 200
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9e a7       	std	Y+46, r25	; 0x2e
    1dd6:	8d a7       	std	Y+45, r24	; 0x2d
    1dd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dda:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_Voidinit+0xdc>
    1de0:	9e a7       	std	Y+46, r25	; 0x2e
    1de2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de6:	98 a9       	ldd	r25, Y+48	; 0x30
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	98 ab       	std	Y+48, r25	; 0x30
    1dec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df0:	98 a9       	ldd	r25, Y+48	; 0x30
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <LCD_Voidinit+0xd0>
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <LCD_Voidinit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfa:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	98 ab       	std	Y+48, r25	; 0x30
    1e0a:	8f a7       	std	Y+47, r24	; 0x2f
    1e0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e10:	9c a7       	std	Y+44, r25	; 0x2c
    1e12:	8b a7       	std	Y+43, r24	; 0x2b
    1e14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_Voidinit+0x118>
    1e1c:	9c a7       	std	Y+44, r25	; 0x2c
    1e1e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	/*Function set command: 2 lines(N = 1), 5*8 Font size (F = 0 )*/
	LCD_VoidSendCommand(FUNCTION_SET);
    1e20:	88 e3       	ldi	r24, 0x38	; 56
    1e22:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LCD_VoidSendCommand>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e8       	ldi	r26, 0x80	; 128
    1e2c:	bf e3       	ldi	r27, 0x3F	; 63
    1e2e:	8f a3       	std	Y+39, r24	; 0x27
    1e30:	98 a7       	std	Y+40, r25	; 0x28
    1e32:	a9 a7       	std	Y+41, r26	; 0x29
    1e34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	6f a1       	ldd	r22, Y+39	; 0x27
    1e38:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a ef       	ldi	r20, 0xFA	; 250
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8b a3       	std	Y+35, r24	; 0x23
    1e50:	9c a3       	std	Y+36, r25	; 0x24
    1e52:	ad a3       	std	Y+37, r26	; 0x25
    1e54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e56:	6b a1       	ldd	r22, Y+35	; 0x23
    1e58:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <LCD_Voidinit+0x178>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9a a3       	std	Y+34, r25	; 0x22
    1e74:	89 a3       	std	Y+33, r24	; 0x21
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <LCD_Voidinit+0x1f6>
	else if (__tmp > 65535)
    1e78:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <LCD_Voidinit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	6f a1       	ldd	r22, Y+39	; 0x27
    1e92:	78 a5       	ldd	r23, Y+40	; 0x28
    1e94:	89 a5       	ldd	r24, Y+41	; 0x29
    1e96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <LCD_Voidinit+0x1d8>
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	98 a3       	std	Y+32, r25	; 0x20
    1ec0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_Voidinit+0x1c6>
    1eca:	98 a3       	std	Y+32, r25	; 0x20
    1ecc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9a a3       	std	Y+34, r25	; 0x22
    1ed6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eda:	9a a1       	ldd	r25, Y+34	; 0x22
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <LCD_Voidinit+0x1ba>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <LCD_Voidinit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9a a3       	std	Y+34, r25	; 0x22
    1ef4:	89 a3       	std	Y+33, r24	; 0x21
    1ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    1efa:	9e 8f       	std	Y+30, r25	; 0x1e
    1efc:	8d 8f       	std	Y+29, r24	; 0x1d
    1efe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_Voidinit+0x202>
    1f06:	9e 8f       	std	Y+30, r25	; 0x1e
    1f08:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display on off control: display enable, disable cursor, no blink cursor*/
	LCD_VoidSendCommand(DISPLAY_SET);
    1f0a:	8c e0       	ldi	r24, 0x0C	; 12
    1f0c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LCD_VoidSendCommand>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e8       	ldi	r26, 0x80	; 128
    1f16:	bf e3       	ldi	r27, 0x3F	; 63
    1f18:	89 8f       	std	Y+25, r24	; 0x19
    1f1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	69 8d       	ldd	r22, Y+25	; 0x19
    1f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a ef       	ldi	r20, 0xFA	; 250
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8d 8b       	std	Y+21, r24	; 0x15
    1f3a:	9e 8b       	std	Y+22, r25	; 0x16
    1f3c:	af 8b       	std	Y+23, r26	; 0x17
    1f3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <LCD_Voidinit+0x262>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c 8b       	std	Y+20, r25	; 0x14
    1f5e:	8b 8b       	std	Y+19, r24	; 0x13
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <LCD_Voidinit+0x2e0>
	else if (__tmp > 65535)
    1f62:	6d 89       	ldd	r22, Y+21	; 0x15
    1f64:	7e 89       	ldd	r23, Y+22	; 0x16
    1f66:	8f 89       	ldd	r24, Y+23	; 0x17
    1f68:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <LCD_Voidinit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <LCD_Voidinit+0x2c2>
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9a 8b       	std	Y+18, r25	; 0x12
    1faa:	89 8b       	std	Y+17, r24	; 0x11
    1fac:	89 89       	ldd	r24, Y+17	; 0x11
    1fae:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_Voidinit+0x2b0>
    1fb4:	9a 8b       	std	Y+18, r25	; 0x12
    1fb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9c 8b       	std	Y+20, r25	; 0x14
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <LCD_Voidinit+0x2a4>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <LCD_Voidinit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fce:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9c 8b       	std	Y+20, r25	; 0x14
    1fde:	8b 8b       	std	Y+19, r24	; 0x13
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	98 8b       	std	Y+16, r25	; 0x10
    1fe6:	8f 87       	std	Y+15, r24	; 0x0f
    1fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fea:	98 89       	ldd	r25, Y+16	; 0x10
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_Voidinit+0x2ec>
    1ff0:	98 8b       	std	Y+16, r25	; 0x10
    1ff2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Clear display*/
	LCD_VoidSendCommand(CLEAR);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LCD_VoidSendCommand>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e8       	ldi	r26, 0x80	; 128
    2000:	bf e3       	ldi	r27, 0x3F	; 63
    2002:	8b 87       	std	Y+11, r24	; 0x0b
    2004:	9c 87       	std	Y+12, r25	; 0x0c
    2006:	ad 87       	std	Y+13, r26	; 0x0d
    2008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200a:	6b 85       	ldd	r22, Y+11	; 0x0b
    200c:	7c 85       	ldd	r23, Y+12	; 0x0c
    200e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2010:	9e 85       	ldd	r25, Y+14	; 0x0e
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	4a ef       	ldi	r20, 0xFA	; 250
    2018:	54 e4       	ldi	r21, 0x44	; 68
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	8f 83       	std	Y+7, r24	; 0x07
    2024:	98 87       	std	Y+8, r25	; 0x08
    2026:	a9 87       	std	Y+9, r26	; 0x09
    2028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202a:	6f 81       	ldd	r22, Y+7	; 0x07
    202c:	78 85       	ldd	r23, Y+8	; 0x08
    202e:	89 85       	ldd	r24, Y+9	; 0x09
    2030:	9a 85       	ldd	r25, Y+10	; 0x0a
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e8       	ldi	r20, 0x80	; 128
    2038:	5f e3       	ldi	r21, 0x3F	; 63
    203a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    203e:	88 23       	and	r24, r24
    2040:	2c f4       	brge	.+10     	; 0x204c <LCD_Voidinit+0x34c>
		__ticks = 1;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	3f c0       	rjmp	.+126    	; 0x20ca <LCD_Voidinit+0x3ca>
	else if (__tmp > 65535)
    204c:	6f 81       	ldd	r22, Y+7	; 0x07
    204e:	78 85       	ldd	r23, Y+8	; 0x08
    2050:	89 85       	ldd	r24, Y+9	; 0x09
    2052:	9a 85       	ldd	r25, Y+10	; 0x0a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	3f ef       	ldi	r19, 0xFF	; 255
    2058:	4f e7       	ldi	r20, 0x7F	; 127
    205a:	57 e4       	ldi	r21, 0x47	; 71
    205c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2060:	18 16       	cp	r1, r24
    2062:	4c f5       	brge	.+82     	; 0x20b6 <LCD_Voidinit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2064:	6b 85       	ldd	r22, Y+11	; 0x0b
    2066:	7c 85       	ldd	r23, Y+12	; 0x0c
    2068:	8d 85       	ldd	r24, Y+13	; 0x0d
    206a:	9e 85       	ldd	r25, Y+14	; 0x0e
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e2       	ldi	r20, 0x20	; 32
    2072:	51 e4       	ldi	r21, 0x41	; 65
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <LCD_Voidinit+0x3ac>
    208e:	88 ec       	ldi	r24, 0xC8	; 200
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_Voidinit+0x39a>
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	69 f7       	brne	.-38     	; 0x208e <LCD_Voidinit+0x38e>
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <LCD_Voidinit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b6:	6f 81       	ldd	r22, Y+7	; 0x07
    20b8:	78 85       	ldd	r23, Y+8	; 0x08
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_Voidinit+0x3d6>
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    20de:	e8 96       	adiw	r28, 0x38	; 56
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <KEYPAD_VoidInit>:
#include "../../MCAL/DIO/DIO.h"
#include "avr/delay.h"


void KEYPAD_VoidInit(void)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
	/*step1 configuring rows direction and pullup ressistor(internal)....	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_INPUT);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_INPUT);
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_INPUT);
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	62 e0       	ldi	r22, 0x02	; 2
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_INPUT);
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	63 e0       	ldi	r22, 0x03	; 3
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_HIGH);
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_HIGH);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	61 e0       	ldi	r22, 0x01	; 1
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_HIGH);
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	62 e0       	ldi	r22, 0x02	; 2
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_HIGH);
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	63 e0       	ldi	r22, 0x03	; 3
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>


	/*STEP2 CONFIGURING COLUMNS DIRECTION AND INITIALING WITH HIGH...	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_OUTPUT);
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	64 e0       	ldi	r22, 0x04	; 4
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_OUTPUT);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	65 e0       	ldi	r22, 0x05	; 5
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_OUTPUT);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	66 e0       	ldi	r22, 0x06	; 6
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_OUTPUT);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	67 e0       	ldi	r22, 0x07	; 7
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_HIGH);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	64 e0       	ldi	r22, 0x04	; 4
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_HIGH);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	65 e0       	ldi	r22, 0x05	; 5
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_HIGH);
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	66 e0       	ldi	r22, 0x06	; 6
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_HIGH);
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	67 e0       	ldi	r22, 0x07	; 7
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>

}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <KEYPAD_U8GetPressedKey>:



u8 KEYPAD_U8GetPressedKey(void)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	e2 97       	sbiw	r28, 0x32	; 50
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61

	u8 U8RowLOCAL=0;
    21b2:	1c 8a       	std	Y+20, r1	; 0x14
	u8 U8ColumnLocal=0;
    21b4:	1b 8a       	std	Y+19, r1	; 0x13

	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    21b6:	1d 8a       	std	Y+21, r1	; 0x15
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	8e 8b       	std	Y+22, r24	; 0x16
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	8f 8b       	std	Y+23, r24	; 0x17
    21c0:	83 e0       	ldi	r24, 0x03	; 3
    21c2:	88 8f       	std	Y+24, r24	; 0x18
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    21c4:	84 e0       	ldi	r24, 0x04	; 4
    21c6:	89 8f       	std	Y+25, r24	; 0x19
    21c8:	85 e0       	ldi	r24, 0x05	; 5
    21ca:	8a 8f       	std	Y+26, r24	; 0x1a
    21cc:	86 e0       	ldi	r24, 0x06	; 6
    21ce:	8b 8f       	std	Y+27, r24	; 0x1b
    21d0:	87 e0       	ldi	r24, 0x07	; 7
    21d2:	8c 8f       	std	Y+28, r24	; 0x1c



     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    21d4:	1b 8a       	std	Y+19, r1	; 0x13
    21d6:	13 c1       	rjmp	.+550    	; 0x23fe <KEYPAD_U8GetPressedKey+0x260>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	ce 01       	movw	r24, r28
    21e0:	49 96       	adiw	r24, 0x19	; 25
    21e2:	fc 01       	movw	r30, r24
    21e4:	e2 0f       	add	r30, r18
    21e6:	f3 1f       	adc	r31, r19
    21e8:	90 81       	ld	r25, Z
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	69 2f       	mov	r22, r25
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    21f4:	1c 8a       	std	Y+20, r1	; 0x14
    21f6:	ee c0       	rjmp	.+476    	; 0x23d4 <KEYPAD_U8GetPressedKey+0x236>
    	 {
    		 u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    21f8:	8c 89       	ldd	r24, Y+20	; 0x14
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	ce 01       	movw	r24, r28
    2200:	45 96       	adiw	r24, 0x15	; 21
    2202:	fc 01       	movw	r30, r24
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	90 81       	ld	r25, Z
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	69 2f       	mov	r22, r25
    220e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <DIO_GetPinValue>
    2212:	8a 8b       	std	Y+18, r24	; 0x12
    		 if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    2214:	8a 89       	ldd	r24, Y+18	; 0x12
    2216:	88 23       	and	r24, r24
    2218:	09 f0       	breq	.+2      	; 0x221c <KEYPAD_U8GetPressedKey+0x7e>
    221a:	d9 c0       	rjmp	.+434    	; 0x23ce <KEYPAD_U8GetPressedKey+0x230>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a8 e4       	ldi	r26, 0x48	; 72
    2222:	b2 e4       	ldi	r27, 0x42	; 66
    2224:	8b 87       	std	Y+11, r24	; 0x0b
    2226:	9c 87       	std	Y+12, r25	; 0x0c
    2228:	ad 87       	std	Y+13, r26	; 0x0d
    222a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a ef       	ldi	r20, 0xFA	; 250
    223a:	54 e4       	ldi	r21, 0x44	; 68
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8f 83       	std	Y+7, r24	; 0x07
    2246:	98 87       	std	Y+8, r25	; 0x08
    2248:	a9 87       	std	Y+9, r26	; 0x09
    224a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <KEYPAD_U8GetPressedKey+0xd0>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <KEYPAD_U8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <KEYPAD_U8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6b 85       	ldd	r22, Y+11	; 0x0b
    2288:	7c 85       	ldd	r23, Y+12	; 0x0c
    228a:	8d 85       	ldd	r24, Y+13	; 0x0d
    228c:	9e 85       	ldd	r25, Y+14	; 0x0e
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <KEYPAD_U8GetPressedKey+0x130>
    22b0:	88 ec       	ldi	r24, 0xC8	; 200
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <KEYPAD_U8GetPressedKey+0x11e>
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <KEYPAD_U8GetPressedKey+0x112>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <KEYPAD_U8GetPressedKey+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <KEYPAD_U8GetPressedKey+0x15a>
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
    		 {
    			 //delay to avoid bouncing
					_delay_ms(50);
					//reread switch pin
					u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    2300:	8c 89       	ldd	r24, Y+20	; 0x14
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	ce 01       	movw	r24, r28
    2308:	45 96       	adiw	r24, 0x15	; 21
    230a:	fc 01       	movw	r30, r24
    230c:	e2 0f       	add	r30, r18
    230e:	f3 1f       	adc	r31, r19
    2310:	90 81       	ld	r25, Z
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	69 2f       	mov	r22, r25
    2316:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <DIO_GetPinValue>
    231a:	89 8b       	std	Y+17, r24	; 0x11
					if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    231c:	89 89       	ldd	r24, Y+17	; 0x11
    231e:	88 23       	and	r24, r24
    2320:	09 f0       	breq	.+2      	; 0x2324 <KEYPAD_U8GetPressedKey+0x186>
    2322:	55 c0       	rjmp	.+170    	; 0x23ce <KEYPAD_U8GetPressedKey+0x230>
					{
						//hold
						u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    2324:	8c 89       	ldd	r24, Y+20	; 0x14
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	ce 01       	movw	r24, r28
    232c:	45 96       	adiw	r24, 0x15	; 21
    232e:	fc 01       	movw	r30, r24
    2330:	e2 0f       	add	r30, r18
    2332:	f3 1f       	adc	r31, r19
    2334:	90 81       	ld	r25, Z
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	69 2f       	mov	r22, r25
    233a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <DIO_GetPinValue>
    233e:	88 8b       	std	Y+16, r24	; 0x10
    2340:	0e c0       	rjmp	.+28     	; 0x235e <KEYPAD_U8GetPressedKey+0x1c0>

						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
							u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    2342:	8c 89       	ldd	r24, Y+20	; 0x14
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	ce 01       	movw	r24, r28
    234a:	45 96       	adiw	r24, 0x15	; 21
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	90 81       	ld	r25, Z
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	69 2f       	mov	r22, r25
    2358:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <DIO_GetPinValue>
    235c:	8f 87       	std	Y+15, r24	; 0x0f
					if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
					{
						//hold
						u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);

						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
    235e:	88 89       	ldd	r24, Y+16	; 0x10
    2360:	88 23       	and	r24, r24
    2362:	79 f3       	breq	.-34     	; 0x2342 <KEYPAD_U8GetPressedKey+0x1a4>
							u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
						}

						u8 KPD_u8Value[ROWS_NUMBER][COLUMN_NUMBER]= KEYPAD_VALUES;
    2364:	ce 01       	movw	r24, r28
    2366:	4d 96       	adiw	r24, 0x1d	; 29
    2368:	9f a7       	std	Y+47, r25	; 0x2f
    236a:	8e a7       	std	Y+46, r24	; 0x2e
    236c:	eb e2       	ldi	r30, 0x2B	; 43
    236e:	f1 e0       	ldi	r31, 0x01	; 1
    2370:	f9 ab       	std	Y+49, r31	; 0x31
    2372:	e8 ab       	std	Y+48, r30	; 0x30
    2374:	f0 e1       	ldi	r31, 0x10	; 16
    2376:	fa ab       	std	Y+50, r31	; 0x32
    2378:	e8 a9       	ldd	r30, Y+48	; 0x30
    237a:	f9 a9       	ldd	r31, Y+49	; 0x31
    237c:	00 80       	ld	r0, Z
    237e:	88 a9       	ldd	r24, Y+48	; 0x30
    2380:	99 a9       	ldd	r25, Y+49	; 0x31
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	99 ab       	std	Y+49, r25	; 0x31
    2386:	88 ab       	std	Y+48, r24	; 0x30
    2388:	ee a5       	ldd	r30, Y+46	; 0x2e
    238a:	ff a5       	ldd	r31, Y+47	; 0x2f
    238c:	00 82       	st	Z, r0
    238e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2390:	9f a5       	ldd	r25, Y+47	; 0x2f
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	9f a7       	std	Y+47, r25	; 0x2f
    2396:	8e a7       	std	Y+46, r24	; 0x2e
    2398:	9a a9       	ldd	r25, Y+50	; 0x32
    239a:	91 50       	subi	r25, 0x01	; 1
    239c:	9a ab       	std	Y+50, r25	; 0x32
    239e:	ea a9       	ldd	r30, Y+50	; 0x32
    23a0:	ee 23       	and	r30, r30
    23a2:	51 f7       	brne	.-44     	; 0x2378 <KEYPAD_U8GetPressedKey+0x1da>
						return KPD_u8Value[U8RowLOCAL][U8ColumnLocal];
    23a4:	8c 89       	ldd	r24, Y+20	; 0x14
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	8b 89       	ldd	r24, Y+19	; 0x13
    23ac:	48 2f       	mov	r20, r24
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	ce 01       	movw	r24, r28
    23ba:	01 96       	adiw	r24, 0x01	; 1
    23bc:	82 0f       	add	r24, r18
    23be:	93 1f       	adc	r25, r19
    23c0:	84 0f       	add	r24, r20
    23c2:	95 1f       	adc	r25, r21
    23c4:	fc 01       	movw	r30, r24
    23c6:	7c 96       	adiw	r30, 0x1c	; 28
    23c8:	80 81       	ld	r24, Z
    23ca:	8d a7       	std	Y+45, r24	; 0x2d
    23cc:	1e c0       	rjmp	.+60     	; 0x240a <KEYPAD_U8GetPressedKey+0x26c>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    23ce:	8c 89       	ldd	r24, Y+20	; 0x14
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	8c 8b       	std	Y+20, r24	; 0x14
    23d4:	8c 89       	ldd	r24, Y+20	; 0x14
    23d6:	84 30       	cpi	r24, 0x04	; 4
    23d8:	08 f4       	brcc	.+2      	; 0x23dc <KEYPAD_U8GetPressedKey+0x23e>
    23da:	0e cf       	rjmp	.-484    	; 0x21f8 <KEYPAD_U8GetPressedKey+0x5a>

    		 }

        }
    	   //deactivate column
    	   DIO_SetPinValue(KEYPAD_PORT,KPD_ColumnPinArr[U8ColumnLocal],DIO_HIGH);
    23dc:	8b 89       	ldd	r24, Y+19	; 0x13
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	ce 01       	movw	r24, r28
    23e4:	49 96       	adiw	r24, 0x19	; 25
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	90 81       	ld	r25, Z
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	69 2f       	mov	r22, r25
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};



     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    23f8:	8b 89       	ldd	r24, Y+19	; 0x13
    23fa:	8f 5f       	subi	r24, 0xFF	; 255
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	84 30       	cpi	r24, 0x04	; 4
    2402:	08 f4       	brcc	.+2      	; 0x2406 <KEYPAD_U8GetPressedKey+0x268>
    2404:	e9 ce       	rjmp	.-558    	; 0x21d8 <KEYPAD_U8GetPressedKey+0x3a>
    	   //deactivate column
    	   DIO_SetPinValue(KEYPAD_PORT,KPD_ColumnPinArr[U8ColumnLocal],DIO_HIGH);

   }

     return KEYPAD_NOT_PRESSED_KEY ;
    2406:	9f ef       	ldi	r25, 0xFF	; 255
    2408:	9d a7       	std	Y+45, r25	; 0x2d
    240a:	8d a5       	ldd	r24, Y+45	; 0x2d
 }
    240c:	e2 96       	adiw	r28, 0x32	; 50
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <MOTOR_Init>:

#include "../../MCAL/DIO/DIO.h"
#include "H_BRIDGE.h"
#include "avr/io.h"

void MOTOR_Init(){
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_ENA,DIO_OUTPUT);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_ENB,DIO_OUTPUT);
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN1,DIO_OUTPUT);
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	62 e0       	ldi	r22, 0x02	; 2
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN2,DIO_OUTPUT);
    2444:	83 e0       	ldi	r24, 0x03	; 3
    2446:	63 e0       	ldi	r22, 0x03	; 3
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN3,DIO_OUTPUT);
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	64 e0       	ldi	r22, 0x04	; 4
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN4,DIO_OUTPUT);
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	65 e0       	ldi	r22, 0x05	; 5
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>


	DIO_SetPinValue(MOTOR_PORT,MOTOR_ENA,DIO_HIGH); //Enable motor A on H-bridge
    2462:	83 e0       	ldi	r24, 0x03	; 3
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	41 e0       	ldi	r20, 0x01	; 1
    2468:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_ENA,DIO_HIGH); //Enable motor B on H-bridge
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);
    2476:	83 e0       	ldi	r24, 0x03	; 3
    2478:	62 e0       	ldi	r22, 0x02	; 2
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW);
    2480:	83 e0       	ldi	r24, 0x03	; 3
    2482:	63 e0       	ldi	r22, 0x03	; 3
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);
    248a:	83 e0       	ldi	r24, 0x03	; 3
    248c:	64 e0       	ldi	r22, 0x04	; 4
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW);
    2494:	83 e0       	ldi	r24, 0x03	; 3
    2496:	65 e0       	ldi	r22, 0x05	; 5
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
}
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <MOTOR_CWDirection>:
void MOTOR_CWDirection(u8 U8MotorId){
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <MOTOR_CWDirection+0x6>
    24aa:	0f 92       	push	r0
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	89 83       	std	Y+1, r24	; 0x01
	switch(U8MotorId)
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	3b 83       	std	Y+3, r19	; 0x03
    24ba:	2a 83       	std	Y+2, r18	; 0x02
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	9b 81       	ldd	r25, Y+3	; 0x03
    24c0:	81 30       	cpi	r24, 0x01	; 1
    24c2:	91 05       	cpc	r25, r1
    24c4:	31 f0       	breq	.+12     	; 0x24d2 <MOTOR_CWDirection+0x2e>
    24c6:	2a 81       	ldd	r18, Y+2	; 0x02
    24c8:	3b 81       	ldd	r19, Y+3	; 0x03
    24ca:	22 30       	cpi	r18, 0x02	; 2
    24cc:	31 05       	cpc	r19, r1
    24ce:	61 f0       	breq	.+24     	; 0x24e8 <MOTOR_CWDirection+0x44>
    24d0:	15 c0       	rjmp	.+42     	; 0x24fc <MOTOR_CWDirection+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW); //Turns off other switched direction
    24d2:	83 e0       	ldi	r24, 0x03	; 3
    24d4:	63 e0       	ldi	r22, 0x03	; 3
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_HIGH);//Turns on other switched direction
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	62 e0       	ldi	r22, 0x02	; 2
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
    24e6:	0a c0       	rjmp	.+20     	; 0x24fc <MOTOR_CWDirection+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW); //Turns off other switched direction
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	65 e0       	ldi	r22, 0x05	; 5
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_HIGH);//Turns on other switched direction
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	64 e0       	ldi	r22, 0x04	; 4
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
				}



	}
}
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <MOTOR_CCWDirection>:
void MOTOR_CCWDirection(u8 U8MotorId){
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	00 d0       	rcall	.+0      	; 0x250e <MOTOR_CCWDirection+0x6>
    250e:	0f 92       	push	r0
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	89 83       	std	Y+1, r24	; 0x01

	switch(U8MotorId)
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	3b 83       	std	Y+3, r19	; 0x03
    251e:	2a 83       	std	Y+2, r18	; 0x02
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	9b 81       	ldd	r25, Y+3	; 0x03
    2524:	81 30       	cpi	r24, 0x01	; 1
    2526:	91 05       	cpc	r25, r1
    2528:	31 f0       	breq	.+12     	; 0x2536 <MOTOR_CCWDirection+0x2e>
    252a:	2a 81       	ldd	r18, Y+2	; 0x02
    252c:	3b 81       	ldd	r19, Y+3	; 0x03
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	61 f0       	breq	.+24     	; 0x254c <MOTOR_CCWDirection+0x44>
    2534:	15 c0       	rjmp	.+42     	; 0x2560 <MOTOR_CCWDirection+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_HIGH); //Turns off other switched direction
    2536:	83 e0       	ldi	r24, 0x03	; 3
    2538:	63 e0       	ldi	r22, 0x03	; 3
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);//Turns on other switched direction
    2540:	83 e0       	ldi	r24, 0x03	; 3
    2542:	62 e0       	ldi	r22, 0x02	; 2
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
    254a:	0a c0       	rjmp	.+20     	; 0x2560 <MOTOR_CCWDirection+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_HIGH); //Turns off other switched direction
    254c:	83 e0       	ldi	r24, 0x03	; 3
    254e:	65 e0       	ldi	r22, 0x05	; 5
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);//Turns on other switched direction
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	64 e0       	ldi	r22, 0x04	; 4
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>



	}

}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <MOTOR_StopMotion>:

void MOTOR_StopMotion(u8 U8MotorId){
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	00 d0       	rcall	.+0      	; 0x2572 <MOTOR_StopMotion+0x6>
    2572:	0f 92       	push	r0
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	89 83       	std	Y+1, r24	; 0x01
	switch(U8MotorId)
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	3b 83       	std	Y+3, r19	; 0x03
    2582:	2a 83       	std	Y+2, r18	; 0x02
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	81 30       	cpi	r24, 0x01	; 1
    258a:	91 05       	cpc	r25, r1
    258c:	31 f0       	breq	.+12     	; 0x259a <MOTOR_StopMotion+0x2e>
    258e:	2a 81       	ldd	r18, Y+2	; 0x02
    2590:	3b 81       	ldd	r19, Y+3	; 0x03
    2592:	22 30       	cpi	r18, 0x02	; 2
    2594:	31 05       	cpc	r19, r1
    2596:	61 f0       	breq	.+24     	; 0x25b0 <MOTOR_StopMotion+0x44>
    2598:	15 c0       	rjmp	.+42     	; 0x25c4 <MOTOR_StopMotion+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW); //Turns off other switched direction
    259a:	83 e0       	ldi	r24, 0x03	; 3
    259c:	63 e0       	ldi	r22, 0x03	; 3
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);//Turns on other switched direction
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
    25ae:	0a c0       	rjmp	.+20     	; 0x25c4 <MOTOR_StopMotion+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW); //Turns off other switched direction
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	65 e0       	ldi	r22, 0x05	; 5
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);//Turns on other switched direction
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	64 e0       	ldi	r22, 0x04	; 4
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_SetPinValue>
				}



	}
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <main>:
#include "util/delay.h"

#define F_CPU 8000000UL

void main (void)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(DIO_PORTB , DIO_PIN4 , DIO_OUTPUT);// SS PIN
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	64 e0       	ldi	r22, 0x04	; 4
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB , DIO_PIN5 , DIO_OUTPUT);// MOSI PIN
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	65 e0       	ldi	r22, 0x05	; 5
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB , DIO_PIN7 , DIO_OUTPUT);// SCK PIN ..
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	67 e0       	ldi	r22, 0x07	; 7
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB , DIO_PIN6 , DIO_OUTPUT);// MISO PIN
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	66 e0       	ldi	r22, 0x06	; 6
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_SetPinDirection>

	SPI_VoidInit();
    2600:	0e 94 a3 07 	call	0xf46	; 0xf46 <SPI_VoidInit>


	SPI_transceive('M');
    2604:	8d e4       	ldi	r24, 0x4D	; 77
    2606:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <SPI_transceive>
    260a:	ff cf       	rjmp	.-2      	; 0x260a <main+0x3a>

0000260c <__prologue_saves__>:
    260c:	2f 92       	push	r2
    260e:	3f 92       	push	r3
    2610:	4f 92       	push	r4
    2612:	5f 92       	push	r5
    2614:	6f 92       	push	r6
    2616:	7f 92       	push	r7
    2618:	8f 92       	push	r8
    261a:	9f 92       	push	r9
    261c:	af 92       	push	r10
    261e:	bf 92       	push	r11
    2620:	cf 92       	push	r12
    2622:	df 92       	push	r13
    2624:	ef 92       	push	r14
    2626:	ff 92       	push	r15
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	ca 1b       	sub	r28, r26
    2636:	db 0b       	sbc	r29, r27
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	09 94       	ijmp

00002644 <__epilogue_restores__>:
    2644:	2a 88       	ldd	r2, Y+18	; 0x12
    2646:	39 88       	ldd	r3, Y+17	; 0x11
    2648:	48 88       	ldd	r4, Y+16	; 0x10
    264a:	5f 84       	ldd	r5, Y+15	; 0x0f
    264c:	6e 84       	ldd	r6, Y+14	; 0x0e
    264e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2650:	8c 84       	ldd	r8, Y+12	; 0x0c
    2652:	9b 84       	ldd	r9, Y+11	; 0x0b
    2654:	aa 84       	ldd	r10, Y+10	; 0x0a
    2656:	b9 84       	ldd	r11, Y+9	; 0x09
    2658:	c8 84       	ldd	r12, Y+8	; 0x08
    265a:	df 80       	ldd	r13, Y+7	; 0x07
    265c:	ee 80       	ldd	r14, Y+6	; 0x06
    265e:	fd 80       	ldd	r15, Y+5	; 0x05
    2660:	0c 81       	ldd	r16, Y+4	; 0x04
    2662:	1b 81       	ldd	r17, Y+3	; 0x03
    2664:	aa 81       	ldd	r26, Y+2	; 0x02
    2666:	b9 81       	ldd	r27, Y+1	; 0x01
    2668:	ce 0f       	add	r28, r30
    266a:	d1 1d       	adc	r29, r1
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	ed 01       	movw	r28, r26
    2678:	08 95       	ret

0000267a <printf>:
    267a:	a0 e0       	ldi	r26, 0x00	; 0
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e3 e4       	ldi	r30, 0x43	; 67
    2680:	f3 e1       	ldi	r31, 0x13	; 19
    2682:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x20>
    2686:	fe 01       	movw	r30, r28
    2688:	35 96       	adiw	r30, 0x05	; 5
    268a:	61 91       	ld	r22, Z+
    268c:	71 91       	ld	r23, Z+
    268e:	80 91 60 01 	lds	r24, 0x0160
    2692:	90 91 61 01 	lds	r25, 0x0161
    2696:	af 01       	movw	r20, r30
    2698:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vfprintf>
    269c:	20 96       	adiw	r28, 0x00	; 0
    269e:	e2 e0       	ldi	r30, 0x02	; 2
    26a0:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x20>

000026a4 <vfprintf>:
    26a4:	ab e0       	ldi	r26, 0x0B	; 11
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e8 e5       	ldi	r30, 0x58	; 88
    26aa:	f3 e1       	ldi	r31, 0x13	; 19
    26ac:	0c 94 06 13 	jmp	0x260c	; 0x260c <__prologue_saves__>
    26b0:	3c 01       	movw	r6, r24
    26b2:	2b 01       	movw	r4, r22
    26b4:	5a 01       	movw	r10, r20
    26b6:	fc 01       	movw	r30, r24
    26b8:	17 82       	std	Z+7, r1	; 0x07
    26ba:	16 82       	std	Z+6, r1	; 0x06
    26bc:	83 81       	ldd	r24, Z+3	; 0x03
    26be:	81 fd       	sbrc	r24, 1
    26c0:	03 c0       	rjmp	.+6      	; 0x26c8 <vfprintf+0x24>
    26c2:	6f ef       	ldi	r22, 0xFF	; 255
    26c4:	7f ef       	ldi	r23, 0xFF	; 255
    26c6:	c6 c1       	rjmp	.+908    	; 0x2a54 <vfprintf+0x3b0>
    26c8:	9a e0       	ldi	r25, 0x0A	; 10
    26ca:	89 2e       	mov	r8, r25
    26cc:	1e 01       	movw	r2, r28
    26ce:	08 94       	sec
    26d0:	21 1c       	adc	r2, r1
    26d2:	31 1c       	adc	r3, r1
    26d4:	f3 01       	movw	r30, r6
    26d6:	23 81       	ldd	r18, Z+3	; 0x03
    26d8:	f2 01       	movw	r30, r4
    26da:	23 fd       	sbrc	r18, 3
    26dc:	85 91       	lpm	r24, Z+
    26de:	23 ff       	sbrs	r18, 3
    26e0:	81 91       	ld	r24, Z+
    26e2:	2f 01       	movw	r4, r30
    26e4:	88 23       	and	r24, r24
    26e6:	09 f4       	brne	.+2      	; 0x26ea <vfprintf+0x46>
    26e8:	b2 c1       	rjmp	.+868    	; 0x2a4e <vfprintf+0x3aa>
    26ea:	85 32       	cpi	r24, 0x25	; 37
    26ec:	39 f4       	brne	.+14     	; 0x26fc <vfprintf+0x58>
    26ee:	23 fd       	sbrc	r18, 3
    26f0:	85 91       	lpm	r24, Z+
    26f2:	23 ff       	sbrs	r18, 3
    26f4:	81 91       	ld	r24, Z+
    26f6:	2f 01       	movw	r4, r30
    26f8:	85 32       	cpi	r24, 0x25	; 37
    26fa:	29 f4       	brne	.+10     	; 0x2706 <vfprintf+0x62>
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	b3 01       	movw	r22, r6
    2700:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    2704:	e7 cf       	rjmp	.-50     	; 0x26d4 <vfprintf+0x30>
    2706:	98 2f       	mov	r25, r24
    2708:	ff 24       	eor	r15, r15
    270a:	ee 24       	eor	r14, r14
    270c:	99 24       	eor	r9, r9
    270e:	ff e1       	ldi	r31, 0x1F	; 31
    2710:	ff 15       	cp	r31, r15
    2712:	d0 f0       	brcs	.+52     	; 0x2748 <vfprintf+0xa4>
    2714:	9b 32       	cpi	r25, 0x2B	; 43
    2716:	69 f0       	breq	.+26     	; 0x2732 <vfprintf+0x8e>
    2718:	9c 32       	cpi	r25, 0x2C	; 44
    271a:	28 f4       	brcc	.+10     	; 0x2726 <vfprintf+0x82>
    271c:	90 32       	cpi	r25, 0x20	; 32
    271e:	59 f0       	breq	.+22     	; 0x2736 <vfprintf+0x92>
    2720:	93 32       	cpi	r25, 0x23	; 35
    2722:	91 f4       	brne	.+36     	; 0x2748 <vfprintf+0xa4>
    2724:	0e c0       	rjmp	.+28     	; 0x2742 <vfprintf+0x9e>
    2726:	9d 32       	cpi	r25, 0x2D	; 45
    2728:	49 f0       	breq	.+18     	; 0x273c <vfprintf+0x98>
    272a:	90 33       	cpi	r25, 0x30	; 48
    272c:	69 f4       	brne	.+26     	; 0x2748 <vfprintf+0xa4>
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	24 c0       	rjmp	.+72     	; 0x277a <vfprintf+0xd6>
    2732:	52 e0       	ldi	r21, 0x02	; 2
    2734:	f5 2a       	or	r15, r21
    2736:	84 e0       	ldi	r24, 0x04	; 4
    2738:	f8 2a       	or	r15, r24
    273a:	28 c0       	rjmp	.+80     	; 0x278c <vfprintf+0xe8>
    273c:	98 e0       	ldi	r25, 0x08	; 8
    273e:	f9 2a       	or	r15, r25
    2740:	25 c0       	rjmp	.+74     	; 0x278c <vfprintf+0xe8>
    2742:	e0 e1       	ldi	r30, 0x10	; 16
    2744:	fe 2a       	or	r15, r30
    2746:	22 c0       	rjmp	.+68     	; 0x278c <vfprintf+0xe8>
    2748:	f7 fc       	sbrc	r15, 7
    274a:	29 c0       	rjmp	.+82     	; 0x279e <vfprintf+0xfa>
    274c:	89 2f       	mov	r24, r25
    274e:	80 53       	subi	r24, 0x30	; 48
    2750:	8a 30       	cpi	r24, 0x0A	; 10
    2752:	70 f4       	brcc	.+28     	; 0x2770 <vfprintf+0xcc>
    2754:	f6 fe       	sbrs	r15, 6
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <vfprintf+0xbe>
    2758:	98 9c       	mul	r9, r8
    275a:	90 2c       	mov	r9, r0
    275c:	11 24       	eor	r1, r1
    275e:	98 0e       	add	r9, r24
    2760:	15 c0       	rjmp	.+42     	; 0x278c <vfprintf+0xe8>
    2762:	e8 9c       	mul	r14, r8
    2764:	e0 2c       	mov	r14, r0
    2766:	11 24       	eor	r1, r1
    2768:	e8 0e       	add	r14, r24
    276a:	f0 e2       	ldi	r31, 0x20	; 32
    276c:	ff 2a       	or	r15, r31
    276e:	0e c0       	rjmp	.+28     	; 0x278c <vfprintf+0xe8>
    2770:	9e 32       	cpi	r25, 0x2E	; 46
    2772:	29 f4       	brne	.+10     	; 0x277e <vfprintf+0xda>
    2774:	f6 fc       	sbrc	r15, 6
    2776:	6b c1       	rjmp	.+726    	; 0x2a4e <vfprintf+0x3aa>
    2778:	40 e4       	ldi	r20, 0x40	; 64
    277a:	f4 2a       	or	r15, r20
    277c:	07 c0       	rjmp	.+14     	; 0x278c <vfprintf+0xe8>
    277e:	9c 36       	cpi	r25, 0x6C	; 108
    2780:	19 f4       	brne	.+6      	; 0x2788 <vfprintf+0xe4>
    2782:	50 e8       	ldi	r21, 0x80	; 128
    2784:	f5 2a       	or	r15, r21
    2786:	02 c0       	rjmp	.+4      	; 0x278c <vfprintf+0xe8>
    2788:	98 36       	cpi	r25, 0x68	; 104
    278a:	49 f4       	brne	.+18     	; 0x279e <vfprintf+0xfa>
    278c:	f2 01       	movw	r30, r4
    278e:	23 fd       	sbrc	r18, 3
    2790:	95 91       	lpm	r25, Z+
    2792:	23 ff       	sbrs	r18, 3
    2794:	91 91       	ld	r25, Z+
    2796:	2f 01       	movw	r4, r30
    2798:	99 23       	and	r25, r25
    279a:	09 f0       	breq	.+2      	; 0x279e <vfprintf+0xfa>
    279c:	b8 cf       	rjmp	.-144    	; 0x270e <vfprintf+0x6a>
    279e:	89 2f       	mov	r24, r25
    27a0:	85 54       	subi	r24, 0x45	; 69
    27a2:	83 30       	cpi	r24, 0x03	; 3
    27a4:	18 f0       	brcs	.+6      	; 0x27ac <vfprintf+0x108>
    27a6:	80 52       	subi	r24, 0x20	; 32
    27a8:	83 30       	cpi	r24, 0x03	; 3
    27aa:	38 f4       	brcc	.+14     	; 0x27ba <vfprintf+0x116>
    27ac:	44 e0       	ldi	r20, 0x04	; 4
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	a4 0e       	add	r10, r20
    27b2:	b5 1e       	adc	r11, r21
    27b4:	5f e3       	ldi	r21, 0x3F	; 63
    27b6:	59 83       	std	Y+1, r21	; 0x01
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <vfprintf+0x134>
    27ba:	93 36       	cpi	r25, 0x63	; 99
    27bc:	31 f0       	breq	.+12     	; 0x27ca <vfprintf+0x126>
    27be:	93 37       	cpi	r25, 0x73	; 115
    27c0:	79 f0       	breq	.+30     	; 0x27e0 <vfprintf+0x13c>
    27c2:	93 35       	cpi	r25, 0x53	; 83
    27c4:	09 f0       	breq	.+2      	; 0x27c8 <vfprintf+0x124>
    27c6:	56 c0       	rjmp	.+172    	; 0x2874 <vfprintf+0x1d0>
    27c8:	20 c0       	rjmp	.+64     	; 0x280a <vfprintf+0x166>
    27ca:	f5 01       	movw	r30, r10
    27cc:	80 81       	ld	r24, Z
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	42 e0       	ldi	r20, 0x02	; 2
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	a4 0e       	add	r10, r20
    27d6:	b5 1e       	adc	r11, r21
    27d8:	61 01       	movw	r12, r2
    27da:	01 e0       	ldi	r16, 0x01	; 1
    27dc:	10 e0       	ldi	r17, 0x00	; 0
    27de:	12 c0       	rjmp	.+36     	; 0x2804 <vfprintf+0x160>
    27e0:	f5 01       	movw	r30, r10
    27e2:	c0 80       	ld	r12, Z
    27e4:	d1 80       	ldd	r13, Z+1	; 0x01
    27e6:	f6 fc       	sbrc	r15, 6
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <vfprintf+0x14c>
    27ea:	6f ef       	ldi	r22, 0xFF	; 255
    27ec:	7f ef       	ldi	r23, 0xFF	; 255
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <vfprintf+0x150>
    27f0:	69 2d       	mov	r22, r9
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	42 e0       	ldi	r20, 0x02	; 2
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	a4 0e       	add	r10, r20
    27fa:	b5 1e       	adc	r11, r21
    27fc:	c6 01       	movw	r24, r12
    27fe:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <strnlen>
    2802:	8c 01       	movw	r16, r24
    2804:	5f e7       	ldi	r21, 0x7F	; 127
    2806:	f5 22       	and	r15, r21
    2808:	14 c0       	rjmp	.+40     	; 0x2832 <vfprintf+0x18e>
    280a:	f5 01       	movw	r30, r10
    280c:	c0 80       	ld	r12, Z
    280e:	d1 80       	ldd	r13, Z+1	; 0x01
    2810:	f6 fc       	sbrc	r15, 6
    2812:	03 c0       	rjmp	.+6      	; 0x281a <vfprintf+0x176>
    2814:	6f ef       	ldi	r22, 0xFF	; 255
    2816:	7f ef       	ldi	r23, 0xFF	; 255
    2818:	02 c0       	rjmp	.+4      	; 0x281e <vfprintf+0x17a>
    281a:	69 2d       	mov	r22, r9
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	42 e0       	ldi	r20, 0x02	; 2
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	a4 0e       	add	r10, r20
    2824:	b5 1e       	adc	r11, r21
    2826:	c6 01       	movw	r24, r12
    2828:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <strnlen_P>
    282c:	8c 01       	movw	r16, r24
    282e:	50 e8       	ldi	r21, 0x80	; 128
    2830:	f5 2a       	or	r15, r21
    2832:	f3 fe       	sbrs	r15, 3
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <vfprintf+0x1a0>
    2836:	1a c0       	rjmp	.+52     	; 0x286c <vfprintf+0x1c8>
    2838:	80 e2       	ldi	r24, 0x20	; 32
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	b3 01       	movw	r22, r6
    283e:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    2842:	ea 94       	dec	r14
    2844:	8e 2d       	mov	r24, r14
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	08 17       	cp	r16, r24
    284a:	19 07       	cpc	r17, r25
    284c:	a8 f3       	brcs	.-22     	; 0x2838 <vfprintf+0x194>
    284e:	0e c0       	rjmp	.+28     	; 0x286c <vfprintf+0x1c8>
    2850:	f6 01       	movw	r30, r12
    2852:	f7 fc       	sbrc	r15, 7
    2854:	85 91       	lpm	r24, Z+
    2856:	f7 fe       	sbrs	r15, 7
    2858:	81 91       	ld	r24, Z+
    285a:	6f 01       	movw	r12, r30
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	b3 01       	movw	r22, r6
    2860:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    2864:	e1 10       	cpse	r14, r1
    2866:	ea 94       	dec	r14
    2868:	01 50       	subi	r16, 0x01	; 1
    286a:	10 40       	sbci	r17, 0x00	; 0
    286c:	01 15       	cp	r16, r1
    286e:	11 05       	cpc	r17, r1
    2870:	79 f7       	brne	.-34     	; 0x2850 <vfprintf+0x1ac>
    2872:	ea c0       	rjmp	.+468    	; 0x2a48 <vfprintf+0x3a4>
    2874:	94 36       	cpi	r25, 0x64	; 100
    2876:	11 f0       	breq	.+4      	; 0x287c <vfprintf+0x1d8>
    2878:	99 36       	cpi	r25, 0x69	; 105
    287a:	69 f5       	brne	.+90     	; 0x28d6 <vfprintf+0x232>
    287c:	f7 fe       	sbrs	r15, 7
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <vfprintf+0x1ec>
    2880:	f5 01       	movw	r30, r10
    2882:	20 81       	ld	r18, Z
    2884:	31 81       	ldd	r19, Z+1	; 0x01
    2886:	42 81       	ldd	r20, Z+2	; 0x02
    2888:	53 81       	ldd	r21, Z+3	; 0x03
    288a:	84 e0       	ldi	r24, 0x04	; 4
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0a c0       	rjmp	.+20     	; 0x28a4 <vfprintf+0x200>
    2890:	f5 01       	movw	r30, r10
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	9c 01       	movw	r18, r24
    2898:	44 27       	eor	r20, r20
    289a:	37 fd       	sbrc	r19, 7
    289c:	40 95       	com	r20
    289e:	54 2f       	mov	r21, r20
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	a8 0e       	add	r10, r24
    28a6:	b9 1e       	adc	r11, r25
    28a8:	9f e6       	ldi	r25, 0x6F	; 111
    28aa:	f9 22       	and	r15, r25
    28ac:	57 ff       	sbrs	r21, 7
    28ae:	09 c0       	rjmp	.+18     	; 0x28c2 <vfprintf+0x21e>
    28b0:	50 95       	com	r21
    28b2:	40 95       	com	r20
    28b4:	30 95       	com	r19
    28b6:	21 95       	neg	r18
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	4f 4f       	sbci	r20, 0xFF	; 255
    28bc:	5f 4f       	sbci	r21, 0xFF	; 255
    28be:	e0 e8       	ldi	r30, 0x80	; 128
    28c0:	fe 2a       	or	r15, r30
    28c2:	ca 01       	movw	r24, r20
    28c4:	b9 01       	movw	r22, r18
    28c6:	a1 01       	movw	r20, r2
    28c8:	2a e0       	ldi	r18, 0x0A	; 10
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__ultoa_invert>
    28d0:	d8 2e       	mov	r13, r24
    28d2:	d2 18       	sub	r13, r2
    28d4:	40 c0       	rjmp	.+128    	; 0x2956 <vfprintf+0x2b2>
    28d6:	95 37       	cpi	r25, 0x75	; 117
    28d8:	29 f4       	brne	.+10     	; 0x28e4 <vfprintf+0x240>
    28da:	1f 2d       	mov	r17, r15
    28dc:	1f 7e       	andi	r17, 0xEF	; 239
    28de:	2a e0       	ldi	r18, 0x0A	; 10
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	1d c0       	rjmp	.+58     	; 0x291e <vfprintf+0x27a>
    28e4:	1f 2d       	mov	r17, r15
    28e6:	19 7f       	andi	r17, 0xF9	; 249
    28e8:	9f 36       	cpi	r25, 0x6F	; 111
    28ea:	61 f0       	breq	.+24     	; 0x2904 <vfprintf+0x260>
    28ec:	90 37       	cpi	r25, 0x70	; 112
    28ee:	20 f4       	brcc	.+8      	; 0x28f8 <vfprintf+0x254>
    28f0:	98 35       	cpi	r25, 0x58	; 88
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <vfprintf+0x252>
    28f4:	ac c0       	rjmp	.+344    	; 0x2a4e <vfprintf+0x3aa>
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <vfprintf+0x272>
    28f8:	90 37       	cpi	r25, 0x70	; 112
    28fa:	39 f0       	breq	.+14     	; 0x290a <vfprintf+0x266>
    28fc:	98 37       	cpi	r25, 0x78	; 120
    28fe:	09 f0       	breq	.+2      	; 0x2902 <vfprintf+0x25e>
    2900:	a6 c0       	rjmp	.+332    	; 0x2a4e <vfprintf+0x3aa>
    2902:	04 c0       	rjmp	.+8      	; 0x290c <vfprintf+0x268>
    2904:	28 e0       	ldi	r18, 0x08	; 8
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	0a c0       	rjmp	.+20     	; 0x291e <vfprintf+0x27a>
    290a:	10 61       	ori	r17, 0x10	; 16
    290c:	14 fd       	sbrc	r17, 4
    290e:	14 60       	ori	r17, 0x04	; 4
    2910:	20 e1       	ldi	r18, 0x10	; 16
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	04 c0       	rjmp	.+8      	; 0x291e <vfprintf+0x27a>
    2916:	14 fd       	sbrc	r17, 4
    2918:	16 60       	ori	r17, 0x06	; 6
    291a:	20 e1       	ldi	r18, 0x10	; 16
    291c:	32 e0       	ldi	r19, 0x02	; 2
    291e:	17 ff       	sbrs	r17, 7
    2920:	08 c0       	rjmp	.+16     	; 0x2932 <vfprintf+0x28e>
    2922:	f5 01       	movw	r30, r10
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	44 e0       	ldi	r20, 0x04	; 4
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	08 c0       	rjmp	.+16     	; 0x2942 <vfprintf+0x29e>
    2932:	f5 01       	movw	r30, r10
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	bc 01       	movw	r22, r24
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	42 e0       	ldi	r20, 0x02	; 2
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	a4 0e       	add	r10, r20
    2944:	b5 1e       	adc	r11, r21
    2946:	a1 01       	movw	r20, r2
    2948:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__ultoa_invert>
    294c:	d8 2e       	mov	r13, r24
    294e:	d2 18       	sub	r13, r2
    2950:	8f e7       	ldi	r24, 0x7F	; 127
    2952:	f8 2e       	mov	r15, r24
    2954:	f1 22       	and	r15, r17
    2956:	f6 fe       	sbrs	r15, 6
    2958:	0b c0       	rjmp	.+22     	; 0x2970 <vfprintf+0x2cc>
    295a:	5e ef       	ldi	r21, 0xFE	; 254
    295c:	f5 22       	and	r15, r21
    295e:	d9 14       	cp	r13, r9
    2960:	38 f4       	brcc	.+14     	; 0x2970 <vfprintf+0x2cc>
    2962:	f4 fe       	sbrs	r15, 4
    2964:	07 c0       	rjmp	.+14     	; 0x2974 <vfprintf+0x2d0>
    2966:	f2 fc       	sbrc	r15, 2
    2968:	05 c0       	rjmp	.+10     	; 0x2974 <vfprintf+0x2d0>
    296a:	8f ee       	ldi	r24, 0xEF	; 239
    296c:	f8 22       	and	r15, r24
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <vfprintf+0x2d0>
    2970:	1d 2d       	mov	r17, r13
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <vfprintf+0x2d2>
    2974:	19 2d       	mov	r17, r9
    2976:	f4 fe       	sbrs	r15, 4
    2978:	0d c0       	rjmp	.+26     	; 0x2994 <vfprintf+0x2f0>
    297a:	fe 01       	movw	r30, r28
    297c:	ed 0d       	add	r30, r13
    297e:	f1 1d       	adc	r31, r1
    2980:	80 81       	ld	r24, Z
    2982:	80 33       	cpi	r24, 0x30	; 48
    2984:	19 f4       	brne	.+6      	; 0x298c <vfprintf+0x2e8>
    2986:	99 ee       	ldi	r25, 0xE9	; 233
    2988:	f9 22       	and	r15, r25
    298a:	08 c0       	rjmp	.+16     	; 0x299c <vfprintf+0x2f8>
    298c:	1f 5f       	subi	r17, 0xFF	; 255
    298e:	f2 fe       	sbrs	r15, 2
    2990:	05 c0       	rjmp	.+10     	; 0x299c <vfprintf+0x2f8>
    2992:	03 c0       	rjmp	.+6      	; 0x299a <vfprintf+0x2f6>
    2994:	8f 2d       	mov	r24, r15
    2996:	86 78       	andi	r24, 0x86	; 134
    2998:	09 f0       	breq	.+2      	; 0x299c <vfprintf+0x2f8>
    299a:	1f 5f       	subi	r17, 0xFF	; 255
    299c:	0f 2d       	mov	r16, r15
    299e:	f3 fc       	sbrc	r15, 3
    29a0:	14 c0       	rjmp	.+40     	; 0x29ca <vfprintf+0x326>
    29a2:	f0 fe       	sbrs	r15, 0
    29a4:	0f c0       	rjmp	.+30     	; 0x29c4 <vfprintf+0x320>
    29a6:	1e 15       	cp	r17, r14
    29a8:	10 f0       	brcs	.+4      	; 0x29ae <vfprintf+0x30a>
    29aa:	9d 2c       	mov	r9, r13
    29ac:	0b c0       	rjmp	.+22     	; 0x29c4 <vfprintf+0x320>
    29ae:	9d 2c       	mov	r9, r13
    29b0:	9e 0c       	add	r9, r14
    29b2:	91 1a       	sub	r9, r17
    29b4:	1e 2d       	mov	r17, r14
    29b6:	06 c0       	rjmp	.+12     	; 0x29c4 <vfprintf+0x320>
    29b8:	80 e2       	ldi	r24, 0x20	; 32
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	b3 01       	movw	r22, r6
    29be:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    29c2:	1f 5f       	subi	r17, 0xFF	; 255
    29c4:	1e 15       	cp	r17, r14
    29c6:	c0 f3       	brcs	.-16     	; 0x29b8 <vfprintf+0x314>
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <vfprintf+0x32e>
    29ca:	1e 15       	cp	r17, r14
    29cc:	10 f4       	brcc	.+4      	; 0x29d2 <vfprintf+0x32e>
    29ce:	e1 1a       	sub	r14, r17
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <vfprintf+0x330>
    29d2:	ee 24       	eor	r14, r14
    29d4:	04 ff       	sbrs	r16, 4
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <vfprintf+0x352>
    29d8:	80 e3       	ldi	r24, 0x30	; 48
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	b3 01       	movw	r22, r6
    29de:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    29e2:	02 ff       	sbrs	r16, 2
    29e4:	1d c0       	rjmp	.+58     	; 0x2a20 <vfprintf+0x37c>
    29e6:	01 fd       	sbrc	r16, 1
    29e8:	03 c0       	rjmp	.+6      	; 0x29f0 <vfprintf+0x34c>
    29ea:	88 e7       	ldi	r24, 0x78	; 120
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e c0       	rjmp	.+28     	; 0x2a0c <vfprintf+0x368>
    29f0:	88 e5       	ldi	r24, 0x58	; 88
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	0b c0       	rjmp	.+22     	; 0x2a0c <vfprintf+0x368>
    29f6:	80 2f       	mov	r24, r16
    29f8:	86 78       	andi	r24, 0x86	; 134
    29fa:	91 f0       	breq	.+36     	; 0x2a20 <vfprintf+0x37c>
    29fc:	01 ff       	sbrs	r16, 1
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <vfprintf+0x360>
    2a00:	8b e2       	ldi	r24, 0x2B	; 43
    2a02:	01 c0       	rjmp	.+2      	; 0x2a06 <vfprintf+0x362>
    2a04:	80 e2       	ldi	r24, 0x20	; 32
    2a06:	f7 fc       	sbrc	r15, 7
    2a08:	8d e2       	ldi	r24, 0x2D	; 45
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	b3 01       	movw	r22, r6
    2a0e:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    2a12:	06 c0       	rjmp	.+12     	; 0x2a20 <vfprintf+0x37c>
    2a14:	80 e3       	ldi	r24, 0x30	; 48
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	b3 01       	movw	r22, r6
    2a1a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    2a1e:	9a 94       	dec	r9
    2a20:	d9 14       	cp	r13, r9
    2a22:	c0 f3       	brcs	.-16     	; 0x2a14 <vfprintf+0x370>
    2a24:	da 94       	dec	r13
    2a26:	f1 01       	movw	r30, r2
    2a28:	ed 0d       	add	r30, r13
    2a2a:	f1 1d       	adc	r31, r1
    2a2c:	80 81       	ld	r24, Z
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	b3 01       	movw	r22, r6
    2a32:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    2a36:	dd 20       	and	r13, r13
    2a38:	a9 f7       	brne	.-22     	; 0x2a24 <vfprintf+0x380>
    2a3a:	06 c0       	rjmp	.+12     	; 0x2a48 <vfprintf+0x3a4>
    2a3c:	80 e2       	ldi	r24, 0x20	; 32
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	b3 01       	movw	r22, r6
    2a42:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <fputc>
    2a46:	ea 94       	dec	r14
    2a48:	ee 20       	and	r14, r14
    2a4a:	c1 f7       	brne	.-16     	; 0x2a3c <vfprintf+0x398>
    2a4c:	43 ce       	rjmp	.-890    	; 0x26d4 <vfprintf+0x30>
    2a4e:	f3 01       	movw	r30, r6
    2a50:	66 81       	ldd	r22, Z+6	; 0x06
    2a52:	77 81       	ldd	r23, Z+7	; 0x07
    2a54:	cb 01       	movw	r24, r22
    2a56:	2b 96       	adiw	r28, 0x0b	; 11
    2a58:	e2 e1       	ldi	r30, 0x12	; 18
    2a5a:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__epilogue_restores__>

00002a5e <strnlen_P>:
    2a5e:	fc 01       	movw	r30, r24
    2a60:	05 90       	lpm	r0, Z+
    2a62:	61 50       	subi	r22, 0x01	; 1
    2a64:	70 40       	sbci	r23, 0x00	; 0
    2a66:	01 10       	cpse	r0, r1
    2a68:	d8 f7       	brcc	.-10     	; 0x2a60 <strnlen_P+0x2>
    2a6a:	80 95       	com	r24
    2a6c:	90 95       	com	r25
    2a6e:	8e 0f       	add	r24, r30
    2a70:	9f 1f       	adc	r25, r31
    2a72:	08 95       	ret

00002a74 <strnlen>:
    2a74:	fc 01       	movw	r30, r24
    2a76:	61 50       	subi	r22, 0x01	; 1
    2a78:	70 40       	sbci	r23, 0x00	; 0
    2a7a:	01 90       	ld	r0, Z+
    2a7c:	01 10       	cpse	r0, r1
    2a7e:	d8 f7       	brcc	.-10     	; 0x2a76 <strnlen+0x2>
    2a80:	80 95       	com	r24
    2a82:	90 95       	com	r25
    2a84:	8e 0f       	add	r24, r30
    2a86:	9f 1f       	adc	r25, r31
    2a88:	08 95       	ret

00002a8a <fputc>:
    2a8a:	0f 93       	push	r16
    2a8c:	1f 93       	push	r17
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	8c 01       	movw	r16, r24
    2a94:	eb 01       	movw	r28, r22
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	81 ff       	sbrs	r24, 1
    2a9a:	1b c0       	rjmp	.+54     	; 0x2ad2 <fputc+0x48>
    2a9c:	82 ff       	sbrs	r24, 2
    2a9e:	0d c0       	rjmp	.+26     	; 0x2aba <fputc+0x30>
    2aa0:	2e 81       	ldd	r18, Y+6	; 0x06
    2aa2:	3f 81       	ldd	r19, Y+7	; 0x07
    2aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa8:	28 17       	cp	r18, r24
    2aaa:	39 07       	cpc	r19, r25
    2aac:	64 f4       	brge	.+24     	; 0x2ac6 <fputc+0x3c>
    2aae:	e8 81       	ld	r30, Y
    2ab0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ab2:	01 93       	st	Z+, r16
    2ab4:	f9 83       	std	Y+1, r31	; 0x01
    2ab6:	e8 83       	st	Y, r30
    2ab8:	06 c0       	rjmp	.+12     	; 0x2ac6 <fputc+0x3c>
    2aba:	e8 85       	ldd	r30, Y+8	; 0x08
    2abc:	f9 85       	ldd	r31, Y+9	; 0x09
    2abe:	80 2f       	mov	r24, r16
    2ac0:	09 95       	icall
    2ac2:	89 2b       	or	r24, r25
    2ac4:	31 f4       	brne	.+12     	; 0x2ad2 <fputc+0x48>
    2ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	9f 83       	std	Y+7, r25	; 0x07
    2ace:	8e 83       	std	Y+6, r24	; 0x06
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <fputc+0x4c>
    2ad2:	0f ef       	ldi	r16, 0xFF	; 255
    2ad4:	1f ef       	ldi	r17, 0xFF	; 255
    2ad6:	c8 01       	movw	r24, r16
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	08 95       	ret

00002ae2 <__ultoa_invert>:
    2ae2:	fa 01       	movw	r30, r20
    2ae4:	aa 27       	eor	r26, r26
    2ae6:	28 30       	cpi	r18, 0x08	; 8
    2ae8:	51 f1       	breq	.+84     	; 0x2b3e <__ultoa_invert+0x5c>
    2aea:	20 31       	cpi	r18, 0x10	; 16
    2aec:	81 f1       	breq	.+96     	; 0x2b4e <__ultoa_invert+0x6c>
    2aee:	e8 94       	clt
    2af0:	6f 93       	push	r22
    2af2:	6e 7f       	andi	r22, 0xFE	; 254
    2af4:	6e 5f       	subi	r22, 0xFE	; 254
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	8f 4f       	sbci	r24, 0xFF	; 255
    2afa:	9f 4f       	sbci	r25, 0xFF	; 255
    2afc:	af 4f       	sbci	r26, 0xFF	; 255
    2afe:	b1 e0       	ldi	r27, 0x01	; 1
    2b00:	3e d0       	rcall	.+124    	; 0x2b7e <__ultoa_invert+0x9c>
    2b02:	b4 e0       	ldi	r27, 0x04	; 4
    2b04:	3c d0       	rcall	.+120    	; 0x2b7e <__ultoa_invert+0x9c>
    2b06:	67 0f       	add	r22, r23
    2b08:	78 1f       	adc	r23, r24
    2b0a:	89 1f       	adc	r24, r25
    2b0c:	9a 1f       	adc	r25, r26
    2b0e:	a1 1d       	adc	r26, r1
    2b10:	68 0f       	add	r22, r24
    2b12:	79 1f       	adc	r23, r25
    2b14:	8a 1f       	adc	r24, r26
    2b16:	91 1d       	adc	r25, r1
    2b18:	a1 1d       	adc	r26, r1
    2b1a:	6a 0f       	add	r22, r26
    2b1c:	71 1d       	adc	r23, r1
    2b1e:	81 1d       	adc	r24, r1
    2b20:	91 1d       	adc	r25, r1
    2b22:	a1 1d       	adc	r26, r1
    2b24:	20 d0       	rcall	.+64     	; 0x2b66 <__ultoa_invert+0x84>
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <__ultoa_invert+0x48>
    2b28:	68 94       	set
    2b2a:	3f 91       	pop	r19
    2b2c:	2a e0       	ldi	r18, 0x0A	; 10
    2b2e:	26 9f       	mul	r18, r22
    2b30:	11 24       	eor	r1, r1
    2b32:	30 19       	sub	r19, r0
    2b34:	30 5d       	subi	r19, 0xD0	; 208
    2b36:	31 93       	st	Z+, r19
    2b38:	de f6       	brtc	.-74     	; 0x2af0 <__ultoa_invert+0xe>
    2b3a:	cf 01       	movw	r24, r30
    2b3c:	08 95       	ret
    2b3e:	46 2f       	mov	r20, r22
    2b40:	47 70       	andi	r20, 0x07	; 7
    2b42:	40 5d       	subi	r20, 0xD0	; 208
    2b44:	41 93       	st	Z+, r20
    2b46:	b3 e0       	ldi	r27, 0x03	; 3
    2b48:	0f d0       	rcall	.+30     	; 0x2b68 <__ultoa_invert+0x86>
    2b4a:	c9 f7       	brne	.-14     	; 0x2b3e <__ultoa_invert+0x5c>
    2b4c:	f6 cf       	rjmp	.-20     	; 0x2b3a <__ultoa_invert+0x58>
    2b4e:	46 2f       	mov	r20, r22
    2b50:	4f 70       	andi	r20, 0x0F	; 15
    2b52:	40 5d       	subi	r20, 0xD0	; 208
    2b54:	4a 33       	cpi	r20, 0x3A	; 58
    2b56:	18 f0       	brcs	.+6      	; 0x2b5e <__ultoa_invert+0x7c>
    2b58:	49 5d       	subi	r20, 0xD9	; 217
    2b5a:	31 fd       	sbrc	r19, 1
    2b5c:	40 52       	subi	r20, 0x20	; 32
    2b5e:	41 93       	st	Z+, r20
    2b60:	02 d0       	rcall	.+4      	; 0x2b66 <__ultoa_invert+0x84>
    2b62:	a9 f7       	brne	.-22     	; 0x2b4e <__ultoa_invert+0x6c>
    2b64:	ea cf       	rjmp	.-44     	; 0x2b3a <__ultoa_invert+0x58>
    2b66:	b4 e0       	ldi	r27, 0x04	; 4
    2b68:	a6 95       	lsr	r26
    2b6a:	97 95       	ror	r25
    2b6c:	87 95       	ror	r24
    2b6e:	77 95       	ror	r23
    2b70:	67 95       	ror	r22
    2b72:	ba 95       	dec	r27
    2b74:	c9 f7       	brne	.-14     	; 0x2b68 <__ultoa_invert+0x86>
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	61 05       	cpc	r22, r1
    2b7a:	71 05       	cpc	r23, r1
    2b7c:	08 95       	ret
    2b7e:	9b 01       	movw	r18, r22
    2b80:	ac 01       	movw	r20, r24
    2b82:	0a 2e       	mov	r0, r26
    2b84:	06 94       	lsr	r0
    2b86:	57 95       	ror	r21
    2b88:	47 95       	ror	r20
    2b8a:	37 95       	ror	r19
    2b8c:	27 95       	ror	r18
    2b8e:	ba 95       	dec	r27
    2b90:	c9 f7       	brne	.-14     	; 0x2b84 <__ultoa_invert+0xa2>
    2b92:	62 0f       	add	r22, r18
    2b94:	73 1f       	adc	r23, r19
    2b96:	84 1f       	adc	r24, r20
    2b98:	95 1f       	adc	r25, r21
    2b9a:	a0 1d       	adc	r26, r0
    2b9c:	08 95       	ret

00002b9e <_exit>:
    2b9e:	f8 94       	cli

00002ba0 <__stop_program>:
    2ba0:	ff cf       	rjmp	.-2      	; 0x2ba0 <__stop_program>
