
LAB12_TWI_DRIVER10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00002f3a  00002fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  0080013c  0080013c  000030aa  2**0
                  ALLOC
  3 .stab         00003690  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000163d  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bcf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c4c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_10>
      2c:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 14 	call	0x299a	; 0x299a <main>
      8a:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidInit>:
#include "USART_config.h"
#include "avr/io.h"


void USART_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <USART_voidInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	/* We will adjust this value according to the configrations then store it in UCSRC in one operation */
	u8 Local_u8UCSRC = 0 ;
     b52:	1b 82       	std	Y+3, r1	; 0x03

	/*Calculate The Baud Rate From The Equation */
	u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1) ;
     b54:	83 e3       	ldi	r24, 0x33	; 51
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9a 83       	std	Y+2, r25	; 0x02
     b5a:	89 83       	std	Y+1, r24	; 0x01

	/*
		$ Set Baud Rate
		Hint : UBRRH then UBRRL to avoid problems
	*/
	UBRRH = (u8)(Local_u16UBRR >> 8) ; /* MSBs at Local_u16UBRR */
     b5c:	e0 e4       	ldi	r30, 0x40	; 64
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	89 2f       	mov	r24, r25
     b66:	99 27       	eor	r25, r25
     b68:	80 83       	st	Z, r24
	UBRRL = (u8)Local_u16UBRR;
     b6a:	e9 e2       	ldi	r30, 0x29	; 41
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	80 83       	st	Z, r24


	/***** Check 3 Modes   *****/
	#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1)

		CLR_BIT(UCSRA , UCSRA_U2X) ;
     b72:	ab e2       	ldi	r26, 0x2B	; 43
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	eb e2       	ldi	r30, 0x2B	; 43
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8d 7f       	andi	r24, 0xFD	; 253
     b7e:	8c 93       	st	X, r24



	/*Multi-Processor Communication mode*/
	#if USART_MPCM == DISABLE
		CLR_BIT(UCSRA , UCSRA_MPCM) ;
     b80:	ab e2       	ldi	r26, 0x2B	; 43
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	eb e2       	ldi	r30, 0x2B	; 43
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	8e 7f       	andi	r24, 0xFE	; 254
     b8c:	8c 93       	st	X, r24

	/*UCSRC Register Config*/

	/*USART Mode*/
	#if USART_MODE == ASYNCHRONOUS
		CLR_BIT(Local_u8UCSRC , UCSRC_UMSEL) ;
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	8f 7b       	andi	r24, 0xBF	; 191
     b92:	8b 83       	std	Y+3, r24	; 0x03
		#error "Wrong USART_MODE config"
	#endif

	/*Parity Mode*/
	#if USART_PARITY_MODE == DISABLE
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM0) ;
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	8f 7e       	andi	r24, 0xEF	; 239
     b98:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM1) ;
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	8f 7d       	andi	r24, 0xDF	; 223
     b9e:	8b 83       	std	Y+3, r24	; 0x03
		#error "Wrong USART_PARITY_MODE config"
	#endif

	/*Stop Bit*/
	#if USART_STOP_BIT == STOP_BIT_1
		CLR_BIT(Local_u8UCSRC , UCSRC_USBS) ;
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	87 7f       	andi	r24, 0xF7	; 247
     ba4:	8b 83       	std	Y+3, r24	; 0x03
	#elif USART_DATA_SIZE == DATA_SIZE_7_BIT
		CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
	#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	82 60       	ori	r24, 0x02	; 2
     baa:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	84 60       	ori	r24, 0x04	; 4
     bb0:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
     bb2:	aa e2       	ldi	r26, 0x2A	; 42
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e2       	ldi	r30, 0x2A	; 42
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8b 7f       	andi	r24, 0xFB	; 251
     bbe:	8c 93       	st	X, r24
			#error "Wrong USART_STOP_BIT config"
		#endif
	#endif

	/*Set UCSRC Mode*/
	SET_BIT(Local_u8UCSRC , UCSRC_URSEL) ;
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	8b 83       	std	Y+3, r24	; 0x03

	/*Store the value in UCSRC Register (one operation) */
	UCSRC = Local_u8UCSRC ;
     bc6:	e0 e4       	ldi	r30, 0x40	; 64
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	80 83       	st	Z, r24

	/* Finally Enable the components */

	/*RX Complete Interrupt Enable*/
	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
     bce:	aa e2       	ldi	r26, 0x2A	; 42
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e2       	ldi	r30, 0x2A	; 42
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8f 77       	andi	r24, 0x7F	; 127
     bda:	8c 93       	st	X, r24
		#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
	#endif

	/*TX Complete Interrupt Enable*/
	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
     bdc:	aa e2       	ldi	r26, 0x2A	; 42
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e2       	ldi	r30, 0x2A	; 42
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7b       	andi	r24, 0xBF	; 191
     be8:	8c 93       	st	X, r24
		#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
	#endif

	/*UDR Empty Interrupt Enable*/
	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_UDRIE) ;
     bea:	aa e2       	ldi	r26, 0x2A	; 42
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ea e2       	ldi	r30, 0x2A	; 42
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 7d       	andi	r24, 0xDF	; 223
     bf6:	8c 93       	st	X, r24

	/*Receive Enable*/
	#if USART_RECEIVER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXEN) ;
	#elif USART_RECEIVER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_RXEN) ;
     bf8:	aa e2       	ldi	r26, 0x2A	; 42
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e2       	ldi	r30, 0x2A	; 42
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 61       	ori	r24, 0x10	; 16
     c04:	8c 93       	st	X, r24

	/*Transmitter Enable*/
	#if USART_TRANSMITTER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXEN) ;
	#elif USART_TRANSMITTER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_TXEN) ;
     c06:	aa e2       	ldi	r26, 0x2A	; 42
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e2       	ldi	r30, 0x2A	; 42
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 60       	ori	r24, 0x08	; 8
     c12:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TRANSMITTER_ENABLE config"
	#endif
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <USART_U8SendData>:

void USART_U8SendData(u8 u8data_Copy)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	0f 92       	push	r0
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : wait flag UDRFE to finish
	// Wait until transmission Register Empty
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
     c2c:	eb e2       	ldi	r30, 0x2B	; 43
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	82 95       	swap	r24
     c34:	86 95       	lsr	r24
     c36:	87 70       	andi	r24, 0x07	; 7
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	a1 f3       	breq	.-24     	; 0xc2c <USART_U8SendData+0xc>

	// step 2 : send Data
	UDR = u8data_Copy; //UDR is buffer register
     c44:	ec e2       	ldi	r30, 0x2C	; 44
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	80 83       	st	Z, r24
}
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <USART_U8ReceiveData>:


u8   USART_U8ReceiveData(void)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
	// step 1 : wait flag RXC to finish
	while(GET_BIT(UCSRA,UCSRA_RXC)==0) ;
     c5c:	eb e2       	ldi	r30, 0x2B	; 43
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 23       	and	r24, r24
     c64:	dc f7       	brge	.-10     	; 0xc5c <USART_U8ReceiveData+0x8>
	// step 2 : Receive Data
	return UDR ;
     c66:	ec e2       	ldi	r30, 0x2C	; 44
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
}
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <USART_voidSendString>:

void USART_voidSendString(u8* Copy_pu8Data)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	00 d0       	rcall	.+0      	; 0xc78 <USART_voidSendString+0x6>
     c78:	0f 92       	push	r0
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	9b 83       	std	Y+3, r25	; 0x03
     c80:	8a 83       	std	Y+2, r24	; 0x02
	 u8 i =0 ;
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	0e c0       	rjmp	.+28     	; 0xca2 <USART_voidSendString+0x30>
	 while(Copy_pu8Data[i]!=0)
	    {USART_U8SendData(Copy_pu8Data[i]) ; i++;}
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	9b 81       	ldd	r25, Y+3	; 0x03
     c90:	fc 01       	movw	r30, r24
     c92:	e2 0f       	add	r30, r18
     c94:	f3 1f       	adc	r31, r19
     c96:	80 81       	ld	r24, Z
     c98:	0e 94 10 06 	call	0xc20	; 0xc20 <USART_U8SendData>
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidSendString(u8* Copy_pu8Data)
{
	 u8 i =0 ;
	 while(Copy_pu8Data[i]!=0)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	fc 01       	movw	r30, r24
     cae:	e2 0f       	add	r30, r18
     cb0:	f3 1f       	adc	r31, r19
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	39 f7       	brne	.-50     	; 0xc86 <USART_voidSendString+0x14>
	    {USART_U8SendData(Copy_pu8Data[i]) ; i++;}
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <USART_voidReceiveString>:

void USART_voidReceiveString(u8* Copy_pu8Data)
{
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <USART_voidReceiveString+0xa>
     cce:	0f 92       	push	r0
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	9b 83       	std	Y+3, r25	; 0x03
     cd6:	8a 83       	std	Y+2, r24	; 0x02
	 u8 i =0 ;
     cd8:	19 82       	std	Y+1, r1	; 0x01
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <USART_voidReceiveString+0x36>
	 while(Copy_pu8Data[i]!=0)
		{Copy_pu8Data[i]= USART_U8ReceiveData() ; i++;}
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	9b 81       	ldd	r25, Y+3	; 0x03
     ce6:	8c 01       	movw	r16, r24
     ce8:	02 0f       	add	r16, r18
     cea:	13 1f       	adc	r17, r19
     cec:	0e 94 2a 06 	call	0xc54	; 0xc54 <USART_U8ReceiveData>
     cf0:	f8 01       	movw	r30, r16
     cf2:	80 83       	st	Z, r24
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveString(u8* Copy_pu8Data)
{
	 u8 i =0 ;
	 while(Copy_pu8Data[i]!=0)
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	fc 01       	movw	r30, r24
     d06:	e2 0f       	add	r30, r18
     d08:	f3 1f       	adc	r31, r19
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	31 f7       	brne	.-52     	; 0xcdc <USART_voidReceiveString+0x18>
		{Copy_pu8Data[i]= USART_U8ReceiveData() ; i++;}

}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <TWI_voidInitMaster>:

//-------------------------------------------------------------------------------------------------------------------------------

/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR= (u8) (((F_CPU/SCL_Clock)-16) / (2*TWI_PRESCALLER));
     d2c:	e0 e2       	ldi	r30, 0x20	; 32
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	80 83       	st	Z, r24

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	if (TWI_PRESCALLER==PRESCALLER_BY_1)
	{
		TWSR=0;
     d34:	e1 e2       	ldi	r30, 0x21	; 33
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	10 82       	st	Z, r1
	{
		TWSR=3;
	}

	/*Check if the master node will be addressed & set the Master Address */
	if(Copy_u8Address != 0)
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 23       	and	r24, r24
     d3e:	29 f0       	breq	.+10     	; 0xd4a <TWI_voidInitMaster+0x2a>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
     d40:	e2 e2       	ldi	r30, 0x22	; 34
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	88 0f       	add	r24, r24
     d48:	80 83       	st	Z, r24
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
     d4a:	a6 e5       	ldi	r26, 0x56	; 86
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e6 e5       	ldi	r30, 0x56	; 86
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 64       	ori	r24, 0x40	; 64
     d56:	8c 93       	st	X, r24

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
     d58:	a6 e5       	ldi	r26, 0x56	; 86
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e6 e5       	ldi	r30, 0x56	; 86
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	84 60       	ori	r24, 0x04	; 4
     d64:	8c 93       	st	X, r24
}
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
     d7a:	e2 e2       	ldi	r30, 0x22	; 34
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 0f       	add	r24, r24
     d82:	80 83       	st	Z, r24

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
     d84:	a6 e5       	ldi	r26, 0x56	; 86
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e6 e5       	ldi	r30, 0x56	; 86
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	80 64       	ori	r24, 0x40	; 64
     d90:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
     d92:	a6 e5       	ldi	r26, 0x56	; 86
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e6 e5       	ldi	r30, 0x56	; 86
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	84 60       	ori	r24, 0x04	; 4
     d9e:	8c 93       	st	X, r24
}
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
     db2:	19 82       	std	Y+1, r1	; 0x01


	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
     db4:	a6 e5       	ldi	r26, 0x56	; 86
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e6 e5       	ldi	r30, 0x56	; 86
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 62       	ori	r24, 0x20	; 32
     dc0:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     dc2:	a6 e5       	ldi	r26, 0x56	; 86
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e6 e5       	ldi	r30, 0x56	; 86
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 68       	ori	r24, 0x80	; 128
     dce:	8c 93       	st	X, r24
	Hint : we could use
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     dd0:	e6 e5       	ldi	r30, 0x56	; 86
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 23       	and	r24, r24
     dd8:	dc f7       	brge	.-10     	; 0xdd0 <TWI_SendStartCondition+0x28>

	/*Check the operation status (Bit Masking) */
	if((TWSR & 0xF8) != START_ACK )
     dda:	e1 e2       	ldi	r30, 0x21	; 33
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	88 7f       	andi	r24, 0xF8	; 248
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	88 30       	cpi	r24, 0x08	; 8
     dea:	91 05       	cpc	r25, r1
     dec:	11 f0       	breq	.+4      	; 0xdf2 <TWI_SendStartCondition+0x4a>
	{
		Local_Error = StartConditionErr;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
}
     df4:	0f 90       	pop	r0
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
     e06:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
     e08:	a6 e5       	ldi	r26, 0x56	; 86
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e6 e5       	ldi	r30, 0x56	; 86
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 62       	ori	r24, 0x20	; 32
     e14:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     e16:	a6 e5       	ldi	r26, 0x56	; 86
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e6 e5       	ldi	r30, 0x56	; 86
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	80 68       	ori	r24, 0x80	; 128
     e22:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */


	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     e24:	e6 e5       	ldi	r30, 0x56	; 86
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	88 23       	and	r24, r24
     e2c:	dc f7       	brge	.-10     	; 0xe24 <TWI_SendRepeatedStart+0x28>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
     e2e:	e1 e2       	ldi	r30, 0x21	; 33
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	88 7f       	andi	r24, 0xF8	; 248
     e3a:	90 70       	andi	r25, 0x00	; 0
     e3c:	80 31       	cpi	r24, 0x10	; 16
     e3e:	91 05       	cpc	r25, r1
     e40:	11 f0       	breq	.+4      	; 0xe46 <TWI_SendRepeatedStart+0x4a>
	{
		Local_Error = RepeatedStartError;
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
}
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <TWI_SendSlaveAddressWithWrite+0x6>
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     e5c:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress<<1) ;
     e5e:	e3 e2       	ldi	r30, 0x23	; 35
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	88 0f       	add	r24, r24
     e66:	80 83       	st	Z, r24
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR,0);
     e68:	a3 e2       	ldi	r26, 0x23	; 35
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e3 e2       	ldi	r30, 0x23	; 35
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8e 7f       	andi	r24, 0xFE	; 254
     e74:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
     e76:	a6 e5       	ldi	r26, 0x56	; 86
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e6 e5       	ldi	r30, 0x56	; 86
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8f 7d       	andi	r24, 0xDF	; 223
     e82:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     e84:	a6 e5       	ldi	r26, 0x56	; 86
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e6 e5       	ldi	r30, 0x56	; 86
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 68       	ori	r24, 0x80	; 128
     e90:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     e92:	e6 e5       	ldi	r30, 0x56	; 86
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	88 23       	and	r24, r24
     e9a:	dc f7       	brge	.-10     	; 0xe92 <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
     e9c:	e1 e2       	ldi	r30, 0x21	; 33
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	88 7f       	andi	r24, 0xF8	; 248
     ea8:	90 70       	andi	r25, 0x00	; 0
     eaa:	88 31       	cpi	r24, 0x18	; 24
     eac:	91 05       	cpc	r25, r1
     eae:	11 f0       	breq	.+4      	; 0xeb4 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_Error = SlaveAddressWithWriteErr;
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <TWI_SendSlaveAddressWithRead+0x6>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     ecc:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress <<1;
     ece:	e3 e2       	ldi	r30, 0x23	; 35
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	88 0f       	add	r24, r24
     ed6:	80 83       	st	Z, r24
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR,0);
     ed8:	a3 e2       	ldi	r26, 0x23	; 35
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e3 e2       	ldi	r30, 0x23	; 35
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	81 60       	ori	r24, 0x01	; 1
     ee4:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
     ee6:	a6 e5       	ldi	r26, 0x56	; 86
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e6 e5       	ldi	r30, 0x56	; 86
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8f 7d       	andi	r24, 0xDF	; 223
     ef2:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     ef4:	a6 e5       	ldi	r26, 0x56	; 86
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e6 e5       	ldi	r30, 0x56	; 86
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 68       	ori	r24, 0x80	; 128
     f00:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     f02:	e6 e5       	ldi	r30, 0x56	; 86
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	88 23       	and	r24, r24
     f0a:	dc f7       	brge	.-10     	; 0xf02 <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
     f0c:	e1 e2       	ldi	r30, 0x21	; 33
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	88 7f       	andi	r24, 0xF8	; 248
     f18:	90 70       	andi	r25, 0x00	; 0
     f1a:	80 34       	cpi	r24, 0x40	; 64
     f1c:	91 05       	cpc	r25, r1
     f1e:	11 f0       	breq	.+4      	; 0xf24 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_Error = SlaveAddressWithReadErr;
     f20:	84 e0       	ldi	r24, 0x04	; 4
     f22:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <TWI_MasterWriteDataByte+0x6>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     f3c:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
     f3e:	e3 e2       	ldi	r30, 0x23	; 35
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     f46:	a6 e5       	ldi	r26, 0x56	; 86
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e6 e5       	ldi	r30, 0x56	; 86
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     f54:	e6 e5       	ldi	r30, 0x56	; 86
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	88 23       	and	r24, r24
     f5c:	dc f7       	brge	.-10     	; 0xf54 <TWI_MasterWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
     f5e:	e1 e2       	ldi	r30, 0x21	; 33
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	88 7f       	andi	r24, 0xF8	; 248
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	88 32       	cpi	r24, 0x28	; 40
     f6e:	91 05       	cpc	r25, r1
     f70:	11 f0       	breq	.+4      	; 0xf76 <TWI_MasterWriteDataByte+0x46>
	{
		Local_Error = MasterWriteByteErr;
     f72:	85 e0       	ldi	r24, 0x05	; 5
     f74:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     f76:	89 81       	ldd	r24, Y+1	; 0x01
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <TWI_MasterReadDataByte+0x6>
     f88:	0f 92       	push	r0
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	9b 83       	std	Y+3, r25	; 0x03
     f90:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     f92:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
     f94:	a6 e5       	ldi	r26, 0x56	; 86
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e6 e5       	ldi	r30, 0x56	; 86
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     fa2:	e6 e5       	ldi	r30, 0x56	; 86
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 23       	and	r24, r24
     faa:	dc f7       	brge	.-10     	; 0xfa2 <TWI_MasterReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
     fac:	e1 e2       	ldi	r30, 0x21	; 33
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	88 7f       	andi	r24, 0xF8	; 248
     fb8:	90 70       	andi	r25, 0x00	; 0
     fba:	80 35       	cpi	r24, 0x50	; 80
     fbc:	91 05       	cpc	r25, r1
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <TWI_MasterReadDataByte+0x44>
	{
		Local_Error = MasterReadByteErr;
     fc0:	86 e0       	ldi	r24, 0x06	; 6
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <TWI_MasterReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
     fc6:	e3 e2       	ldi	r30, 0x23	; 35
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	ea 81       	ldd	r30, Y+2	; 0x02
     fce:	fb 81       	ldd	r31, Y+3	; 0x03
     fd0:	80 83       	st	Z, r24
	}

	return Local_Error;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <TWI_SlaveWriteDataByte>:

TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <TWI_SlaveWriteDataByte+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     fec:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
     fee:	e3 e2       	ldi	r30, 0x23	; 35
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     ff6:	a6 e5       	ldi	r26, 0x56	; 86
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e6 e5       	ldi	r30, 0x56	; 86
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1004:	e6 e5       	ldi	r30, 0x56	; 86
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	88 23       	and	r24, r24
    100c:	dc f7       	brge	.-10     	; 0x1004 <TWI_SlaveWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_BYTE_TRANSMITTED)
    100e:	e1 e2       	ldi	r30, 0x21	; 33
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	88 7f       	andi	r24, 0xF8	; 248
    101a:	90 70       	andi	r25, 0x00	; 0
    101c:	88 3b       	cpi	r24, 0xB8	; 184
    101e:	91 05       	cpc	r25, r1
    1020:	11 f0       	breq	.+4      	; 0x1026 <TWI_SlaveWriteDataByte+0x46>
	{
		Local_Error = SlaveWriteByteErr;
    1022:	87 e0       	ldi	r24, 0x07	; 7
    1024:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <TWI_SlaveReadDataByte>:

TWI_ErrStatus TWI_SlaveReadDataByte(u8* Copy_pu8DataByte)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <TWI_SlaveReadDataByte+0x6>
    1038:	0f 92       	push	r0
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	9b 83       	std	Y+3, r25	; 0x03
    1040:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    1042:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(TWCR,TWCR_TWINT);
    1044:	a6 e5       	ldi	r26, 0x56	; 86
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 68       	ori	r24, 0x80	; 128
    1050:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1052:	e6 e5       	ldi	r30, 0x56	; 86
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 23       	and	r24, r24
    105a:	dc f7       	brge	.-10     	; 0x1052 <TWI_SlaveReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_ADD_RCVD_WR_REQ)
    105c:	e1 e2       	ldi	r30, 0x21	; 33
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	88 7f       	andi	r24, 0xF8	; 248
    1068:	90 70       	andi	r25, 0x00	; 0
    106a:	80 36       	cpi	r24, 0x60	; 96
    106c:	91 05       	cpc	r25, r1
    106e:	11 f0       	breq	.+4      	; 0x1074 <TWI_SlaveReadDataByte+0x42>
	{
		Local_Error = SlaveReadByteErr;
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(TWCR,TWCR_TWINT);
    1074:	a6 e5       	ldi	r26, 0x56	; 86
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e6 e5       	ldi	r30, 0x56	; 86
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 68       	ori	r24, 0x80	; 128
    1080:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1082:	e6 e5       	ldi	r30, 0x56	; 86
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	dc f7       	brge	.-10     	; 0x1082 <TWI_SlaveReadDataByte+0x50>
	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
    108c:	e1 e2       	ldi	r30, 0x21	; 33
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	88 2f       	mov	r24, r24
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	88 7f       	andi	r24, 0xF8	; 248
    1098:	90 70       	andi	r25, 0x00	; 0
    109a:	80 38       	cpi	r24, 0x80	; 128
    109c:	91 05       	cpc	r25, r1
    109e:	19 f0       	breq	.+6      	; 0x10a6 <TWI_SlaveReadDataByte+0x74>
	{
		Local_Error = SlaveReadByteErr;
    10a0:	88 e0       	ldi	r24, 0x08	; 8
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <TWI_SlaveReadDataByte+0x80>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    10a6:	e3 e2       	ldi	r30, 0x23	; 35
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	ea 81       	ldd	r30, Y+2	; 0x02
    10ae:	fb 81       	ldd	r31, Y+3	; 0x03
    10b0:	80 83       	st	Z, r24
	}

	return Local_Error;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    10c8:	a6 e5       	ldi	r26, 0x56	; 86
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e6 e5       	ldi	r30, 0x56	; 86
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 61       	ori	r24, 0x10	; 16
    10d4:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    10d6:	a6 e5       	ldi	r26, 0x56	; 86
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e6 e5       	ldi	r30, 0x56	; 86
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	8c 93       	st	X, r24

}
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <TIMER_voidWDTSleep>:



/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    10f2:	a1 e4       	ldi	r26, 0x41	; 65
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e1 e4       	ldi	r30, 0x41	; 65
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 7f       	andi	r24, 0xF8	; 248
    10fe:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1100:	a1 e4       	ldi	r26, 0x41	; 65
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e1 e4       	ldi	r30, 0x41	; 65
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	86 60       	ori	r24, 0x06	; 6
    110c:	8c 93       	st	X, r24
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    111c:	a1 e4       	ldi	r26, 0x41	; 65
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e1 e4       	ldi	r30, 0x41	; 65
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 60       	ori	r24, 0x08	; 8
    1128:	8c 93       	st	X, r24
}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    1138:	a1 e4       	ldi	r26, 0x41	; 65
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e1 e4       	ldi	r30, 0x41	; 65
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 61       	ori	r24, 0x18	; 24
    1144:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    1146:	e1 e4       	ldi	r30, 0x41	; 65
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	10 82       	st	Z, r1
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    115a:	a3 e5       	ldi	r26, 0x53	; 83
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e3 e5       	ldi	r30, 0x53	; 83
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	8f 7b       	andi	r24, 0xBF	; 191
    1166:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    1168:	a3 e5       	ldi	r26, 0x53	; 83
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e3 e5       	ldi	r30, 0x53	; 83
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	87 7f       	andi	r24, 0xF7	; 247
    1174:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    1176:	e2 e5       	ldi	r30, 0x52	; 82
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 ec       	ldi	r24, 0xC0	; 192
    117c:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    117e:	a9 e5       	ldi	r26, 0x59	; 89
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e9 e5       	ldi	r30, 0x59	; 89
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	81 60       	ori	r24, 0x01	; 1
    118a:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    118c:	a3 e5       	ldi	r26, 0x53	; 83
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e3 e5       	ldi	r30, 0x53	; 83
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	88 7f       	andi	r24, 0xF8	; 248
    1198:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER  ;
    119a:	a3 e5       	ldi	r26, 0x53	; 83
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e3 e5       	ldi	r30, 0x53	; 83
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	82 60       	ori	r24, 0x02	; 2
    11a6:	8c 93       	st	X, r24
}
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <TIMER0_voidSetPreload>:


void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	0f 92       	push	r0
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    11ba:	e2 e5       	ldi	r30, 0x52	; 82
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	80 83       	st	Z, r24
}
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    11d6:	ec e5       	ldi	r30, 0x5C	; 92
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	80 83       	st	Z, r24
}
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    11ee:	e2 e5       	ldi	r30, 0x52	; 82
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <TIMER_u8SetCallBack>:




u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <TIMER_u8SetCallBack+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <TIMER_u8SetCallBack+0x8>
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	9b 83       	std	Y+3, r25	; 0x03
    1208:	8a 83       	std	Y+2, r24	; 0x02
    120a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    120c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	9b 81       	ldd	r25, Y+3	; 0x03
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	69 f0       	breq	.+26     	; 0x1230 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	fc 01       	movw	r30, r24
    1222:	e4 5c       	subi	r30, 0xC4	; 196
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	9b 81       	ldd	r25, Y+3	; 0x03
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <__vector_11>:


/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    126e:	80 91 52 01 	lds	r24, 0x0152
    1272:	90 91 53 01 	lds	r25, 0x0153
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	29 f0       	breq	.+10     	; 0x1284 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    127a:	e0 91 52 01 	lds	r30, 0x0152
    127e:	f0 91 53 01 	lds	r31, 0x0153
    1282:	09 95       	icall
	}
}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <__vector_10>:


/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    12d4:	80 91 50 01 	lds	r24, 0x0150
    12d8:	90 91 51 01 	lds	r25, 0x0151
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	29 f0       	breq	.+10     	; 0x12ea <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    12e0:	e0 91 50 01 	lds	r30, 0x0150
    12e4:	f0 91 51 01 	lds	r31, 0x0151
    12e8:	09 95       	icall
	}
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <SPI_VoidInit>:
#include "avr/io.h"



void SPI_VoidInit(void)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
    1318:	ad e2       	ldi	r26, 0x2D	; 45
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ed e2       	ldi	r30, 0x2D	; 45
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8f 7d       	andi	r24, 0xDF	; 223
    1324:	8c 93       	st	X, r24
		#error "wrong SPI_DATA_ORDER config"
	#endif

	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
    1326:	ad e2       	ldi	r26, 0x2D	; 45
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	ed e2       	ldi	r30, 0x2D	; 45
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 61       	ori	r24, 0x10	; 16
    1332:	8c 93       	st	X, r24
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
    1334:	ad e2       	ldi	r26, 0x2D	; 45
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	ed e2       	ldi	r30, 0x2D	; 45
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	8c 93       	st	X, r24
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
    1342:	ad e2       	ldi	r26, 0x2D	; 45
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	ed e2       	ldi	r30, 0x2D	; 45
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8b 7f       	andi	r24, 0xFB	; 251
    134e:	8c 93       	st	X, r24
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
    1350:	ad e2       	ldi	r26, 0x2D	; 45
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ed e2       	ldi	r30, 0x2D	; 45
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	81 60       	ori	r24, 0x01	; 1
    135c:	8c 93       	st	X, r24
		CLR_BIT(SPCR , SPCR_SPR1) ;
    135e:	ad e2       	ldi	r26, 0x2D	; 45
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ed e2       	ldi	r30, 0x2D	; 45
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8d 7f       	andi	r24, 0xFD	; 253
    136a:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X) ;
    136c:	ae e2       	ldi	r26, 0x2E	; 46
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ee e2       	ldi	r30, 0x2E	; 46
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8e 7f       	andi	r24, 0xFE	; 254
    1378:	8c 93       	st	X, r24
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
    137a:	ad e2       	ldi	r26, 0x2D	; 45
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ed e2       	ldi	r30, 0x2D	; 45
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8f 77       	andi	r24, 0x7F	; 127
    1386:	8c 93       	st	X, r24

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
    1388:	ad e2       	ldi	r26, 0x2D	; 45
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ed e2       	ldi	r30, 0x2D	; 45
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	8c 93       	st	X, r24
	#else
		#error "wrong SPI_ENABLE_MODE config"
	#endif

}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <SPI_transceive>:



u8   SPI_transceive(u8 u8Data_copy){
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01

	/*  send the data  */
	SPDR = u8Data_copy;
    13a8:	ef e2       	ldi	r30, 0x2F	; 47
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	80 83       	st	Z, r24

	/*  Wait (busy wait ) until transfer complete */
	while((GET_BIT(SPSR , SPIF)) == 0 );
    13b0:	ee e2       	ldi	r30, 0x2E	; 46
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 23       	and	r24, r24
    13b8:	dc f7       	brge	.-10     	; 0x13b0 <SPI_transceive+0x14>

	/*  Get  the exchange  data   */
	return SPDR;
    13ba:	ef e2       	ldi	r30, 0x2F	; 47
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z


}
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <GIE_Enable>:
 */
#include "../../LIB/BIT_MATH.h"
#include "avr/io.h"
#include "GIE.h"

void GIE_Enable (void){
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	//SET bit 7 in SREG
	SET_BIT(SREG  ,  SREG_I );
    13d0:	af e5       	ldi	r26, 0x5F	; 95
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ef e5       	ldi	r30, 0x5F	; 95
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	8c 93       	st	X, r24

}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <GIE_Disable>:
void GIE_Disable(void){
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62

	//CLR bit 7 in SREG
	CLR_BIT(SREG  ,  SREG_I );
    13ec:	af e5       	ldi	r26, 0x5F	; 95
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ef e5       	ldi	r30, 0x5F	; 95
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 77       	andi	r24, 0x7F	; 127
    13f8:	8c 93       	st	X, r24

}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <EXTI_void_Int0Init>:


/* Global pointer to function to hold INT0 ISR address */
void (*EXTI_pvInt0func)(void)=NULL;

void    EXTI_void_Int0Init(void){
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62


	//Check Sense control :
#if   EXTI_SENSE_CONTROL == EXTI_LOW_LEVEL
	CLR_BIT(MCUCR , MCUCR_ISC00 );
    1408:	a5 e5       	ldi	r26, 0x55	; 85
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e5       	ldi	r30, 0x55	; 85
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8e 7f       	andi	r24, 0xFE	; 254
    1414:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , MCUCR_ISC01 );
    1416:	a5 e5       	ldi	r26, 0x55	; 85
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e5       	ldi	r30, 0x55	; 85
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8d 7f       	andi	r24, 0xFD	; 253
    1422:	8c 93       	st	X, r24
#error "Warning Sense control configration option"
#endif

	/*Check Peripheral intrrupt enable*/
#if INT0_INITIAL_STATE == EXTI_ENABLED
	SET_BIT(GICR , GICR_INT0 );
    1424:	ab e5       	ldi	r26, 0x5B	; 91
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e5       	ldi	r30, 0x5B	; 91
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	80 64       	ori	r24, 0x40	; 64
    1430:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == EXTI_DISABLED
	CLR_BIT(GICR , GICR_INT0 );
#else
#error "Wrong Int0_INITIAL_STATE Configuration option "
#endif
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <EXTI_void_Int1Init>:


void    EXTI_void_Int1Init(void){
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
	//TODO
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <EXTI_void_Int2Init>:
void    EXTI_void_Int2Init(void){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	//TODO

}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <EXTI_u8Int0SetSenseControl>:


u8 EXTI_u8Int0SetSenseControl(u8 u8SenseCopy ){
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <EXTI_u8Int0SetSenseControl+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <EXTI_u8Int0SetSenseControl+0x8>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8ErrorState_Copy = OK;
    1462:	19 82       	std	Y+1, r1	; 0x01
	switch( u8SenseCopy )
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3c 83       	std	Y+4, r19	; 0x04
    146c:	2b 83       	std	Y+3, r18	; 0x03
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	91 05       	cpc	r25, r1
    1476:	a1 f1       	breq	.+104    	; 0x14e0 <EXTI_u8Int0SetSenseControl+0x8c>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	23 30       	cpi	r18, 0x03	; 3
    147e:	31 05       	cpc	r19, r1
    1480:	34 f4       	brge	.+12     	; 0x148e <EXTI_u8Int0SetSenseControl+0x3a>
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	91 05       	cpc	r25, r1
    148a:	c9 f1       	breq	.+114    	; 0x14fe <EXTI_u8Int0SetSenseControl+0xaa>
    148c:	47 c0       	rjmp	.+142    	; 0x151c <EXTI_u8Int0SetSenseControl+0xc8>
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	23 30       	cpi	r18, 0x03	; 3
    1494:	31 05       	cpc	r19, r1
    1496:	31 f0       	breq	.+12     	; 0x14a4 <EXTI_u8Int0SetSenseControl+0x50>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	91 05       	cpc	r25, r1
    14a0:	81 f0       	breq	.+32     	; 0x14c2 <EXTI_u8Int0SetSenseControl+0x6e>
    14a2:	3c c0       	rjmp	.+120    	; 0x151c <EXTI_u8Int0SetSenseControl+0xc8>
	{
	case EXTI_LOW_LEVEL :
		CLR_BIT(MCUCR , MCUCR_ISC00);
    14a4:	a5 e5       	ldi	r26, 0x55	; 85
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e5 e5       	ldi	r30, 0x55	; 85
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8e 7f       	andi	r24, 0xFE	; 254
    14b0:	8c 93       	st	X, r24
		CLR_BIT(MCUCR , MCUCR_ISC01);
    14b2:	a5 e5       	ldi	r26, 0x55	; 85
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e5 e5       	ldi	r30, 0x55	; 85
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8d 7f       	andi	r24, 0xFD	; 253
    14be:	8c 93       	st	X, r24
    14c0:	2f c0       	rjmp	.+94     	; 0x1520 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_ON_CHANGE :
		SET_BIT(MCUCR , MCUCR_ISC00);
    14c2:	a5 e5       	ldi	r26, 0x55	; 85
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e5       	ldi	r30, 0x55	; 85
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	81 60       	ori	r24, 0x01	; 1
    14ce:	8c 93       	st	X, r24
		CLR_BIT(MCUCR , MCUCR_ISC01);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8d 7f       	andi	r24, 0xFD	; 253
    14dc:	8c 93       	st	X, r24
    14de:	20 c0       	rjmp	.+64     	; 0x1520 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_FALLING_EDGE :
		CLR_BIT(MCUCR , MCUCR_ISC00);
    14e0:	a5 e5       	ldi	r26, 0x55	; 85
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e5       	ldi	r30, 0x55	; 85
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8e 7f       	andi	r24, 0xFE	; 254
    14ec:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
    14ee:	a5 e5       	ldi	r26, 0x55	; 85
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e5 e5       	ldi	r30, 0x55	; 85
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	82 60       	ori	r24, 0x02	; 2
    14fa:	8c 93       	st	X, r24
    14fc:	11 c0       	rjmp	.+34     	; 0x1520 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_RISING_EDGE :
		SET_BIT(MCUCR , MCUCR_ISC00);
    14fe:	a5 e5       	ldi	r26, 0x55	; 85
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e5       	ldi	r30, 0x55	; 85
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	81 60       	ori	r24, 0x01	; 1
    150a:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
    150c:	a5 e5       	ldi	r26, 0x55	; 85
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e5       	ldi	r30, 0x55	; 85
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	82 60       	ori	r24, 0x02	; 2
    1518:	8c 93       	st	X, r24
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	default : u8ErrorState_Copy = NOK ;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01

	}
	return u8ErrorState_Copy ;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <EXTI_u8Int1SetSenseControl>:
u8 EXTI_u8Int1SetSenseControl(u8 u8SenseCopy ){
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <EXTI_u8Int1SetSenseControl+0x6>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
	//TODO

}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <EXTI_u8Int2SetSenseControl>:
u8 EXTI_u8Int2SetSenseControl(u8 u8SenseCopy ){
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <EXTI_u8Int2SetSenseControl+0x6>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
	//TODO

}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack (void (*PvInt0Func_Copy) (void)){
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <EXTI_u8Int0SetCallBack+0x6>
    1562:	0f 92       	push	r0
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	9b 83       	std	Y+3, r25	; 0x03
    156a:	8a 83       	std	Y+2, r24	; 0x02

	u8 u8ErrorStatusLocal = OK;
    156c:	19 82       	std	Y+1, r1	; 0x01
	if( PvInt0Func_Copy != NULL ){
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	9b 81       	ldd	r25, Y+3	; 0x03
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	39 f0       	breq	.+14     	; 0x1584 <EXTI_u8Int0SetCallBack+0x28>
		//global ptr = local variable
		EXTI_pvInt0func = PvInt0Func_Copy;
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	90 93 5d 01 	sts	0x015D, r25
    157e:	80 93 5c 01 	sts	0x015C, r24
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else{
		u8ErrorStatusLocal = NULL_POINTER;
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorStatusLocal ;
    1588:	89 81       	ldd	r24, Y+1	; 0x01
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <__vector_1>:


/* ISR of INT0 */
void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void){
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	11 24       	eor	r1, r1
    15a0:	2f 93       	push	r18
    15a2:	3f 93       	push	r19
    15a4:	4f 93       	push	r20
    15a6:	5f 93       	push	r21
    15a8:	6f 93       	push	r22
    15aa:	7f 93       	push	r23
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    15b0:	af 93       	push	r26
    15b2:	bf 93       	push	r27
    15b4:	ef 93       	push	r30
    15b6:	ff 93       	push	r31
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0func != NULL){
    15c0:	80 91 5c 01 	lds	r24, 0x015C
    15c4:	90 91 5d 01 	lds	r25, 0x015D
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	29 f0       	breq	.+10     	; 0x15d6 <__vector_1+0x40>
		//global ptr
		EXTI_pvInt0func();
    15cc:	e0 91 5c 01 	lds	r30, 0x015C
    15d0:	f0 91 5d 01 	lds	r31, 0x015D
    15d4:	09 95       	icall
	}
	else{
		/* DO NOTHING */
	}

}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <DIO_SetPinValue>:
#include  "util/delay.h"



void  DIO_SetPinValue (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinValueCopy)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	27 97       	sbiw	r28, 0x07	; 7
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	6a 83       	std	Y+2, r22	; 0x02
    1614:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	08 f0       	brcs	.+2      	; 0x161e <DIO_SetPinValue+0x22>
    161c:	fc c0       	rjmp	.+504    	; 0x1816 <DIO_SetPinValue+0x21a>
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	88 30       	cpi	r24, 0x08	; 8
    1622:	08 f0       	brcs	.+2      	; 0x1626 <DIO_SetPinValue+0x2a>
    1624:	f8 c0       	rjmp	.+496    	; 0x1816 <DIO_SetPinValue+0x21a>
	{
		if(U8PinValueCopy == DIO_HIGH)
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	09 f0       	breq	.+2      	; 0x162e <DIO_SetPinValue+0x32>
    162c:	6f c0       	rjmp	.+222    	; 0x170c <DIO_SetPinValue+0x110>
		{
			switch (U8PortIdcopy)
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	3f 83       	std	Y+7, r19	; 0x07
    1636:	2e 83       	std	Y+6, r18	; 0x06
    1638:	8e 81       	ldd	r24, Y+6	; 0x06
    163a:	9f 81       	ldd	r25, Y+7	; 0x07
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	91 05       	cpc	r25, r1
    1640:	49 f1       	breq	.+82     	; 0x1694 <DIO_SetPinValue+0x98>
    1642:	2e 81       	ldd	r18, Y+6	; 0x06
    1644:	3f 81       	ldd	r19, Y+7	; 0x07
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	2c f4       	brge	.+10     	; 0x1656 <DIO_SetPinValue+0x5a>
    164c:	8e 81       	ldd	r24, Y+6	; 0x06
    164e:	9f 81       	ldd	r25, Y+7	; 0x07
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	61 f0       	breq	.+24     	; 0x166c <DIO_SetPinValue+0x70>
    1654:	ec c0       	rjmp	.+472    	; 0x182e <DIO_SetPinValue+0x232>
    1656:	2e 81       	ldd	r18, Y+6	; 0x06
    1658:	3f 81       	ldd	r19, Y+7	; 0x07
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	71 f1       	breq	.+92     	; 0x16bc <DIO_SetPinValue+0xc0>
    1660:	8e 81       	ldd	r24, Y+6	; 0x06
    1662:	9f 81       	ldd	r25, Y+7	; 0x07
    1664:	83 30       	cpi	r24, 0x03	; 3
    1666:	91 05       	cpc	r25, r1
    1668:	e9 f1       	breq	.+122    	; 0x16e4 <DIO_SetPinValue+0xe8>
    166a:	e1 c0       	rjmp	.+450    	; 0x182e <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : SET_BIT(PORTA,U8PinIdCopy); break;
    166c:	ab e3       	ldi	r26, 0x3B	; 59
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	eb e3       	ldi	r30, 0x3B	; 59
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_SetPinValue+0x8e>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_SetPinValue+0x8a>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	cd c0       	rjmp	.+410    	; 0x182e <DIO_SetPinValue+0x232>
				case DIO_PORTB : SET_BIT(PORTB,U8PinIdCopy); break;
    1694:	a8 e3       	ldi	r26, 0x38	; 56
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_SetPinValue+0xb6>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_SetPinValue+0xb2>
    16b6:	84 2b       	or	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	b9 c0       	rjmp	.+370    	; 0x182e <DIO_SetPinValue+0x232>
				case DIO_PORTC : SET_BIT(PORTC,U8PinIdCopy); break;
    16bc:	a5 e3       	ldi	r26, 0x35	; 53
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e3       	ldi	r30, 0x35	; 53
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_SetPinValue+0xde>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_SetPinValue+0xda>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	a5 c0       	rjmp	.+330    	; 0x182e <DIO_SetPinValue+0x232>
				case DIO_PORTD : SET_BIT(PORTD,U8PinIdCopy); break;
    16e4:	a2 e3       	ldi	r26, 0x32	; 50
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e2 e3       	ldi	r30, 0x32	; 50
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_SetPinValue+0x106>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_SetPinValue+0x102>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	91 c0       	rjmp	.+290    	; 0x182e <DIO_SetPinValue+0x232>
			}
		}
		else if (U8PinValueCopy == DIO_LOW)
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	88 23       	and	r24, r24
    1710:	09 f0       	breq	.+2      	; 0x1714 <DIO_SetPinValue+0x118>
    1712:	74 c0       	rjmp	.+232    	; 0x17fc <DIO_SetPinValue+0x200>
		{
			switch (U8PortIdcopy)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3d 83       	std	Y+5, r19	; 0x05
    171c:	2c 83       	std	Y+4, r18	; 0x04
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	91 05       	cpc	r25, r1
    1726:	59 f1       	breq	.+86     	; 0x177e <DIO_SetPinValue+0x182>
    1728:	2c 81       	ldd	r18, Y+4	; 0x04
    172a:	3d 81       	ldd	r19, Y+5	; 0x05
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	2c f4       	brge	.+10     	; 0x173c <DIO_SetPinValue+0x140>
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f0       	breq	.+26     	; 0x1754 <DIO_SetPinValue+0x158>
    173a:	79 c0       	rjmp	.+242    	; 0x182e <DIO_SetPinValue+0x232>
    173c:	2c 81       	ldd	r18, Y+4	; 0x04
    173e:	3d 81       	ldd	r19, Y+5	; 0x05
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	89 f1       	breq	.+98     	; 0x17a8 <DIO_SetPinValue+0x1ac>
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	83 30       	cpi	r24, 0x03	; 3
    174c:	91 05       	cpc	r25, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <DIO_SetPinValue+0x156>
    1750:	40 c0       	rjmp	.+128    	; 0x17d2 <DIO_SetPinValue+0x1d6>
    1752:	6d c0       	rjmp	.+218    	; 0x182e <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : CLR_BIT(PORTA,U8PinIdCopy); break;
    1754:	ab e3       	ldi	r26, 0x3B	; 59
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	eb e3       	ldi	r30, 0x3B	; 59
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_SetPinValue+0x176>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_SetPinValue+0x172>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	58 c0       	rjmp	.+176    	; 0x182e <DIO_SetPinValue+0x232>
				case DIO_PORTB : CLR_BIT(PORTB,U8PinIdCopy); break;
    177e:	a8 e3       	ldi	r26, 0x38	; 56
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e8 e3       	ldi	r30, 0x38	; 56
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_SetPinValue+0x1a0>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_SetPinValue+0x19c>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	43 c0       	rjmp	.+134    	; 0x182e <DIO_SetPinValue+0x232>
				case DIO_PORTC : CLR_BIT(PORTC,U8PinIdCopy); break;
    17a8:	a5 e3       	ldi	r26, 0x35	; 53
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e3       	ldi	r30, 0x35	; 53
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_SetPinValue+0x1ca>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_SetPinValue+0x1c6>
    17ca:	80 95       	com	r24
    17cc:	84 23       	and	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	2e c0       	rjmp	.+92     	; 0x182e <DIO_SetPinValue+0x232>
				case DIO_PORTD : CLR_BIT(PORTD,U8PinIdCopy); break;
    17d2:	a2 e3       	ldi	r26, 0x32	; 50
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e2 e3       	ldi	r30, 0x32	; 50
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_SetPinValue+0x1f4>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_SetPinValue+0x1f0>
    17f4:	80 95       	com	r24
    17f6:	84 23       	and	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	19 c0       	rjmp	.+50     	; 0x182e <DIO_SetPinValue+0x232>
			}
		}
		else
			printf("ERROR SELECT HIGH OR LOW VALUE.. ");
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <DIO_SetPinValue+0x202>
    17fe:	ed b7       	in	r30, 0x3d	; 61
    1800:	fe b7       	in	r31, 0x3e	; 62
    1802:	31 96       	adiw	r30, 0x01	; 1
    1804:	80 e6       	ldi	r24, 0x60	; 96
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	80 83       	st	Z, r24
    180c:	0e 94 09 15 	call	0x2a12	; 0x2a12 <printf>
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0c c0       	rjmp	.+24     	; 0x182e <DIO_SetPinValue+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    1816:	00 d0       	rcall	.+0      	; 0x1818 <DIO_SetPinValue+0x21c>
    1818:	ed b7       	in	r30, 0x3d	; 61
    181a:	fe b7       	in	r31, 0x3e	; 62
    181c:	31 96       	adiw	r30, 0x01	; 1
    181e:	82 e8       	ldi	r24, 0x82	; 130
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    1826:	0e 94 09 15 	call	0x2a12	; 0x2a12 <printf>
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0

}
    182e:	27 96       	adiw	r28, 0x07	; 7
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <DIO_SetPinDirection>:



void  DIO_SetPinDirection (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinDirCopy)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	27 97       	sbiw	r28, 0x07	; 7
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	6a 83       	std	Y+2, r22	; 0x02
    1858:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	08 f0       	brcs	.+2      	; 0x1862 <DIO_SetPinDirection+0x22>
    1860:	fc c0       	rjmp	.+504    	; 0x1a5a <DIO_SetPinDirection+0x21a>
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	08 f0       	brcs	.+2      	; 0x186a <DIO_SetPinDirection+0x2a>
    1868:	f8 c0       	rjmp	.+496    	; 0x1a5a <DIO_SetPinDirection+0x21a>
	{
		if(U8PinDirCopy == DIO_OUTPUT)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	09 f0       	breq	.+2      	; 0x1872 <DIO_SetPinDirection+0x32>
    1870:	6f c0       	rjmp	.+222    	; 0x1950 <DIO_SetPinDirection+0x110>
		{
			switch (U8PortIdcopy)
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3f 83       	std	Y+7, r19	; 0x07
    187a:	2e 83       	std	Y+6, r18	; 0x06
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	9f 81       	ldd	r25, Y+7	; 0x07
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	91 05       	cpc	r25, r1
    1884:	49 f1       	breq	.+82     	; 0x18d8 <DIO_SetPinDirection+0x98>
    1886:	2e 81       	ldd	r18, Y+6	; 0x06
    1888:	3f 81       	ldd	r19, Y+7	; 0x07
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	2c f4       	brge	.+10     	; 0x189a <DIO_SetPinDirection+0x5a>
    1890:	8e 81       	ldd	r24, Y+6	; 0x06
    1892:	9f 81       	ldd	r25, Y+7	; 0x07
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	61 f0       	breq	.+24     	; 0x18b0 <DIO_SetPinDirection+0x70>
    1898:	ec c0       	rjmp	.+472    	; 0x1a72 <DIO_SetPinDirection+0x232>
    189a:	2e 81       	ldd	r18, Y+6	; 0x06
    189c:	3f 81       	ldd	r19, Y+7	; 0x07
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	71 f1       	breq	.+92     	; 0x1900 <DIO_SetPinDirection+0xc0>
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	9f 81       	ldd	r25, Y+7	; 0x07
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	91 05       	cpc	r25, r1
    18ac:	e9 f1       	breq	.+122    	; 0x1928 <DIO_SetPinDirection+0xe8>
    18ae:	e1 c0       	rjmp	.+450    	; 0x1a72 <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : SET_BIT(DDRA,U8PinIdCopy); break;
    18b0:	aa e3       	ldi	r26, 0x3A	; 58
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ea e3       	ldi	r30, 0x3A	; 58
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_SetPinDirection+0x8e>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_SetPinDirection+0x8a>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	cd c0       	rjmp	.+410    	; 0x1a72 <DIO_SetPinDirection+0x232>
			case DIO_PORTB : SET_BIT(DDRB,U8PinIdCopy); break;
    18d8:	a7 e3       	ldi	r26, 0x37	; 55
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e7 e3       	ldi	r30, 0x37	; 55
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_SetPinDirection+0xb6>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_SetPinDirection+0xb2>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	b9 c0       	rjmp	.+370    	; 0x1a72 <DIO_SetPinDirection+0x232>
			case DIO_PORTC : SET_BIT(DDRC,U8PinIdCopy); break;
    1900:	a4 e3       	ldi	r26, 0x34	; 52
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e4 e3       	ldi	r30, 0x34	; 52
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_SetPinDirection+0xde>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_SetPinDirection+0xda>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	a5 c0       	rjmp	.+330    	; 0x1a72 <DIO_SetPinDirection+0x232>
			case DIO_PORTD : SET_BIT(DDRD,U8PinIdCopy); break;
    1928:	a1 e3       	ldi	r26, 0x31	; 49
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e1 e3       	ldi	r30, 0x31	; 49
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_SetPinDirection+0x106>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_SetPinDirection+0x102>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	91 c0       	rjmp	.+290    	; 0x1a72 <DIO_SetPinDirection+0x232>
			}
		}
		else if (U8PinDirCopy == DIO_INPUT)
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 23       	and	r24, r24
    1954:	09 f0       	breq	.+2      	; 0x1958 <DIO_SetPinDirection+0x118>
    1956:	74 c0       	rjmp	.+232    	; 0x1a40 <DIO_SetPinDirection+0x200>
		{
			switch (U8PortIdcopy)
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3d 83       	std	Y+5, r19	; 0x05
    1960:	2c 83       	std	Y+4, r18	; 0x04
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	59 f1       	breq	.+86     	; 0x19c2 <DIO_SetPinDirection+0x182>
    196c:	2c 81       	ldd	r18, Y+4	; 0x04
    196e:	3d 81       	ldd	r19, Y+5	; 0x05
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	2c f4       	brge	.+10     	; 0x1980 <DIO_SetPinDirection+0x140>
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f0       	breq	.+26     	; 0x1998 <DIO_SetPinDirection+0x158>
    197e:	79 c0       	rjmp	.+242    	; 0x1a72 <DIO_SetPinDirection+0x232>
    1980:	2c 81       	ldd	r18, Y+4	; 0x04
    1982:	3d 81       	ldd	r19, Y+5	; 0x05
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	89 f1       	breq	.+98     	; 0x19ec <DIO_SetPinDirection+0x1ac>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <DIO_SetPinDirection+0x156>
    1994:	40 c0       	rjmp	.+128    	; 0x1a16 <DIO_SetPinDirection+0x1d6>
    1996:	6d c0       	rjmp	.+218    	; 0x1a72 <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : CLR_BIT(DDRA,U8PinIdCopy); break;
    1998:	aa e3       	ldi	r26, 0x3A	; 58
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ea e3       	ldi	r30, 0x3A	; 58
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_SetPinDirection+0x176>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_SetPinDirection+0x172>
    19ba:	80 95       	com	r24
    19bc:	84 23       	and	r24, r20
    19be:	8c 93       	st	X, r24
    19c0:	58 c0       	rjmp	.+176    	; 0x1a72 <DIO_SetPinDirection+0x232>
			case DIO_PORTB : CLR_BIT(DDRB,U8PinIdCopy); break;
    19c2:	a7 e3       	ldi	r26, 0x37	; 55
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e7 e3       	ldi	r30, 0x37	; 55
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 2e       	mov	r0, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <DIO_SetPinDirection+0x1a0>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	0a 94       	dec	r0
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <DIO_SetPinDirection+0x19c>
    19e4:	80 95       	com	r24
    19e6:	84 23       	and	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	43 c0       	rjmp	.+134    	; 0x1a72 <DIO_SetPinDirection+0x232>
			case DIO_PORTC : CLR_BIT(DDRC,U8PinIdCopy); break;
    19ec:	a4 e3       	ldi	r26, 0x34	; 52
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e4 e3       	ldi	r30, 0x34	; 52
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <DIO_SetPinDirection+0x1ca>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <DIO_SetPinDirection+0x1c6>
    1a0e:	80 95       	com	r24
    1a10:	84 23       	and	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	2e c0       	rjmp	.+92     	; 0x1a72 <DIO_SetPinDirection+0x232>
			case DIO_PORTD : CLR_BIT(DDRD,U8PinIdCopy); break;
    1a16:	a1 e3       	ldi	r26, 0x31	; 49
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e1 e3       	ldi	r30, 0x31	; 49
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_SetPinDirection+0x1f4>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_SetPinDirection+0x1f0>
    1a38:	80 95       	com	r24
    1a3a:	84 23       	and	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	19 c0       	rjmp	.+50     	; 0x1a72 <DIO_SetPinDirection+0x232>
			}
		}else
			printf("ERROR SELECT OUTPUT OR INPUT VALUE.. ");
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <DIO_SetPinDirection+0x202>
    1a42:	ed b7       	in	r30, 0x3d	; 61
    1a44:	fe b7       	in	r31, 0x3e	; 62
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	86 eb       	ldi	r24, 0xB6	; 182
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
    1a50:	0e 94 09 15 	call	0x2a12	; 0x2a12 <printf>
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0c c0       	rjmp	.+24     	; 0x1a72 <DIO_SetPinDirection+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <DIO_SetPinDirection+0x21c>
    1a5c:	ed b7       	in	r30, 0x3d	; 61
    1a5e:	fe b7       	in	r31, 0x3e	; 62
    1a60:	31 96       	adiw	r30, 0x01	; 1
    1a62:	82 e8       	ldi	r24, 0x82	; 130
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <printf>
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
}
    1a72:	27 96       	adiw	r28, 0x07	; 7
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <DIO_GetPinValue>:


u8    DIO_GetPinValue  (u8 U8PortIdCopy , u8 U8PinIdCopy)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <DIO_GetPinValue+0x6>
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <DIO_GetPinValue+0x8>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <DIO_GetPinValue+0xa>
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	8a 83       	std	Y+2, r24	; 0x02
    1a94:	6b 83       	std	Y+3, r22	; 0x03
	if((U8PortIdCopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <DIO_GetPinValue+0x1a>
    1a9c:	6f c0       	rjmp	.+222    	; 0x1b7c <DIO_GetPinValue+0xf8>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	88 30       	cpi	r24, 0x08	; 8
    1aa2:	08 f0       	brcs	.+2      	; 0x1aa6 <DIO_GetPinValue+0x22>
    1aa4:	6b c0       	rjmp	.+214    	; 0x1b7c <DIO_GetPinValue+0xf8>
	{
		u8 PinValue=0;
    1aa6:	19 82       	std	Y+1, r1	; 0x01

			switch (U8PortIdCopy)
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	3e 83       	std	Y+6, r19	; 0x06
    1ab0:	2d 83       	std	Y+5, r18	; 0x05
    1ab2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ab4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ab6:	41 30       	cpi	r20, 0x01	; 1
    1ab8:	51 05       	cpc	r21, r1
    1aba:	41 f1       	breq	.+80     	; 0x1b0c <DIO_GetPinValue+0x88>
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	82 30       	cpi	r24, 0x02	; 2
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	34 f4       	brge	.+12     	; 0x1ad2 <DIO_GetPinValue+0x4e>
    1ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aca:	21 15       	cp	r18, r1
    1acc:	31 05       	cpc	r19, r1
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <DIO_GetPinValue+0x64>
    1ad0:	52 c0       	rjmp	.+164    	; 0x1b76 <DIO_GetPinValue+0xf2>
    1ad2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ad4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ad6:	42 30       	cpi	r20, 0x02	; 2
    1ad8:	51 05       	cpc	r21, r1
    1ada:	51 f1       	breq	.+84     	; 0x1b30 <DIO_GetPinValue+0xac>
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	b9 f1       	breq	.+110    	; 0x1b54 <DIO_GetPinValue+0xd0>
    1ae6:	47 c0       	rjmp	.+142    	; 0x1b76 <DIO_GetPinValue+0xf2>
			{
				case DIO_PORTA : PinValue= GET_BIT(PINA,U8PinIdCopy); break;
    1ae8:	e9 e3       	ldi	r30, 0x39	; 57
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a9 01       	movw	r20, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <DIO_GetPinValue+0x7c>
    1afc:	55 95       	asr	r21
    1afe:	47 95       	ror	r20
    1b00:	8a 95       	dec	r24
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <DIO_GetPinValue+0x78>
    1b04:	ca 01       	movw	r24, r20
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	35 c0       	rjmp	.+106    	; 0x1b76 <DIO_GetPinValue+0xf2>
				case DIO_PORTB : PinValue= GET_BIT(PINB,U8PinIdCopy); break;
    1b0c:	e6 e3       	ldi	r30, 0x36	; 54
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a9 01       	movw	r20, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_GetPinValue+0xa0>
    1b20:	55 95       	asr	r21
    1b22:	47 95       	ror	r20
    1b24:	8a 95       	dec	r24
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_GetPinValue+0x9c>
    1b28:	ca 01       	movw	r24, r20
    1b2a:	81 70       	andi	r24, 0x01	; 1
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	23 c0       	rjmp	.+70     	; 0x1b76 <DIO_GetPinValue+0xf2>
				case DIO_PORTC : PinValue= GET_BIT(PINC,U8PinIdCopy); break;
    1b30:	e3 e3       	ldi	r30, 0x33	; 51
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	88 2f       	mov	r24, r24
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a9 01       	movw	r20, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_GetPinValue+0xc4>
    1b44:	55 95       	asr	r21
    1b46:	47 95       	ror	r20
    1b48:	8a 95       	dec	r24
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_GetPinValue+0xc0>
    1b4c:	ca 01       	movw	r24, r20
    1b4e:	81 70       	andi	r24, 0x01	; 1
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	11 c0       	rjmp	.+34     	; 0x1b76 <DIO_GetPinValue+0xf2>
				case DIO_PORTD : PinValue= GET_BIT(PIND,U8PinIdCopy); break;
    1b54:	e0 e3       	ldi	r30, 0x30	; 48
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a9 01       	movw	r20, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_GetPinValue+0xe8>
    1b68:	55 95       	asr	r21
    1b6a:	47 95       	ror	r20
    1b6c:	8a 95       	dec	r24
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_GetPinValue+0xe4>
    1b70:	ca 01       	movw	r24, r20
    1b72:	81 70       	andi	r24, 0x01	; 1
    1b74:	89 83       	std	Y+1, r24	; 0x01
			}
		return PinValue;
    1b76:	59 81       	ldd	r21, Y+1	; 0x01
    1b78:	5c 83       	std	Y+4, r21	; 0x04
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <DIO_GetPinValue+0xfa>

	}else
	{
	}
	return 0;
    1b7c:	1c 82       	std	Y+4, r1	; 0x04
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b80:	26 96       	adiw	r28, 0x06	; 6
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <DIO_SetPortValue>:


void  DIO_SetPortValue (u8 U8PortIdcopy ,u8 U8PinValueCopy)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <DIO_SetPortValue+0x6>
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <DIO_SetPortValue+0x8>
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	84 30       	cpi	r24, 0x04	; 4
    1ba6:	98 f5       	brcc	.+102    	; 0x1c0e <DIO_SetPortValue+0x7c>
	{

			switch (U8PortIdcopy)
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3c 83       	std	Y+4, r19	; 0x04
    1bb0:	2b 83       	std	Y+3, r18	; 0x03
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	d1 f0       	breq	.+52     	; 0x1bf0 <DIO_SetPortValue+0x5e>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <DIO_SetPortValue+0x3e>
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	61 f0       	breq	.+24     	; 0x1be6 <DIO_SetPortValue+0x54>
    1bce:	2b c0       	rjmp	.+86     	; 0x1c26 <DIO_SetPortValue+0x94>
    1bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	81 f0       	breq	.+32     	; 0x1bfa <DIO_SetPortValue+0x68>
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	81 f0       	breq	.+32     	; 0x1c04 <DIO_SetPortValue+0x72>
    1be4:	20 c0       	rjmp	.+64     	; 0x1c26 <DIO_SetPortValue+0x94>
			{
				case DIO_PORTA : SET_PORT(PORTA,U8PinValueCopy); break;
    1be6:	eb e3       	ldi	r30, 0x3B	; 59
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	80 83       	st	Z, r24
    1bee:	1b c0       	rjmp	.+54     	; 0x1c26 <DIO_SetPortValue+0x94>
				case DIO_PORTB : SET_PORT(PORTB,U8PinValueCopy); break;
    1bf0:	e8 e3       	ldi	r30, 0x38	; 56
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	80 83       	st	Z, r24
    1bf8:	16 c0       	rjmp	.+44     	; 0x1c26 <DIO_SetPortValue+0x94>
				case DIO_PORTC : SET_PORT(PORTC,U8PinValueCopy); break;
    1bfa:	e5 e3       	ldi	r30, 0x35	; 53
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	80 83       	st	Z, r24
    1c02:	11 c0       	rjmp	.+34     	; 0x1c26 <DIO_SetPortValue+0x94>
				case DIO_PORTD : SET_PORT(PORTD,U8PinValueCopy); break;
    1c04:	e2 e3       	ldi	r30, 0x32	; 50
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	80 83       	st	Z, r24
    1c0c:	0c c0       	rjmp	.+24     	; 0x1c26 <DIO_SetPortValue+0x94>
			}



	}else
		printf("ERROR SELECTION PORTS FROM 0--3...");
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <DIO_SetPortValue+0x7e>
    1c10:	ed b7       	in	r30, 0x3d	; 61
    1c12:	fe b7       	in	r31, 0x3e	; 62
    1c14:	31 96       	adiw	r30, 0x01	; 1
    1c16:	8c ed       	ldi	r24, 0xDC	; 220
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
    1c1e:	0e 94 09 15 	call	0x2a12	; 0x2a12 <printf>
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0


}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <DIO_SetPortDirection>:
void  DIO_SetPortDirection (u8 U8PortIdcopy ,u8 U8PinDirCopy)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <DIO_SetPortDirection+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <DIO_SetPortDirection+0x8>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	98 f5       	brcc	.+102    	; 0x1cb0 <DIO_SetPortDirection+0x7c>
	{

			switch (U8PortIdcopy)
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	3c 83       	std	Y+4, r19	; 0x04
    1c52:	2b 83       	std	Y+3, r18	; 0x03
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	d1 f0       	breq	.+52     	; 0x1c92 <DIO_SetPortDirection+0x5e>
    1c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c60:	3c 81       	ldd	r19, Y+4	; 0x04
    1c62:	22 30       	cpi	r18, 0x02	; 2
    1c64:	31 05       	cpc	r19, r1
    1c66:	2c f4       	brge	.+10     	; 0x1c72 <DIO_SetPortDirection+0x3e>
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	61 f0       	breq	.+24     	; 0x1c88 <DIO_SetPortDirection+0x54>
    1c70:	2b c0       	rjmp	.+86     	; 0x1cc8 <DIO_SetPortDirection+0x94>
    1c72:	2b 81       	ldd	r18, Y+3	; 0x03
    1c74:	3c 81       	ldd	r19, Y+4	; 0x04
    1c76:	22 30       	cpi	r18, 0x02	; 2
    1c78:	31 05       	cpc	r19, r1
    1c7a:	81 f0       	breq	.+32     	; 0x1c9c <DIO_SetPortDirection+0x68>
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	83 30       	cpi	r24, 0x03	; 3
    1c82:	91 05       	cpc	r25, r1
    1c84:	81 f0       	breq	.+32     	; 0x1ca6 <DIO_SetPortDirection+0x72>
    1c86:	20 c0       	rjmp	.+64     	; 0x1cc8 <DIO_SetPortDirection+0x94>
			{
			case DIO_PORTA : SET_PORT(DDRA,0XFF); break;
    1c88:	ea e3       	ldi	r30, 0x3A	; 58
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	80 83       	st	Z, r24
    1c90:	1b c0       	rjmp	.+54     	; 0x1cc8 <DIO_SetPortDirection+0x94>
			case DIO_PORTB : SET_PORT(DDRB,0XFF); break;
    1c92:	e7 e3       	ldi	r30, 0x37	; 55
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	80 83       	st	Z, r24
    1c9a:	16 c0       	rjmp	.+44     	; 0x1cc8 <DIO_SetPortDirection+0x94>
			case DIO_PORTC : SET_PORT(DDRC,0XFF); break;
    1c9c:	e4 e3       	ldi	r30, 0x34	; 52
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	80 83       	st	Z, r24
    1ca4:	11 c0       	rjmp	.+34     	; 0x1cc8 <DIO_SetPortDirection+0x94>
			case DIO_PORTD : SET_PORT(DDRD,0XFF); break;
    1ca6:	e1 e3       	ldi	r30, 0x31	; 49
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	80 83       	st	Z, r24
    1cae:	0c c0       	rjmp	.+24     	; 0x1cc8 <DIO_SetPortDirection+0x94>
			}


	}else
		printf("ERROR SELECTION PORTS FROM 0--3....");
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DIO_SetPortDirection+0x7e>
    1cb2:	ed b7       	in	r30, 0x3d	; 61
    1cb4:	fe b7       	in	r31, 0x3e	; 62
    1cb6:	31 96       	adiw	r30, 0x01	; 1
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	80 83       	st	Z, r24
    1cc0:	0e 94 09 15 	call	0x2a12	; 0x2a12 <printf>
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0

}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <ADC_Init>:
#include "avr/io.h"
#include "ADC.h"


void ADC_Init (void)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
	// ADC Enable
	SET_BIT(ADCSRA , ADCSRA_ADEN);
    1cde:	a6 e2       	ldi	r26, 0x26	; 38
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e6 e2       	ldi	r30, 0x26	; 38
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 68       	ori	r24, 0x80	; 128
    1cea:	8c 93       	st	X, r24

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA , ADCSRA_ADPS2);
    1cec:	a6 e2       	ldi	r26, 0x26	; 38
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e6 e2       	ldi	r30, 0x26	; 38
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	84 60       	ori	r24, 0x04	; 4
    1cf8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1);
    1cfa:	a6 e2       	ldi	r26, 0x26	; 38
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e6 e2       	ldi	r30, 0x26	; 38
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	82 60       	ori	r24, 0x02	; 2
    1d06:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS0);
    1d08:	a6 e2       	ldi	r26, 0x26	; 38
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e6 e2       	ldi	r30, 0x26	; 38
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	81 60       	ori	r24, 0x01	; 1
    1d14:	8c 93       	st	X, r24


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT (ADMUX  , ADMUX_REFS1);
    1d16:	a7 e2       	ldi	r26, 0x27	; 39
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e7 e2       	ldi	r30, 0x27	; 39
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8f 77       	andi	r24, 0x7F	; 127
    1d22:	8c 93       	st	X, r24
	SET_BIT (ADMUX  , ADMUX_REFS0);
    1d24:	a7 e2       	ldi	r26, 0x27	; 39
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e7 e2       	ldi	r30, 0x27	; 39
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	80 64       	ori	r24, 0x40	; 64
    1d30:	8c 93       	st	X, r24

	/*ADC Data Rgith Adjustment 10 bits
	CLR_BIT(ADMUX , ADMUX_ADLAR);*/

	/*Activate Left adjustment result 8 bits */
	SET_BIT(ADMUX , ADMUX_ADLAR);
    1d32:	a7 e2       	ldi	r26, 0x27	; 39
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e7 e2       	ldi	r30, 0x27	; 39
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 62       	ori	r24, 0x20	; 32
    1d3e:	8c 93       	st	X, r24

}
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <ADC_Read>:

u16 ADC_Read (u8 channel)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	0f 92       	push	r0
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	89 83       	std	Y+1, r24	; 0x01
	//step 1 : Clear MUX bits in ADMUX
	ADMUX   &= 0b11100000;
    1d52:	a7 e2       	ldi	r26, 0x27	; 39
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e7 e2       	ldi	r30, 0x27	; 39
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 7e       	andi	r24, 0xE0	; 224
    1d5e:	8c 93       	st	X, r24


	//Step 2 : Set the required  ADC Channel Selection into the MUX bits
	ADMUX   |=channel;
    1d60:	a7 e2       	ldi	r26, 0x27	; 39
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e7 e2       	ldi	r30, 0x27	; 39
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	90 81       	ld	r25, Z
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	89 2b       	or	r24, r25
    1d6e:	8c 93       	st	X, r24


	// Step 3 : Start Single Converstion
	SET_BIT(ADCSRA , ADCSRA_ADSC );
    1d70:	a6 e2       	ldi	r26, 0x26	; 38
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e6 e2       	ldi	r30, 0x26	; 38
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 64       	ori	r24, 0x40	; 64
    1d7c:	8c 93       	st	X, r24


	// Step 4 :  Polling (busy wait ) until the conversion complete flag is set
	while((GET_BIT(ADCSRA , ADCSRA_ADIF)) == 0);
    1d7e:	e6 e2       	ldi	r30, 0x26	; 38
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	82 95       	swap	r24
    1d86:	8f 70       	andi	r24, 0x0F	; 15
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	81 70       	andi	r24, 0x01	; 1
    1d8e:	90 70       	andi	r25, 0x00	; 0
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	a9 f3       	breq	.-22     	; 0x1d7e <ADC_Read+0x38>


	// Step 5 :  Clear Conversion Complete Flag
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1d94:	a6 e2       	ldi	r26, 0x26	; 38
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e6 e2       	ldi	r30, 0x26	; 38
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	80 61       	ori	r24, 0x10	; 16
    1da0:	8c 93       	st	X, r24

	// Step 7 :   return value in ADCH (Left adjustment result 8 bits)

	return ADCH;
    1da2:	e5 e2       	ldi	r30, 0x25	; 37
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
}
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <LCD_VoidSendChar>:




void LCD_VoidSendChar(u8 U8DataCopy)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	2f 97       	sbiw	r28, 0x0f	; 15
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	6f ef       	ldi	r22, 0xFF	; 255
    1dce:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	41 e0       	ldi	r20, 0x01	; 1
    1dd8:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	61 e0       	ldi	r22, 0x01	; 1
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	62 e0       	ldi	r22, 0x02	; 2
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_HIGH);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8DataCopy);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e08:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    1e0c:	82 e0       	ldi	r24, 0x02	; 2
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 ea       	ldi	r26, 0xA0	; 160
    1e1c:	b1 e4       	ldi	r27, 0x41	; 65
    1e1e:	8b 87       	std	Y+11, r24	; 0x0b
    1e20:	9c 87       	std	Y+12, r25	; 0x0c
    1e22:	ad 87       	std	Y+13, r26	; 0x0d
    1e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a ef       	ldi	r20, 0xFA	; 250
    1e34:	54 e4       	ldi	r21, 0x44	; 68
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <LCD_VoidSendChar+0x114>
    1eaa:	88 ec       	ldi	r24, 0xC8	; 200
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_VoidSendChar+0x102>
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <LCD_VoidSendChar+0xf6>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_VoidSendChar+0x13e>
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>


}
    1f04:	2f 96       	adiw	r28, 0x0f	; 15
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 U8CommandCopy)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	2f 97       	sbiw	r28, 0x0f	; 15
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	6f ef       	ldi	r22, 0xFF	; 255
    1f30:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	62 e0       	ldi	r22, 0x02	; 2
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	61 e0       	ldi	r22, 0x01	; 1
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8CommandCopy);
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f6a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	62 e0       	ldi	r22, 0x02	; 2
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f7e:	b1 e4       	ldi	r27, 0x41	; 65
    1f80:	8b 87       	std	Y+11, r24	; 0x0b
    1f82:	9c 87       	std	Y+12, r25	; 0x0c
    1f84:	ad 87       	std	Y+13, r26	; 0x0d
    1f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a ef       	ldi	r20, 0xFA	; 250
    1f96:	54 e4       	ldi	r21, 0x44	; 68
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8f 83       	std	Y+7, r24	; 0x07
    1fa2:	98 87       	std	Y+8, r25	; 0x08
    1fa4:	a9 87       	std	Y+9, r26	; 0x09
    1fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	0f c0       	rjmp	.+30     	; 0x202a <LCD_VoidSendCommand+0x114>
    200c:	88 ec       	ldi	r24, 0xC8	; 200
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_VoidSendCommand+0x102>
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <LCD_VoidSendCommand+0xf6>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_VoidSendCommand+0x13e>
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    205c:	82 e0       	ldi	r24, 0x02	; 2
    205e:	62 e0       	ldi	r22, 0x02	; 2
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>


}
    2066:	2f 96       	adiw	r28, 0x0f	; 15
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <LCD_voidSendData>:
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <LCD_voidSendData+0x6>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	9b 83       	std	Y+3, r25	; 0x03
    2086:	8a 83       	std	Y+2, r24	; 0x02
    2088:	19 82       	std	Y+1, r1	; 0x01
    208a:	0e c0       	rjmp	.+28     	; 0x20a8 <LCD_voidSendData+0x30>
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	fc 01       	movw	r30, r24
    2098:	e2 0f       	add	r30, r18
    209a:	f3 1f       	adc	r31, r19
    209c:	80 81       	ld	r24, Z
    209e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_VoidSendChar>
    	  Local_u8Counter ++;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	8f 5f       	subi	r24, 0xFF	; 255
    20a6:	89 83       	std	Y+1, r24	; 0x01


}
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	fc 01       	movw	r30, r24
    20b4:	e2 0f       	add	r30, r18
    20b6:	f3 1f       	adc	r31, r19
    20b8:	80 81       	ld	r24, Z
    20ba:	88 23       	and	r24, r24
    20bc:	39 f7       	brne	.-50     	; 0x208c <LCD_voidSendData+0x14>
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    	  Local_u8Counter ++;
      }
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <LCD_Voidinit>:
void LCD_Voidinit(void)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	e8 97       	sbiw	r28, 0x38	; 56
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e2       	ldi	r26, 0x20	; 32
    210c:	b2 e4       	ldi	r27, 0x42	; 66
    210e:	8d ab       	std	Y+53, r24	; 0x35
    2110:	9e ab       	std	Y+54, r25	; 0x36
    2112:	af ab       	std	Y+55, r26	; 0x37
    2114:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6d a9       	ldd	r22, Y+53	; 0x35
    2118:	7e a9       	ldd	r23, Y+54	; 0x36
    211a:	8f a9       	ldd	r24, Y+55	; 0x37
    211c:	98 ad       	ldd	r25, Y+56	; 0x38
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a ef       	ldi	r20, 0xFA	; 250
    2124:	54 e4       	ldi	r21, 0x44	; 68
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	89 ab       	std	Y+49, r24	; 0x31
    2130:	9a ab       	std	Y+50, r25	; 0x32
    2132:	ab ab       	std	Y+51, r26	; 0x33
    2134:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2136:	69 a9       	ldd	r22, Y+49	; 0x31
    2138:	7a a9       	ldd	r23, Y+50	; 0x32
    213a:	8b a9       	ldd	r24, Y+51	; 0x33
    213c:	9c a9       	ldd	r25, Y+52	; 0x34
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_Voidinit+0x8e>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	98 ab       	std	Y+48, r25	; 0x30
    2154:	8f a7       	std	Y+47, r24	; 0x2f
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <LCD_Voidinit+0x10c>
	else if (__tmp > 65535)
    2158:	69 a9       	ldd	r22, Y+49	; 0x31
    215a:	7a a9       	ldd	r23, Y+50	; 0x32
    215c:	8b a9       	ldd	r24, Y+51	; 0x33
    215e:	9c a9       	ldd	r25, Y+52	; 0x34
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <LCD_Voidinit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6d a9       	ldd	r22, Y+53	; 0x35
    2172:	7e a9       	ldd	r23, Y+54	; 0x36
    2174:	8f a9       	ldd	r24, Y+55	; 0x37
    2176:	98 ad       	ldd	r25, Y+56	; 0x38
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	98 ab       	std	Y+48, r25	; 0x30
    2196:	8f a7       	std	Y+47, r24	; 0x2f
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <LCD_Voidinit+0xee>
    219a:	88 ec       	ldi	r24, 0xC8	; 200
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9e a7       	std	Y+46, r25	; 0x2e
    21a0:	8d a7       	std	Y+45, r24	; 0x2d
    21a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_Voidinit+0xdc>
    21aa:	9e a7       	std	Y+46, r25	; 0x2e
    21ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b0:	98 a9       	ldd	r25, Y+48	; 0x30
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	98 ab       	std	Y+48, r25	; 0x30
    21b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ba:	98 a9       	ldd	r25, Y+48	; 0x30
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <LCD_Voidinit+0xd0>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <LCD_Voidinit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	69 a9       	ldd	r22, Y+49	; 0x31
    21c4:	7a a9       	ldd	r23, Y+50	; 0x32
    21c6:	8b a9       	ldd	r24, Y+51	; 0x33
    21c8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	98 ab       	std	Y+48, r25	; 0x30
    21d4:	8f a7       	std	Y+47, r24	; 0x2f
    21d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d8:	98 a9       	ldd	r25, Y+48	; 0x30
    21da:	9c a7       	std	Y+44, r25	; 0x2c
    21dc:	8b a7       	std	Y+43, r24	; 0x2b
    21de:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_Voidinit+0x118>
    21e6:	9c a7       	std	Y+44, r25	; 0x2c
    21e8:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	/*Function set command: 2 lines(N = 1), 5*8 Font size (F = 0 )*/
	LCD_VoidSendCommand(FUNCTION_SET);
    21ea:	88 e3       	ldi	r24, 0x38	; 56
    21ec:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_VoidSendCommand>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a0 e8       	ldi	r26, 0x80	; 128
    21f6:	bf e3       	ldi	r27, 0x3F	; 63
    21f8:	8f a3       	std	Y+39, r24	; 0x27
    21fa:	98 a7       	std	Y+40, r25	; 0x28
    21fc:	a9 a7       	std	Y+41, r26	; 0x29
    21fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2200:	6f a1       	ldd	r22, Y+39	; 0x27
    2202:	78 a5       	ldd	r23, Y+40	; 0x28
    2204:	89 a5       	ldd	r24, Y+41	; 0x29
    2206:	9a a5       	ldd	r25, Y+42	; 0x2a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4a ef       	ldi	r20, 0xFA	; 250
    220e:	54 e4       	ldi	r21, 0x44	; 68
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8b a3       	std	Y+35, r24	; 0x23
    221a:	9c a3       	std	Y+36, r25	; 0x24
    221c:	ad a3       	std	Y+37, r26	; 0x25
    221e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2220:	6b a1       	ldd	r22, Y+35	; 0x23
    2222:	7c a1       	ldd	r23, Y+36	; 0x24
    2224:	8d a1       	ldd	r24, Y+37	; 0x25
    2226:	9e a1       	ldd	r25, Y+38	; 0x26
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	2c f4       	brge	.+10     	; 0x2242 <LCD_Voidinit+0x178>
		__ticks = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9a a3       	std	Y+34, r25	; 0x22
    223e:	89 a3       	std	Y+33, r24	; 0x21
    2240:	3f c0       	rjmp	.+126    	; 0x22c0 <LCD_Voidinit+0x1f6>
	else if (__tmp > 65535)
    2242:	6b a1       	ldd	r22, Y+35	; 0x23
    2244:	7c a1       	ldd	r23, Y+36	; 0x24
    2246:	8d a1       	ldd	r24, Y+37	; 0x25
    2248:	9e a1       	ldd	r25, Y+38	; 0x26
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	4f e7       	ldi	r20, 0x7F	; 127
    2250:	57 e4       	ldi	r21, 0x47	; 71
    2252:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2256:	18 16       	cp	r1, r24
    2258:	4c f5       	brge	.+82     	; 0x22ac <LCD_Voidinit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225a:	6f a1       	ldd	r22, Y+39	; 0x27
    225c:	78 a5       	ldd	r23, Y+40	; 0x28
    225e:	89 a5       	ldd	r24, Y+41	; 0x29
    2260:	9a a5       	ldd	r25, Y+42	; 0x2a
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <LCD_Voidinit+0x1d8>
    2284:	88 ec       	ldi	r24, 0xC8	; 200
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	98 a3       	std	Y+32, r25	; 0x20
    228a:	8f 8f       	std	Y+31, r24	; 0x1f
    228c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    228e:	98 a1       	ldd	r25, Y+32	; 0x20
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_Voidinit+0x1c6>
    2294:	98 a3       	std	Y+32, r25	; 0x20
    2296:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	89 a1       	ldd	r24, Y+33	; 0x21
    229a:	9a a1       	ldd	r25, Y+34	; 0x22
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9a a3       	std	Y+34, r25	; 0x22
    22a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	89 a1       	ldd	r24, Y+33	; 0x21
    22a4:	9a a1       	ldd	r25, Y+34	; 0x22
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f7       	brne	.-38     	; 0x2284 <LCD_Voidinit+0x1ba>
    22aa:	14 c0       	rjmp	.+40     	; 0x22d4 <LCD_Voidinit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ac:	6b a1       	ldd	r22, Y+35	; 0x23
    22ae:	7c a1       	ldd	r23, Y+36	; 0x24
    22b0:	8d a1       	ldd	r24, Y+37	; 0x25
    22b2:	9e a1       	ldd	r25, Y+38	; 0x26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	9a a1       	ldd	r25, Y+34	; 0x22
    22c4:	9e 8f       	std	Y+30, r25	; 0x1e
    22c6:	8d 8f       	std	Y+29, r24	; 0x1d
    22c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_Voidinit+0x202>
    22d0:	9e 8f       	std	Y+30, r25	; 0x1e
    22d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display on off control: display enable, disable cursor, no blink cursor*/
	LCD_VoidSendCommand(DISPLAY_SET);
    22d4:	8c e0       	ldi	r24, 0x0C	; 12
    22d6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_VoidSendCommand>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e8       	ldi	r26, 0x80	; 128
    22e0:	bf e3       	ldi	r27, 0x3F	; 63
    22e2:	89 8f       	std	Y+25, r24	; 0x19
    22e4:	9a 8f       	std	Y+26, r25	; 0x1a
    22e6:	ab 8f       	std	Y+27, r26	; 0x1b
    22e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ea:	69 8d       	ldd	r22, Y+25	; 0x19
    22ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	4a ef       	ldi	r20, 0xFA	; 250
    22f8:	54 e4       	ldi	r21, 0x44	; 68
    22fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	8d 8b       	std	Y+21, r24	; 0x15
    2304:	9e 8b       	std	Y+22, r25	; 0x16
    2306:	af 8b       	std	Y+23, r26	; 0x17
    2308:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    230a:	6d 89       	ldd	r22, Y+21	; 0x15
    230c:	7e 89       	ldd	r23, Y+22	; 0x16
    230e:	8f 89       	ldd	r24, Y+23	; 0x17
    2310:	98 8d       	ldd	r25, Y+24	; 0x18
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e8       	ldi	r20, 0x80	; 128
    2318:	5f e3       	ldi	r21, 0x3F	; 63
    231a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231e:	88 23       	and	r24, r24
    2320:	2c f4       	brge	.+10     	; 0x232c <LCD_Voidinit+0x262>
		__ticks = 1;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9c 8b       	std	Y+20, r25	; 0x14
    2328:	8b 8b       	std	Y+19, r24	; 0x13
    232a:	3f c0       	rjmp	.+126    	; 0x23aa <LCD_Voidinit+0x2e0>
	else if (__tmp > 65535)
    232c:	6d 89       	ldd	r22, Y+21	; 0x15
    232e:	7e 89       	ldd	r23, Y+22	; 0x16
    2330:	8f 89       	ldd	r24, Y+23	; 0x17
    2332:	98 8d       	ldd	r25, Y+24	; 0x18
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	3f ef       	ldi	r19, 0xFF	; 255
    2338:	4f e7       	ldi	r20, 0x7F	; 127
    233a:	57 e4       	ldi	r21, 0x47	; 71
    233c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2340:	18 16       	cp	r1, r24
    2342:	4c f5       	brge	.+82     	; 0x2396 <LCD_Voidinit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	69 8d       	ldd	r22, Y+25	; 0x19
    2346:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e2       	ldi	r20, 0x20	; 32
    2352:	51 e4       	ldi	r21, 0x41	; 65
    2354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	bc 01       	movw	r22, r24
    235e:	cd 01       	movw	r24, r26
    2360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9c 8b       	std	Y+20, r25	; 0x14
    236a:	8b 8b       	std	Y+19, r24	; 0x13
    236c:	0f c0       	rjmp	.+30     	; 0x238c <LCD_Voidinit+0x2c2>
    236e:	88 ec       	ldi	r24, 0xC8	; 200
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	9a 8b       	std	Y+18, r25	; 0x12
    2374:	89 8b       	std	Y+17, r24	; 0x11
    2376:	89 89       	ldd	r24, Y+17	; 0x11
    2378:	9a 89       	ldd	r25, Y+18	; 0x12
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <LCD_Voidinit+0x2b0>
    237e:	9a 8b       	std	Y+18, r25	; 0x12
    2380:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2382:	8b 89       	ldd	r24, Y+19	; 0x13
    2384:	9c 89       	ldd	r25, Y+20	; 0x14
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	69 f7       	brne	.-38     	; 0x236e <LCD_Voidinit+0x2a4>
    2394:	14 c0       	rjmp	.+40     	; 0x23be <LCD_Voidinit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2396:	6d 89       	ldd	r22, Y+21	; 0x15
    2398:	7e 89       	ldd	r23, Y+22	; 0x16
    239a:	8f 89       	ldd	r24, Y+23	; 0x17
    239c:	98 8d       	ldd	r25, Y+24	; 0x18
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	8b 89       	ldd	r24, Y+19	; 0x13
    23ac:	9c 89       	ldd	r25, Y+20	; 0x14
    23ae:	98 8b       	std	Y+16, r25	; 0x10
    23b0:	8f 87       	std	Y+15, r24	; 0x0f
    23b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b4:	98 89       	ldd	r25, Y+16	; 0x10
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_Voidinit+0x2ec>
    23ba:	98 8b       	std	Y+16, r25	; 0x10
    23bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Clear display*/
	LCD_VoidSendCommand(CLEAR);
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_VoidSendCommand>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a0 e8       	ldi	r26, 0x80	; 128
    23ca:	bf e3       	ldi	r27, 0x3F	; 63
    23cc:	8b 87       	std	Y+11, r24	; 0x0b
    23ce:	9c 87       	std	Y+12, r25	; 0x0c
    23d0:	ad 87       	std	Y+13, r26	; 0x0d
    23d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23da:	9e 85       	ldd	r25, Y+14	; 0x0e
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a ef       	ldi	r20, 0xFA	; 250
    23e2:	54 e4       	ldi	r21, 0x44	; 68
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8f 83       	std	Y+7, r24	; 0x07
    23ee:	98 87       	std	Y+8, r25	; 0x08
    23f0:	a9 87       	std	Y+9, r26	; 0x09
    23f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	2c f4       	brge	.+10     	; 0x2416 <LCD_Voidinit+0x34c>
		__ticks = 1;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
    2414:	3f c0       	rjmp	.+126    	; 0x2494 <LCD_Voidinit+0x3ca>
	else if (__tmp > 65535)
    2416:	6f 81       	ldd	r22, Y+7	; 0x07
    2418:	78 85       	ldd	r23, Y+8	; 0x08
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	9a 85       	ldd	r25, Y+10	; 0x0a
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	4f e7       	ldi	r20, 0x7F	; 127
    2424:	57 e4       	ldi	r21, 0x47	; 71
    2426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    242a:	18 16       	cp	r1, r24
    242c:	4c f5       	brge	.+82     	; 0x2480 <LCD_Voidinit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2430:	7c 85       	ldd	r23, Y+12	; 0x0c
    2432:	8d 85       	ldd	r24, Y+13	; 0x0d
    2434:	9e 85       	ldd	r25, Y+14	; 0x0e
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e2       	ldi	r20, 0x20	; 32
    243c:	51 e4       	ldi	r21, 0x41	; 65
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <LCD_Voidinit+0x3ac>
    2458:	88 ec       	ldi	r24, 0xC8	; 200
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9c 83       	std	Y+4, r25	; 0x04
    245e:	8b 83       	std	Y+3, r24	; 0x03
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <LCD_Voidinit+0x39a>
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	69 f7       	brne	.-38     	; 0x2458 <LCD_Voidinit+0x38e>
    247e:	14 c0       	rjmp	.+40     	; 0x24a8 <LCD_Voidinit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2480:	6f 81       	ldd	r22, Y+7	; 0x07
    2482:	78 85       	ldd	r23, Y+8	; 0x08
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	8d 81       	ldd	r24, Y+5	; 0x05
    2496:	9e 81       	ldd	r25, Y+6	; 0x06
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <LCD_Voidinit+0x3d6>
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    24a8:	e8 96       	adiw	r28, 0x38	; 56
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <KEYPAD_VoidInit>:
#include "../../MCAL/DIO/DIO.h"
#include "avr/delay.h"


void KEYPAD_VoidInit(void)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
	/*step1 configuring rows direction and pullup ressistor(internal)....	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_INPUT);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_INPUT);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	61 e0       	ldi	r22, 0x01	; 1
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_INPUT);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	62 e0       	ldi	r22, 0x02	; 2
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_INPUT);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	63 e0       	ldi	r22, 0x03	; 3
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_HIGH);
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_HIGH);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_HIGH);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	62 e0       	ldi	r22, 0x02	; 2
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_HIGH);
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	63 e0       	ldi	r22, 0x03	; 3
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>


	/*STEP2 CONFIGURING COLUMNS DIRECTION AND INITIALING WITH HIGH...	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_OUTPUT);
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	64 e0       	ldi	r22, 0x04	; 4
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_OUTPUT);
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_OUTPUT);
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	66 e0       	ldi	r22, 0x06	; 6
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_OUTPUT);
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	67 e0       	ldi	r22, 0x07	; 7
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_HIGH);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	64 e0       	ldi	r22, 0x04	; 4
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_HIGH);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	65 e0       	ldi	r22, 0x05	; 5
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_HIGH);
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	66 e0       	ldi	r22, 0x06	; 6
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_HIGH);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	67 e0       	ldi	r22, 0x07	; 7
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>

}
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <KEYPAD_U8GetPressedKey>:



u8 KEYPAD_U8GetPressedKey(void)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	e2 97       	sbiw	r28, 0x32	; 50
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61

	u8 U8RowLOCAL=0;
    257c:	1c 8a       	std	Y+20, r1	; 0x14
	u8 U8ColumnLocal=0;
    257e:	1b 8a       	std	Y+19, r1	; 0x13

	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    2580:	1d 8a       	std	Y+21, r1	; 0x15
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	8e 8b       	std	Y+22, r24	; 0x16
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	8f 8b       	std	Y+23, r24	; 0x17
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	88 8f       	std	Y+24, r24	; 0x18
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    258e:	84 e0       	ldi	r24, 0x04	; 4
    2590:	89 8f       	std	Y+25, r24	; 0x19
    2592:	85 e0       	ldi	r24, 0x05	; 5
    2594:	8a 8f       	std	Y+26, r24	; 0x1a
    2596:	86 e0       	ldi	r24, 0x06	; 6
    2598:	8b 8f       	std	Y+27, r24	; 0x1b
    259a:	87 e0       	ldi	r24, 0x07	; 7
    259c:	8c 8f       	std	Y+28, r24	; 0x1c



     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    259e:	1b 8a       	std	Y+19, r1	; 0x13
    25a0:	13 c1       	rjmp	.+550    	; 0x27c8 <KEYPAD_U8GetPressedKey+0x260>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);
    25a2:	8b 89       	ldd	r24, Y+19	; 0x13
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	ce 01       	movw	r24, r28
    25aa:	49 96       	adiw	r24, 0x19	; 25
    25ac:	fc 01       	movw	r30, r24
    25ae:	e2 0f       	add	r30, r18
    25b0:	f3 1f       	adc	r31, r19
    25b2:	90 81       	ld	r25, Z
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	69 2f       	mov	r22, r25
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    25be:	1c 8a       	std	Y+20, r1	; 0x14
    25c0:	ee c0       	rjmp	.+476    	; 0x279e <KEYPAD_U8GetPressedKey+0x236>
    	 {
    		 u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    25c2:	8c 89       	ldd	r24, Y+20	; 0x14
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	ce 01       	movw	r24, r28
    25ca:	45 96       	adiw	r24, 0x15	; 21
    25cc:	fc 01       	movw	r30, r24
    25ce:	e2 0f       	add	r30, r18
    25d0:	f3 1f       	adc	r31, r19
    25d2:	90 81       	ld	r25, Z
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	69 2f       	mov	r22, r25
    25d8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <DIO_GetPinValue>
    25dc:	8a 8b       	std	Y+18, r24	; 0x12
    		 if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    25de:	8a 89       	ldd	r24, Y+18	; 0x12
    25e0:	88 23       	and	r24, r24
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <KEYPAD_U8GetPressedKey+0x7e>
    25e4:	d9 c0       	rjmp	.+434    	; 0x2798 <KEYPAD_U8GetPressedKey+0x230>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a8 e4       	ldi	r26, 0x48	; 72
    25ec:	b2 e4       	ldi	r27, 0x42	; 66
    25ee:	8b 87       	std	Y+11, r24	; 0x0b
    25f0:	9c 87       	std	Y+12, r25	; 0x0c
    25f2:	ad 87       	std	Y+13, r26	; 0x0d
    25f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a ef       	ldi	r20, 0xFA	; 250
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8f 83       	std	Y+7, r24	; 0x07
    2610:	98 87       	std	Y+8, r25	; 0x08
    2612:	a9 87       	std	Y+9, r26	; 0x09
    2614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <KEYPAD_U8GetPressedKey+0xd0>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <KEYPAD_U8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <KEYPAD_U8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <KEYPAD_U8GetPressedKey+0x130>
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9c 83       	std	Y+4, r25	; 0x04
    2680:	8b 83       	std	Y+3, r24	; 0x03
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <KEYPAD_U8GetPressedKey+0x11e>
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <KEYPAD_U8GetPressedKey+0x112>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <KEYPAD_U8GetPressedKey+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <KEYPAD_U8GetPressedKey+0x15a>
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
    		 {
    			 //delay to avoid bouncing
					_delay_ms(50);
					//reread switch pin
					u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    26ca:	8c 89       	ldd	r24, Y+20	; 0x14
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	ce 01       	movw	r24, r28
    26d2:	45 96       	adiw	r24, 0x15	; 21
    26d4:	fc 01       	movw	r30, r24
    26d6:	e2 0f       	add	r30, r18
    26d8:	f3 1f       	adc	r31, r19
    26da:	90 81       	ld	r25, Z
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	69 2f       	mov	r22, r25
    26e0:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <DIO_GetPinValue>
    26e4:	89 8b       	std	Y+17, r24	; 0x11
					if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    26e6:	89 89       	ldd	r24, Y+17	; 0x11
    26e8:	88 23       	and	r24, r24
    26ea:	09 f0       	breq	.+2      	; 0x26ee <KEYPAD_U8GetPressedKey+0x186>
    26ec:	55 c0       	rjmp	.+170    	; 0x2798 <KEYPAD_U8GetPressedKey+0x230>
					{
						//hold
						u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    26ee:	8c 89       	ldd	r24, Y+20	; 0x14
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	ce 01       	movw	r24, r28
    26f6:	45 96       	adiw	r24, 0x15	; 21
    26f8:	fc 01       	movw	r30, r24
    26fa:	e2 0f       	add	r30, r18
    26fc:	f3 1f       	adc	r31, r19
    26fe:	90 81       	ld	r25, Z
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	69 2f       	mov	r22, r25
    2704:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <DIO_GetPinValue>
    2708:	88 8b       	std	Y+16, r24	; 0x10
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <KEYPAD_U8GetPressedKey+0x1c0>

						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
							u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    270c:	8c 89       	ldd	r24, Y+20	; 0x14
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	ce 01       	movw	r24, r28
    2714:	45 96       	adiw	r24, 0x15	; 21
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	90 81       	ld	r25, Z
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	69 2f       	mov	r22, r25
    2722:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <DIO_GetPinValue>
    2726:	8f 87       	std	Y+15, r24	; 0x0f
					if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
					{
						//hold
						u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);

						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
    2728:	88 89       	ldd	r24, Y+16	; 0x10
    272a:	88 23       	and	r24, r24
    272c:	79 f3       	breq	.-34     	; 0x270c <KEYPAD_U8GetPressedKey+0x1a4>
							u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
						}

						u8 KPD_u8Value[ROWS_NUMBER][COLUMN_NUMBER]= KEYPAD_VALUES;
    272e:	ce 01       	movw	r24, r28
    2730:	4d 96       	adiw	r24, 0x1d	; 29
    2732:	9f a7       	std	Y+47, r25	; 0x2f
    2734:	8e a7       	std	Y+46, r24	; 0x2e
    2736:	eb e2       	ldi	r30, 0x2B	; 43
    2738:	f1 e0       	ldi	r31, 0x01	; 1
    273a:	f9 ab       	std	Y+49, r31	; 0x31
    273c:	e8 ab       	std	Y+48, r30	; 0x30
    273e:	f0 e1       	ldi	r31, 0x10	; 16
    2740:	fa ab       	std	Y+50, r31	; 0x32
    2742:	e8 a9       	ldd	r30, Y+48	; 0x30
    2744:	f9 a9       	ldd	r31, Y+49	; 0x31
    2746:	00 80       	ld	r0, Z
    2748:	88 a9       	ldd	r24, Y+48	; 0x30
    274a:	99 a9       	ldd	r25, Y+49	; 0x31
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	99 ab       	std	Y+49, r25	; 0x31
    2750:	88 ab       	std	Y+48, r24	; 0x30
    2752:	ee a5       	ldd	r30, Y+46	; 0x2e
    2754:	ff a5       	ldd	r31, Y+47	; 0x2f
    2756:	00 82       	st	Z, r0
    2758:	8e a5       	ldd	r24, Y+46	; 0x2e
    275a:	9f a5       	ldd	r25, Y+47	; 0x2f
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	9f a7       	std	Y+47, r25	; 0x2f
    2760:	8e a7       	std	Y+46, r24	; 0x2e
    2762:	9a a9       	ldd	r25, Y+50	; 0x32
    2764:	91 50       	subi	r25, 0x01	; 1
    2766:	9a ab       	std	Y+50, r25	; 0x32
    2768:	ea a9       	ldd	r30, Y+50	; 0x32
    276a:	ee 23       	and	r30, r30
    276c:	51 f7       	brne	.-44     	; 0x2742 <KEYPAD_U8GetPressedKey+0x1da>
						return KPD_u8Value[U8RowLOCAL][U8ColumnLocal];
    276e:	8c 89       	ldd	r24, Y+20	; 0x14
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	48 2f       	mov	r20, r24
    2778:	50 e0       	ldi	r21, 0x00	; 0
    277a:	22 0f       	add	r18, r18
    277c:	33 1f       	adc	r19, r19
    277e:	22 0f       	add	r18, r18
    2780:	33 1f       	adc	r19, r19
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	82 0f       	add	r24, r18
    2788:	93 1f       	adc	r25, r19
    278a:	84 0f       	add	r24, r20
    278c:	95 1f       	adc	r25, r21
    278e:	fc 01       	movw	r30, r24
    2790:	7c 96       	adiw	r30, 0x1c	; 28
    2792:	80 81       	ld	r24, Z
    2794:	8d a7       	std	Y+45, r24	; 0x2d
    2796:	1e c0       	rjmp	.+60     	; 0x27d4 <KEYPAD_U8GetPressedKey+0x26c>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    2798:	8c 89       	ldd	r24, Y+20	; 0x14
    279a:	8f 5f       	subi	r24, 0xFF	; 255
    279c:	8c 8b       	std	Y+20, r24	; 0x14
    279e:	8c 89       	ldd	r24, Y+20	; 0x14
    27a0:	84 30       	cpi	r24, 0x04	; 4
    27a2:	08 f4       	brcc	.+2      	; 0x27a6 <KEYPAD_U8GetPressedKey+0x23e>
    27a4:	0e cf       	rjmp	.-484    	; 0x25c2 <KEYPAD_U8GetPressedKey+0x5a>

    		 }

        }
    	   //deactivate column
    	   DIO_SetPinValue(KEYPAD_PORT,KPD_ColumnPinArr[U8ColumnLocal],DIO_HIGH);
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	ce 01       	movw	r24, r28
    27ae:	49 96       	adiw	r24, 0x19	; 25
    27b0:	fc 01       	movw	r30, r24
    27b2:	e2 0f       	add	r30, r18
    27b4:	f3 1f       	adc	r31, r19
    27b6:	90 81       	ld	r25, Z
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	69 2f       	mov	r22, r25
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};



     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	8b 8b       	std	Y+19, r24	; 0x13
    27c8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ca:	84 30       	cpi	r24, 0x04	; 4
    27cc:	08 f4       	brcc	.+2      	; 0x27d0 <KEYPAD_U8GetPressedKey+0x268>
    27ce:	e9 ce       	rjmp	.-558    	; 0x25a2 <KEYPAD_U8GetPressedKey+0x3a>
    	   //deactivate column
    	   DIO_SetPinValue(KEYPAD_PORT,KPD_ColumnPinArr[U8ColumnLocal],DIO_HIGH);

   }

     return KEYPAD_NOT_PRESSED_KEY ;
    27d0:	9f ef       	ldi	r25, 0xFF	; 255
    27d2:	9d a7       	std	Y+45, r25	; 0x2d
    27d4:	8d a5       	ldd	r24, Y+45	; 0x2d
 }
    27d6:	e2 96       	adiw	r28, 0x32	; 50
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <MOTOR_Init>:

#include "../../MCAL/DIO/DIO.h"
#include "H_BRIDGE.h"
#include "avr/io.h"

void MOTOR_Init(){
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_ENA,DIO_OUTPUT);
    27f0:	83 e0       	ldi	r24, 0x03	; 3
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	41 e0       	ldi	r20, 0x01	; 1
    27f6:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_ENB,DIO_OUTPUT);
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN1,DIO_OUTPUT);
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	62 e0       	ldi	r22, 0x02	; 2
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN2,DIO_OUTPUT);
    280e:	83 e0       	ldi	r24, 0x03	; 3
    2810:	63 e0       	ldi	r22, 0x03	; 3
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN3,DIO_OUTPUT);
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	64 e0       	ldi	r22, 0x04	; 4
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN4,DIO_OUTPUT);
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	65 e0       	ldi	r22, 0x05	; 5
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 20 0c 	call	0x1840	; 0x1840 <DIO_SetPinDirection>


	DIO_SetPinValue(MOTOR_PORT,MOTOR_ENA,DIO_HIGH); //Enable motor A on H-bridge
    282c:	83 e0       	ldi	r24, 0x03	; 3
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_ENA,DIO_HIGH); //Enable motor B on H-bridge
    2836:	83 e0       	ldi	r24, 0x03	; 3
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	62 e0       	ldi	r22, 0x02	; 2
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW);
    284a:	83 e0       	ldi	r24, 0x03	; 3
    284c:	63 e0       	ldi	r22, 0x03	; 3
    284e:	40 e0       	ldi	r20, 0x00	; 0
    2850:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);
    2854:	83 e0       	ldi	r24, 0x03	; 3
    2856:	64 e0       	ldi	r22, 0x04	; 4
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW);
    285e:	83 e0       	ldi	r24, 0x03	; 3
    2860:	65 e0       	ldi	r22, 0x05	; 5
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
}
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <MOTOR_CWDirection>:
void MOTOR_CWDirection(u8 U8MotorId){
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	00 d0       	rcall	.+0      	; 0x2874 <MOTOR_CWDirection+0x6>
    2874:	0f 92       	push	r0
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	89 83       	std	Y+1, r24	; 0x01
	switch(U8MotorId)
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	3b 83       	std	Y+3, r19	; 0x03
    2884:	2a 83       	std	Y+2, r18	; 0x02
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	9b 81       	ldd	r25, Y+3	; 0x03
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	91 05       	cpc	r25, r1
    288e:	31 f0       	breq	.+12     	; 0x289c <MOTOR_CWDirection+0x2e>
    2890:	2a 81       	ldd	r18, Y+2	; 0x02
    2892:	3b 81       	ldd	r19, Y+3	; 0x03
    2894:	22 30       	cpi	r18, 0x02	; 2
    2896:	31 05       	cpc	r19, r1
    2898:	61 f0       	breq	.+24     	; 0x28b2 <MOTOR_CWDirection+0x44>
    289a:	15 c0       	rjmp	.+42     	; 0x28c6 <MOTOR_CWDirection+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW); //Turns off other switched direction
    289c:	83 e0       	ldi	r24, 0x03	; 3
    289e:	63 e0       	ldi	r22, 0x03	; 3
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_HIGH);//Turns on other switched direction
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	62 e0       	ldi	r22, 0x02	; 2
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
    28b0:	0a c0       	rjmp	.+20     	; 0x28c6 <MOTOR_CWDirection+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW); //Turns off other switched direction
    28b2:	83 e0       	ldi	r24, 0x03	; 3
    28b4:	65 e0       	ldi	r22, 0x05	; 5
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_HIGH);//Turns on other switched direction
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	64 e0       	ldi	r22, 0x04	; 4
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
				}



	}
}
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <MOTOR_CCWDirection>:
void MOTOR_CCWDirection(u8 U8MotorId){
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <MOTOR_CCWDirection+0x6>
    28d8:	0f 92       	push	r0
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	89 83       	std	Y+1, r24	; 0x01

	switch(U8MotorId)
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	3b 83       	std	Y+3, r19	; 0x03
    28e8:	2a 83       	std	Y+2, r18	; 0x02
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	9b 81       	ldd	r25, Y+3	; 0x03
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	91 05       	cpc	r25, r1
    28f2:	31 f0       	breq	.+12     	; 0x2900 <MOTOR_CCWDirection+0x2e>
    28f4:	2a 81       	ldd	r18, Y+2	; 0x02
    28f6:	3b 81       	ldd	r19, Y+3	; 0x03
    28f8:	22 30       	cpi	r18, 0x02	; 2
    28fa:	31 05       	cpc	r19, r1
    28fc:	61 f0       	breq	.+24     	; 0x2916 <MOTOR_CCWDirection+0x44>
    28fe:	15 c0       	rjmp	.+42     	; 0x292a <MOTOR_CCWDirection+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_HIGH); //Turns off other switched direction
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	63 e0       	ldi	r22, 0x03	; 3
    2904:	41 e0       	ldi	r20, 0x01	; 1
    2906:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);//Turns on other switched direction
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	62 e0       	ldi	r22, 0x02	; 2
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
    2914:	0a c0       	rjmp	.+20     	; 0x292a <MOTOR_CCWDirection+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_HIGH); //Turns off other switched direction
    2916:	83 e0       	ldi	r24, 0x03	; 3
    2918:	65 e0       	ldi	r22, 0x05	; 5
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);//Turns on other switched direction
    2920:	83 e0       	ldi	r24, 0x03	; 3
    2922:	64 e0       	ldi	r22, 0x04	; 4
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>



	}

}
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <MOTOR_StopMotion>:

void MOTOR_StopMotion(u8 U8MotorId){
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <MOTOR_StopMotion+0x6>
    293c:	0f 92       	push	r0
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	89 83       	std	Y+1, r24	; 0x01
	switch(U8MotorId)
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	3b 83       	std	Y+3, r19	; 0x03
    294c:	2a 83       	std	Y+2, r18	; 0x02
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	9b 81       	ldd	r25, Y+3	; 0x03
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	91 05       	cpc	r25, r1
    2956:	31 f0       	breq	.+12     	; 0x2964 <MOTOR_StopMotion+0x2e>
    2958:	2a 81       	ldd	r18, Y+2	; 0x02
    295a:	3b 81       	ldd	r19, Y+3	; 0x03
    295c:	22 30       	cpi	r18, 0x02	; 2
    295e:	31 05       	cpc	r19, r1
    2960:	61 f0       	breq	.+24     	; 0x297a <MOTOR_StopMotion+0x44>
    2962:	15 c0       	rjmp	.+42     	; 0x298e <MOTOR_StopMotion+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW); //Turns off other switched direction
    2964:	83 e0       	ldi	r24, 0x03	; 3
    2966:	63 e0       	ldi	r22, 0x03	; 3
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);//Turns on other switched direction
    296e:	83 e0       	ldi	r24, 0x03	; 3
    2970:	62 e0       	ldi	r22, 0x02	; 2
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
    2978:	0a c0       	rjmp	.+20     	; 0x298e <MOTOR_StopMotion+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW); //Turns off other switched direction
    297a:	83 e0       	ldi	r24, 0x03	; 3
    297c:	65 e0       	ldi	r22, 0x05	; 5
    297e:	40 e0       	ldi	r20, 0x00	; 0
    2980:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);//Turns on other switched direction
    2984:	83 e0       	ldi	r24, 0x03	; 3
    2986:	64 e0       	ldi	r22, 0x04	; 4
    2988:	40 e0       	ldi	r20, 0x00	; 0
    298a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_SetPinValue>
				}



	}
}
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <main>:
#include "util/delay.h"

#define F_CPU 8000000UL

void main (void)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	ff cf       	rjmp	.-2      	; 0x29a2 <main+0x8>

000029a4 <__prologue_saves__>:
    29a4:	2f 92       	push	r2
    29a6:	3f 92       	push	r3
    29a8:	4f 92       	push	r4
    29aa:	5f 92       	push	r5
    29ac:	6f 92       	push	r6
    29ae:	7f 92       	push	r7
    29b0:	8f 92       	push	r8
    29b2:	9f 92       	push	r9
    29b4:	af 92       	push	r10
    29b6:	bf 92       	push	r11
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	ca 1b       	sub	r28, r26
    29ce:	db 0b       	sbc	r29, r27
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	09 94       	ijmp

000029dc <__epilogue_restores__>:
    29dc:	2a 88       	ldd	r2, Y+18	; 0x12
    29de:	39 88       	ldd	r3, Y+17	; 0x11
    29e0:	48 88       	ldd	r4, Y+16	; 0x10
    29e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ee:	b9 84       	ldd	r11, Y+9	; 0x09
    29f0:	c8 84       	ldd	r12, Y+8	; 0x08
    29f2:	df 80       	ldd	r13, Y+7	; 0x07
    29f4:	ee 80       	ldd	r14, Y+6	; 0x06
    29f6:	fd 80       	ldd	r15, Y+5	; 0x05
    29f8:	0c 81       	ldd	r16, Y+4	; 0x04
    29fa:	1b 81       	ldd	r17, Y+3	; 0x03
    29fc:	aa 81       	ldd	r26, Y+2	; 0x02
    29fe:	b9 81       	ldd	r27, Y+1	; 0x01
    2a00:	ce 0f       	add	r28, r30
    2a02:	d1 1d       	adc	r29, r1
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	ed 01       	movw	r28, r26
    2a10:	08 95       	ret

00002a12 <printf>:
    2a12:	a0 e0       	ldi	r26, 0x00	; 0
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	ef e0       	ldi	r30, 0x0F	; 15
    2a18:	f5 e1       	ldi	r31, 0x15	; 21
    2a1a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__+0x20>
    2a1e:	fe 01       	movw	r30, r28
    2a20:	35 96       	adiw	r30, 0x05	; 5
    2a22:	61 91       	ld	r22, Z+
    2a24:	71 91       	ld	r23, Z+
    2a26:	80 91 60 01 	lds	r24, 0x0160
    2a2a:	90 91 61 01 	lds	r25, 0x0161
    2a2e:	af 01       	movw	r20, r30
    2a30:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <vfprintf>
    2a34:	20 96       	adiw	r28, 0x00	; 0
    2a36:	e2 e0       	ldi	r30, 0x02	; 2
    2a38:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__+0x20>

00002a3c <vfprintf>:
    2a3c:	ab e0       	ldi	r26, 0x0B	; 11
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e4 e2       	ldi	r30, 0x24	; 36
    2a42:	f5 e1       	ldi	r31, 0x15	; 21
    2a44:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__>
    2a48:	3c 01       	movw	r6, r24
    2a4a:	2b 01       	movw	r4, r22
    2a4c:	5a 01       	movw	r10, r20
    2a4e:	fc 01       	movw	r30, r24
    2a50:	17 82       	std	Z+7, r1	; 0x07
    2a52:	16 82       	std	Z+6, r1	; 0x06
    2a54:	83 81       	ldd	r24, Z+3	; 0x03
    2a56:	81 fd       	sbrc	r24, 1
    2a58:	03 c0       	rjmp	.+6      	; 0x2a60 <vfprintf+0x24>
    2a5a:	6f ef       	ldi	r22, 0xFF	; 255
    2a5c:	7f ef       	ldi	r23, 0xFF	; 255
    2a5e:	c6 c1       	rjmp	.+908    	; 0x2dec <vfprintf+0x3b0>
    2a60:	9a e0       	ldi	r25, 0x0A	; 10
    2a62:	89 2e       	mov	r8, r25
    2a64:	1e 01       	movw	r2, r28
    2a66:	08 94       	sec
    2a68:	21 1c       	adc	r2, r1
    2a6a:	31 1c       	adc	r3, r1
    2a6c:	f3 01       	movw	r30, r6
    2a6e:	23 81       	ldd	r18, Z+3	; 0x03
    2a70:	f2 01       	movw	r30, r4
    2a72:	23 fd       	sbrc	r18, 3
    2a74:	85 91       	lpm	r24, Z+
    2a76:	23 ff       	sbrs	r18, 3
    2a78:	81 91       	ld	r24, Z+
    2a7a:	2f 01       	movw	r4, r30
    2a7c:	88 23       	and	r24, r24
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <vfprintf+0x46>
    2a80:	b2 c1       	rjmp	.+868    	; 0x2de6 <vfprintf+0x3aa>
    2a82:	85 32       	cpi	r24, 0x25	; 37
    2a84:	39 f4       	brne	.+14     	; 0x2a94 <vfprintf+0x58>
    2a86:	23 fd       	sbrc	r18, 3
    2a88:	85 91       	lpm	r24, Z+
    2a8a:	23 ff       	sbrs	r18, 3
    2a8c:	81 91       	ld	r24, Z+
    2a8e:	2f 01       	movw	r4, r30
    2a90:	85 32       	cpi	r24, 0x25	; 37
    2a92:	29 f4       	brne	.+10     	; 0x2a9e <vfprintf+0x62>
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	b3 01       	movw	r22, r6
    2a98:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2a9c:	e7 cf       	rjmp	.-50     	; 0x2a6c <vfprintf+0x30>
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	ff 24       	eor	r15, r15
    2aa2:	ee 24       	eor	r14, r14
    2aa4:	99 24       	eor	r9, r9
    2aa6:	ff e1       	ldi	r31, 0x1F	; 31
    2aa8:	ff 15       	cp	r31, r15
    2aaa:	d0 f0       	brcs	.+52     	; 0x2ae0 <vfprintf+0xa4>
    2aac:	9b 32       	cpi	r25, 0x2B	; 43
    2aae:	69 f0       	breq	.+26     	; 0x2aca <vfprintf+0x8e>
    2ab0:	9c 32       	cpi	r25, 0x2C	; 44
    2ab2:	28 f4       	brcc	.+10     	; 0x2abe <vfprintf+0x82>
    2ab4:	90 32       	cpi	r25, 0x20	; 32
    2ab6:	59 f0       	breq	.+22     	; 0x2ace <vfprintf+0x92>
    2ab8:	93 32       	cpi	r25, 0x23	; 35
    2aba:	91 f4       	brne	.+36     	; 0x2ae0 <vfprintf+0xa4>
    2abc:	0e c0       	rjmp	.+28     	; 0x2ada <vfprintf+0x9e>
    2abe:	9d 32       	cpi	r25, 0x2D	; 45
    2ac0:	49 f0       	breq	.+18     	; 0x2ad4 <vfprintf+0x98>
    2ac2:	90 33       	cpi	r25, 0x30	; 48
    2ac4:	69 f4       	brne	.+26     	; 0x2ae0 <vfprintf+0xa4>
    2ac6:	41 e0       	ldi	r20, 0x01	; 1
    2ac8:	24 c0       	rjmp	.+72     	; 0x2b12 <vfprintf+0xd6>
    2aca:	52 e0       	ldi	r21, 0x02	; 2
    2acc:	f5 2a       	or	r15, r21
    2ace:	84 e0       	ldi	r24, 0x04	; 4
    2ad0:	f8 2a       	or	r15, r24
    2ad2:	28 c0       	rjmp	.+80     	; 0x2b24 <vfprintf+0xe8>
    2ad4:	98 e0       	ldi	r25, 0x08	; 8
    2ad6:	f9 2a       	or	r15, r25
    2ad8:	25 c0       	rjmp	.+74     	; 0x2b24 <vfprintf+0xe8>
    2ada:	e0 e1       	ldi	r30, 0x10	; 16
    2adc:	fe 2a       	or	r15, r30
    2ade:	22 c0       	rjmp	.+68     	; 0x2b24 <vfprintf+0xe8>
    2ae0:	f7 fc       	sbrc	r15, 7
    2ae2:	29 c0       	rjmp	.+82     	; 0x2b36 <vfprintf+0xfa>
    2ae4:	89 2f       	mov	r24, r25
    2ae6:	80 53       	subi	r24, 0x30	; 48
    2ae8:	8a 30       	cpi	r24, 0x0A	; 10
    2aea:	70 f4       	brcc	.+28     	; 0x2b08 <vfprintf+0xcc>
    2aec:	f6 fe       	sbrs	r15, 6
    2aee:	05 c0       	rjmp	.+10     	; 0x2afa <vfprintf+0xbe>
    2af0:	98 9c       	mul	r9, r8
    2af2:	90 2c       	mov	r9, r0
    2af4:	11 24       	eor	r1, r1
    2af6:	98 0e       	add	r9, r24
    2af8:	15 c0       	rjmp	.+42     	; 0x2b24 <vfprintf+0xe8>
    2afa:	e8 9c       	mul	r14, r8
    2afc:	e0 2c       	mov	r14, r0
    2afe:	11 24       	eor	r1, r1
    2b00:	e8 0e       	add	r14, r24
    2b02:	f0 e2       	ldi	r31, 0x20	; 32
    2b04:	ff 2a       	or	r15, r31
    2b06:	0e c0       	rjmp	.+28     	; 0x2b24 <vfprintf+0xe8>
    2b08:	9e 32       	cpi	r25, 0x2E	; 46
    2b0a:	29 f4       	brne	.+10     	; 0x2b16 <vfprintf+0xda>
    2b0c:	f6 fc       	sbrc	r15, 6
    2b0e:	6b c1       	rjmp	.+726    	; 0x2de6 <vfprintf+0x3aa>
    2b10:	40 e4       	ldi	r20, 0x40	; 64
    2b12:	f4 2a       	or	r15, r20
    2b14:	07 c0       	rjmp	.+14     	; 0x2b24 <vfprintf+0xe8>
    2b16:	9c 36       	cpi	r25, 0x6C	; 108
    2b18:	19 f4       	brne	.+6      	; 0x2b20 <vfprintf+0xe4>
    2b1a:	50 e8       	ldi	r21, 0x80	; 128
    2b1c:	f5 2a       	or	r15, r21
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <vfprintf+0xe8>
    2b20:	98 36       	cpi	r25, 0x68	; 104
    2b22:	49 f4       	brne	.+18     	; 0x2b36 <vfprintf+0xfa>
    2b24:	f2 01       	movw	r30, r4
    2b26:	23 fd       	sbrc	r18, 3
    2b28:	95 91       	lpm	r25, Z+
    2b2a:	23 ff       	sbrs	r18, 3
    2b2c:	91 91       	ld	r25, Z+
    2b2e:	2f 01       	movw	r4, r30
    2b30:	99 23       	and	r25, r25
    2b32:	09 f0       	breq	.+2      	; 0x2b36 <vfprintf+0xfa>
    2b34:	b8 cf       	rjmp	.-144    	; 0x2aa6 <vfprintf+0x6a>
    2b36:	89 2f       	mov	r24, r25
    2b38:	85 54       	subi	r24, 0x45	; 69
    2b3a:	83 30       	cpi	r24, 0x03	; 3
    2b3c:	18 f0       	brcs	.+6      	; 0x2b44 <vfprintf+0x108>
    2b3e:	80 52       	subi	r24, 0x20	; 32
    2b40:	83 30       	cpi	r24, 0x03	; 3
    2b42:	38 f4       	brcc	.+14     	; 0x2b52 <vfprintf+0x116>
    2b44:	44 e0       	ldi	r20, 0x04	; 4
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	a4 0e       	add	r10, r20
    2b4a:	b5 1e       	adc	r11, r21
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	59 83       	std	Y+1, r21	; 0x01
    2b50:	0f c0       	rjmp	.+30     	; 0x2b70 <vfprintf+0x134>
    2b52:	93 36       	cpi	r25, 0x63	; 99
    2b54:	31 f0       	breq	.+12     	; 0x2b62 <vfprintf+0x126>
    2b56:	93 37       	cpi	r25, 0x73	; 115
    2b58:	79 f0       	breq	.+30     	; 0x2b78 <vfprintf+0x13c>
    2b5a:	93 35       	cpi	r25, 0x53	; 83
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <vfprintf+0x124>
    2b5e:	56 c0       	rjmp	.+172    	; 0x2c0c <vfprintf+0x1d0>
    2b60:	20 c0       	rjmp	.+64     	; 0x2ba2 <vfprintf+0x166>
    2b62:	f5 01       	movw	r30, r10
    2b64:	80 81       	ld	r24, Z
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	42 e0       	ldi	r20, 0x02	; 2
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	a4 0e       	add	r10, r20
    2b6e:	b5 1e       	adc	r11, r21
    2b70:	61 01       	movw	r12, r2
    2b72:	01 e0       	ldi	r16, 0x01	; 1
    2b74:	10 e0       	ldi	r17, 0x00	; 0
    2b76:	12 c0       	rjmp	.+36     	; 0x2b9c <vfprintf+0x160>
    2b78:	f5 01       	movw	r30, r10
    2b7a:	c0 80       	ld	r12, Z
    2b7c:	d1 80       	ldd	r13, Z+1	; 0x01
    2b7e:	f6 fc       	sbrc	r15, 6
    2b80:	03 c0       	rjmp	.+6      	; 0x2b88 <vfprintf+0x14c>
    2b82:	6f ef       	ldi	r22, 0xFF	; 255
    2b84:	7f ef       	ldi	r23, 0xFF	; 255
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <vfprintf+0x150>
    2b88:	69 2d       	mov	r22, r9
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	42 e0       	ldi	r20, 0x02	; 2
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	a4 0e       	add	r10, r20
    2b92:	b5 1e       	adc	r11, r21
    2b94:	c6 01       	movw	r24, r12
    2b96:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <strnlen>
    2b9a:	8c 01       	movw	r16, r24
    2b9c:	5f e7       	ldi	r21, 0x7F	; 127
    2b9e:	f5 22       	and	r15, r21
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <vfprintf+0x18e>
    2ba2:	f5 01       	movw	r30, r10
    2ba4:	c0 80       	ld	r12, Z
    2ba6:	d1 80       	ldd	r13, Z+1	; 0x01
    2ba8:	f6 fc       	sbrc	r15, 6
    2baa:	03 c0       	rjmp	.+6      	; 0x2bb2 <vfprintf+0x176>
    2bac:	6f ef       	ldi	r22, 0xFF	; 255
    2bae:	7f ef       	ldi	r23, 0xFF	; 255
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <vfprintf+0x17a>
    2bb2:	69 2d       	mov	r22, r9
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	42 e0       	ldi	r20, 0x02	; 2
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	a4 0e       	add	r10, r20
    2bbc:	b5 1e       	adc	r11, r21
    2bbe:	c6 01       	movw	r24, r12
    2bc0:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <strnlen_P>
    2bc4:	8c 01       	movw	r16, r24
    2bc6:	50 e8       	ldi	r21, 0x80	; 128
    2bc8:	f5 2a       	or	r15, r21
    2bca:	f3 fe       	sbrs	r15, 3
    2bcc:	07 c0       	rjmp	.+14     	; 0x2bdc <vfprintf+0x1a0>
    2bce:	1a c0       	rjmp	.+52     	; 0x2c04 <vfprintf+0x1c8>
    2bd0:	80 e2       	ldi	r24, 0x20	; 32
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	b3 01       	movw	r22, r6
    2bd6:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2bda:	ea 94       	dec	r14
    2bdc:	8e 2d       	mov	r24, r14
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	08 17       	cp	r16, r24
    2be2:	19 07       	cpc	r17, r25
    2be4:	a8 f3       	brcs	.-22     	; 0x2bd0 <vfprintf+0x194>
    2be6:	0e c0       	rjmp	.+28     	; 0x2c04 <vfprintf+0x1c8>
    2be8:	f6 01       	movw	r30, r12
    2bea:	f7 fc       	sbrc	r15, 7
    2bec:	85 91       	lpm	r24, Z+
    2bee:	f7 fe       	sbrs	r15, 7
    2bf0:	81 91       	ld	r24, Z+
    2bf2:	6f 01       	movw	r12, r30
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	b3 01       	movw	r22, r6
    2bf8:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2bfc:	e1 10       	cpse	r14, r1
    2bfe:	ea 94       	dec	r14
    2c00:	01 50       	subi	r16, 0x01	; 1
    2c02:	10 40       	sbci	r17, 0x00	; 0
    2c04:	01 15       	cp	r16, r1
    2c06:	11 05       	cpc	r17, r1
    2c08:	79 f7       	brne	.-34     	; 0x2be8 <vfprintf+0x1ac>
    2c0a:	ea c0       	rjmp	.+468    	; 0x2de0 <vfprintf+0x3a4>
    2c0c:	94 36       	cpi	r25, 0x64	; 100
    2c0e:	11 f0       	breq	.+4      	; 0x2c14 <vfprintf+0x1d8>
    2c10:	99 36       	cpi	r25, 0x69	; 105
    2c12:	69 f5       	brne	.+90     	; 0x2c6e <vfprintf+0x232>
    2c14:	f7 fe       	sbrs	r15, 7
    2c16:	08 c0       	rjmp	.+16     	; 0x2c28 <vfprintf+0x1ec>
    2c18:	f5 01       	movw	r30, r10
    2c1a:	20 81       	ld	r18, Z
    2c1c:	31 81       	ldd	r19, Z+1	; 0x01
    2c1e:	42 81       	ldd	r20, Z+2	; 0x02
    2c20:	53 81       	ldd	r21, Z+3	; 0x03
    2c22:	84 e0       	ldi	r24, 0x04	; 4
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0a c0       	rjmp	.+20     	; 0x2c3c <vfprintf+0x200>
    2c28:	f5 01       	movw	r30, r10
    2c2a:	80 81       	ld	r24, Z
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	9c 01       	movw	r18, r24
    2c30:	44 27       	eor	r20, r20
    2c32:	37 fd       	sbrc	r19, 7
    2c34:	40 95       	com	r20
    2c36:	54 2f       	mov	r21, r20
    2c38:	82 e0       	ldi	r24, 0x02	; 2
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a8 0e       	add	r10, r24
    2c3e:	b9 1e       	adc	r11, r25
    2c40:	9f e6       	ldi	r25, 0x6F	; 111
    2c42:	f9 22       	and	r15, r25
    2c44:	57 ff       	sbrs	r21, 7
    2c46:	09 c0       	rjmp	.+18     	; 0x2c5a <vfprintf+0x21e>
    2c48:	50 95       	com	r21
    2c4a:	40 95       	com	r20
    2c4c:	30 95       	com	r19
    2c4e:	21 95       	neg	r18
    2c50:	3f 4f       	sbci	r19, 0xFF	; 255
    2c52:	4f 4f       	sbci	r20, 0xFF	; 255
    2c54:	5f 4f       	sbci	r21, 0xFF	; 255
    2c56:	e0 e8       	ldi	r30, 0x80	; 128
    2c58:	fe 2a       	or	r15, r30
    2c5a:	ca 01       	movw	r24, r20
    2c5c:	b9 01       	movw	r22, r18
    2c5e:	a1 01       	movw	r20, r2
    2c60:	2a e0       	ldi	r18, 0x0A	; 10
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__ultoa_invert>
    2c68:	d8 2e       	mov	r13, r24
    2c6a:	d2 18       	sub	r13, r2
    2c6c:	40 c0       	rjmp	.+128    	; 0x2cee <vfprintf+0x2b2>
    2c6e:	95 37       	cpi	r25, 0x75	; 117
    2c70:	29 f4       	brne	.+10     	; 0x2c7c <vfprintf+0x240>
    2c72:	1f 2d       	mov	r17, r15
    2c74:	1f 7e       	andi	r17, 0xEF	; 239
    2c76:	2a e0       	ldi	r18, 0x0A	; 10
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	1d c0       	rjmp	.+58     	; 0x2cb6 <vfprintf+0x27a>
    2c7c:	1f 2d       	mov	r17, r15
    2c7e:	19 7f       	andi	r17, 0xF9	; 249
    2c80:	9f 36       	cpi	r25, 0x6F	; 111
    2c82:	61 f0       	breq	.+24     	; 0x2c9c <vfprintf+0x260>
    2c84:	90 37       	cpi	r25, 0x70	; 112
    2c86:	20 f4       	brcc	.+8      	; 0x2c90 <vfprintf+0x254>
    2c88:	98 35       	cpi	r25, 0x58	; 88
    2c8a:	09 f0       	breq	.+2      	; 0x2c8e <vfprintf+0x252>
    2c8c:	ac c0       	rjmp	.+344    	; 0x2de6 <vfprintf+0x3aa>
    2c8e:	0f c0       	rjmp	.+30     	; 0x2cae <vfprintf+0x272>
    2c90:	90 37       	cpi	r25, 0x70	; 112
    2c92:	39 f0       	breq	.+14     	; 0x2ca2 <vfprintf+0x266>
    2c94:	98 37       	cpi	r25, 0x78	; 120
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <vfprintf+0x25e>
    2c98:	a6 c0       	rjmp	.+332    	; 0x2de6 <vfprintf+0x3aa>
    2c9a:	04 c0       	rjmp	.+8      	; 0x2ca4 <vfprintf+0x268>
    2c9c:	28 e0       	ldi	r18, 0x08	; 8
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	0a c0       	rjmp	.+20     	; 0x2cb6 <vfprintf+0x27a>
    2ca2:	10 61       	ori	r17, 0x10	; 16
    2ca4:	14 fd       	sbrc	r17, 4
    2ca6:	14 60       	ori	r17, 0x04	; 4
    2ca8:	20 e1       	ldi	r18, 0x10	; 16
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	04 c0       	rjmp	.+8      	; 0x2cb6 <vfprintf+0x27a>
    2cae:	14 fd       	sbrc	r17, 4
    2cb0:	16 60       	ori	r17, 0x06	; 6
    2cb2:	20 e1       	ldi	r18, 0x10	; 16
    2cb4:	32 e0       	ldi	r19, 0x02	; 2
    2cb6:	17 ff       	sbrs	r17, 7
    2cb8:	08 c0       	rjmp	.+16     	; 0x2cca <vfprintf+0x28e>
    2cba:	f5 01       	movw	r30, r10
    2cbc:	60 81       	ld	r22, Z
    2cbe:	71 81       	ldd	r23, Z+1	; 0x01
    2cc0:	82 81       	ldd	r24, Z+2	; 0x02
    2cc2:	93 81       	ldd	r25, Z+3	; 0x03
    2cc4:	44 e0       	ldi	r20, 0x04	; 4
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	08 c0       	rjmp	.+16     	; 0x2cda <vfprintf+0x29e>
    2cca:	f5 01       	movw	r30, r10
    2ccc:	80 81       	ld	r24, Z
    2cce:	91 81       	ldd	r25, Z+1	; 0x01
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	42 e0       	ldi	r20, 0x02	; 2
    2cd8:	50 e0       	ldi	r21, 0x00	; 0
    2cda:	a4 0e       	add	r10, r20
    2cdc:	b5 1e       	adc	r11, r21
    2cde:	a1 01       	movw	r20, r2
    2ce0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__ultoa_invert>
    2ce4:	d8 2e       	mov	r13, r24
    2ce6:	d2 18       	sub	r13, r2
    2ce8:	8f e7       	ldi	r24, 0x7F	; 127
    2cea:	f8 2e       	mov	r15, r24
    2cec:	f1 22       	and	r15, r17
    2cee:	f6 fe       	sbrs	r15, 6
    2cf0:	0b c0       	rjmp	.+22     	; 0x2d08 <vfprintf+0x2cc>
    2cf2:	5e ef       	ldi	r21, 0xFE	; 254
    2cf4:	f5 22       	and	r15, r21
    2cf6:	d9 14       	cp	r13, r9
    2cf8:	38 f4       	brcc	.+14     	; 0x2d08 <vfprintf+0x2cc>
    2cfa:	f4 fe       	sbrs	r15, 4
    2cfc:	07 c0       	rjmp	.+14     	; 0x2d0c <vfprintf+0x2d0>
    2cfe:	f2 fc       	sbrc	r15, 2
    2d00:	05 c0       	rjmp	.+10     	; 0x2d0c <vfprintf+0x2d0>
    2d02:	8f ee       	ldi	r24, 0xEF	; 239
    2d04:	f8 22       	and	r15, r24
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <vfprintf+0x2d0>
    2d08:	1d 2d       	mov	r17, r13
    2d0a:	01 c0       	rjmp	.+2      	; 0x2d0e <vfprintf+0x2d2>
    2d0c:	19 2d       	mov	r17, r9
    2d0e:	f4 fe       	sbrs	r15, 4
    2d10:	0d c0       	rjmp	.+26     	; 0x2d2c <vfprintf+0x2f0>
    2d12:	fe 01       	movw	r30, r28
    2d14:	ed 0d       	add	r30, r13
    2d16:	f1 1d       	adc	r31, r1
    2d18:	80 81       	ld	r24, Z
    2d1a:	80 33       	cpi	r24, 0x30	; 48
    2d1c:	19 f4       	brne	.+6      	; 0x2d24 <vfprintf+0x2e8>
    2d1e:	99 ee       	ldi	r25, 0xE9	; 233
    2d20:	f9 22       	and	r15, r25
    2d22:	08 c0       	rjmp	.+16     	; 0x2d34 <vfprintf+0x2f8>
    2d24:	1f 5f       	subi	r17, 0xFF	; 255
    2d26:	f2 fe       	sbrs	r15, 2
    2d28:	05 c0       	rjmp	.+10     	; 0x2d34 <vfprintf+0x2f8>
    2d2a:	03 c0       	rjmp	.+6      	; 0x2d32 <vfprintf+0x2f6>
    2d2c:	8f 2d       	mov	r24, r15
    2d2e:	86 78       	andi	r24, 0x86	; 134
    2d30:	09 f0       	breq	.+2      	; 0x2d34 <vfprintf+0x2f8>
    2d32:	1f 5f       	subi	r17, 0xFF	; 255
    2d34:	0f 2d       	mov	r16, r15
    2d36:	f3 fc       	sbrc	r15, 3
    2d38:	14 c0       	rjmp	.+40     	; 0x2d62 <vfprintf+0x326>
    2d3a:	f0 fe       	sbrs	r15, 0
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <vfprintf+0x320>
    2d3e:	1e 15       	cp	r17, r14
    2d40:	10 f0       	brcs	.+4      	; 0x2d46 <vfprintf+0x30a>
    2d42:	9d 2c       	mov	r9, r13
    2d44:	0b c0       	rjmp	.+22     	; 0x2d5c <vfprintf+0x320>
    2d46:	9d 2c       	mov	r9, r13
    2d48:	9e 0c       	add	r9, r14
    2d4a:	91 1a       	sub	r9, r17
    2d4c:	1e 2d       	mov	r17, r14
    2d4e:	06 c0       	rjmp	.+12     	; 0x2d5c <vfprintf+0x320>
    2d50:	80 e2       	ldi	r24, 0x20	; 32
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	b3 01       	movw	r22, r6
    2d56:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2d5a:	1f 5f       	subi	r17, 0xFF	; 255
    2d5c:	1e 15       	cp	r17, r14
    2d5e:	c0 f3       	brcs	.-16     	; 0x2d50 <vfprintf+0x314>
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <vfprintf+0x32e>
    2d62:	1e 15       	cp	r17, r14
    2d64:	10 f4       	brcc	.+4      	; 0x2d6a <vfprintf+0x32e>
    2d66:	e1 1a       	sub	r14, r17
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <vfprintf+0x330>
    2d6a:	ee 24       	eor	r14, r14
    2d6c:	04 ff       	sbrs	r16, 4
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <vfprintf+0x352>
    2d70:	80 e3       	ldi	r24, 0x30	; 48
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	b3 01       	movw	r22, r6
    2d76:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2d7a:	02 ff       	sbrs	r16, 2
    2d7c:	1d c0       	rjmp	.+58     	; 0x2db8 <vfprintf+0x37c>
    2d7e:	01 fd       	sbrc	r16, 1
    2d80:	03 c0       	rjmp	.+6      	; 0x2d88 <vfprintf+0x34c>
    2d82:	88 e7       	ldi	r24, 0x78	; 120
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e c0       	rjmp	.+28     	; 0x2da4 <vfprintf+0x368>
    2d88:	88 e5       	ldi	r24, 0x58	; 88
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0b c0       	rjmp	.+22     	; 0x2da4 <vfprintf+0x368>
    2d8e:	80 2f       	mov	r24, r16
    2d90:	86 78       	andi	r24, 0x86	; 134
    2d92:	91 f0       	breq	.+36     	; 0x2db8 <vfprintf+0x37c>
    2d94:	01 ff       	sbrs	r16, 1
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <vfprintf+0x360>
    2d98:	8b e2       	ldi	r24, 0x2B	; 43
    2d9a:	01 c0       	rjmp	.+2      	; 0x2d9e <vfprintf+0x362>
    2d9c:	80 e2       	ldi	r24, 0x20	; 32
    2d9e:	f7 fc       	sbrc	r15, 7
    2da0:	8d e2       	ldi	r24, 0x2D	; 45
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	b3 01       	movw	r22, r6
    2da6:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2daa:	06 c0       	rjmp	.+12     	; 0x2db8 <vfprintf+0x37c>
    2dac:	80 e3       	ldi	r24, 0x30	; 48
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	b3 01       	movw	r22, r6
    2db2:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2db6:	9a 94       	dec	r9
    2db8:	d9 14       	cp	r13, r9
    2dba:	c0 f3       	brcs	.-16     	; 0x2dac <vfprintf+0x370>
    2dbc:	da 94       	dec	r13
    2dbe:	f1 01       	movw	r30, r2
    2dc0:	ed 0d       	add	r30, r13
    2dc2:	f1 1d       	adc	r31, r1
    2dc4:	80 81       	ld	r24, Z
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	b3 01       	movw	r22, r6
    2dca:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2dce:	dd 20       	and	r13, r13
    2dd0:	a9 f7       	brne	.-22     	; 0x2dbc <vfprintf+0x380>
    2dd2:	06 c0       	rjmp	.+12     	; 0x2de0 <vfprintf+0x3a4>
    2dd4:	80 e2       	ldi	r24, 0x20	; 32
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	b3 01       	movw	r22, r6
    2dda:	0e 94 11 17 	call	0x2e22	; 0x2e22 <fputc>
    2dde:	ea 94       	dec	r14
    2de0:	ee 20       	and	r14, r14
    2de2:	c1 f7       	brne	.-16     	; 0x2dd4 <vfprintf+0x398>
    2de4:	43 ce       	rjmp	.-890    	; 0x2a6c <vfprintf+0x30>
    2de6:	f3 01       	movw	r30, r6
    2de8:	66 81       	ldd	r22, Z+6	; 0x06
    2dea:	77 81       	ldd	r23, Z+7	; 0x07
    2dec:	cb 01       	movw	r24, r22
    2dee:	2b 96       	adiw	r28, 0x0b	; 11
    2df0:	e2 e1       	ldi	r30, 0x12	; 18
    2df2:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__>

00002df6 <strnlen_P>:
    2df6:	fc 01       	movw	r30, r24
    2df8:	05 90       	lpm	r0, Z+
    2dfa:	61 50       	subi	r22, 0x01	; 1
    2dfc:	70 40       	sbci	r23, 0x00	; 0
    2dfe:	01 10       	cpse	r0, r1
    2e00:	d8 f7       	brcc	.-10     	; 0x2df8 <strnlen_P+0x2>
    2e02:	80 95       	com	r24
    2e04:	90 95       	com	r25
    2e06:	8e 0f       	add	r24, r30
    2e08:	9f 1f       	adc	r25, r31
    2e0a:	08 95       	ret

00002e0c <strnlen>:
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	61 50       	subi	r22, 0x01	; 1
    2e10:	70 40       	sbci	r23, 0x00	; 0
    2e12:	01 90       	ld	r0, Z+
    2e14:	01 10       	cpse	r0, r1
    2e16:	d8 f7       	brcc	.-10     	; 0x2e0e <strnlen+0x2>
    2e18:	80 95       	com	r24
    2e1a:	90 95       	com	r25
    2e1c:	8e 0f       	add	r24, r30
    2e1e:	9f 1f       	adc	r25, r31
    2e20:	08 95       	ret

00002e22 <fputc>:
    2e22:	0f 93       	push	r16
    2e24:	1f 93       	push	r17
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	8c 01       	movw	r16, r24
    2e2c:	eb 01       	movw	r28, r22
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	81 ff       	sbrs	r24, 1
    2e32:	1b c0       	rjmp	.+54     	; 0x2e6a <fputc+0x48>
    2e34:	82 ff       	sbrs	r24, 2
    2e36:	0d c0       	rjmp	.+26     	; 0x2e52 <fputc+0x30>
    2e38:	2e 81       	ldd	r18, Y+6	; 0x06
    2e3a:	3f 81       	ldd	r19, Y+7	; 0x07
    2e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e40:	28 17       	cp	r18, r24
    2e42:	39 07       	cpc	r19, r25
    2e44:	64 f4       	brge	.+24     	; 0x2e5e <fputc+0x3c>
    2e46:	e8 81       	ld	r30, Y
    2e48:	f9 81       	ldd	r31, Y+1	; 0x01
    2e4a:	01 93       	st	Z+, r16
    2e4c:	f9 83       	std	Y+1, r31	; 0x01
    2e4e:	e8 83       	st	Y, r30
    2e50:	06 c0       	rjmp	.+12     	; 0x2e5e <fputc+0x3c>
    2e52:	e8 85       	ldd	r30, Y+8	; 0x08
    2e54:	f9 85       	ldd	r31, Y+9	; 0x09
    2e56:	80 2f       	mov	r24, r16
    2e58:	09 95       	icall
    2e5a:	89 2b       	or	r24, r25
    2e5c:	31 f4       	brne	.+12     	; 0x2e6a <fputc+0x48>
    2e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e60:	9f 81       	ldd	r25, Y+7	; 0x07
    2e62:	01 96       	adiw	r24, 0x01	; 1
    2e64:	9f 83       	std	Y+7, r25	; 0x07
    2e66:	8e 83       	std	Y+6, r24	; 0x06
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <fputc+0x4c>
    2e6a:	0f ef       	ldi	r16, 0xFF	; 255
    2e6c:	1f ef       	ldi	r17, 0xFF	; 255
    2e6e:	c8 01       	movw	r24, r16
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	08 95       	ret

00002e7a <__ultoa_invert>:
    2e7a:	fa 01       	movw	r30, r20
    2e7c:	aa 27       	eor	r26, r26
    2e7e:	28 30       	cpi	r18, 0x08	; 8
    2e80:	51 f1       	breq	.+84     	; 0x2ed6 <__ultoa_invert+0x5c>
    2e82:	20 31       	cpi	r18, 0x10	; 16
    2e84:	81 f1       	breq	.+96     	; 0x2ee6 <__ultoa_invert+0x6c>
    2e86:	e8 94       	clt
    2e88:	6f 93       	push	r22
    2e8a:	6e 7f       	andi	r22, 0xFE	; 254
    2e8c:	6e 5f       	subi	r22, 0xFE	; 254
    2e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e90:	8f 4f       	sbci	r24, 0xFF	; 255
    2e92:	9f 4f       	sbci	r25, 0xFF	; 255
    2e94:	af 4f       	sbci	r26, 0xFF	; 255
    2e96:	b1 e0       	ldi	r27, 0x01	; 1
    2e98:	3e d0       	rcall	.+124    	; 0x2f16 <__ultoa_invert+0x9c>
    2e9a:	b4 e0       	ldi	r27, 0x04	; 4
    2e9c:	3c d0       	rcall	.+120    	; 0x2f16 <__ultoa_invert+0x9c>
    2e9e:	67 0f       	add	r22, r23
    2ea0:	78 1f       	adc	r23, r24
    2ea2:	89 1f       	adc	r24, r25
    2ea4:	9a 1f       	adc	r25, r26
    2ea6:	a1 1d       	adc	r26, r1
    2ea8:	68 0f       	add	r22, r24
    2eaa:	79 1f       	adc	r23, r25
    2eac:	8a 1f       	adc	r24, r26
    2eae:	91 1d       	adc	r25, r1
    2eb0:	a1 1d       	adc	r26, r1
    2eb2:	6a 0f       	add	r22, r26
    2eb4:	71 1d       	adc	r23, r1
    2eb6:	81 1d       	adc	r24, r1
    2eb8:	91 1d       	adc	r25, r1
    2eba:	a1 1d       	adc	r26, r1
    2ebc:	20 d0       	rcall	.+64     	; 0x2efe <__ultoa_invert+0x84>
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <__ultoa_invert+0x48>
    2ec0:	68 94       	set
    2ec2:	3f 91       	pop	r19
    2ec4:	2a e0       	ldi	r18, 0x0A	; 10
    2ec6:	26 9f       	mul	r18, r22
    2ec8:	11 24       	eor	r1, r1
    2eca:	30 19       	sub	r19, r0
    2ecc:	30 5d       	subi	r19, 0xD0	; 208
    2ece:	31 93       	st	Z+, r19
    2ed0:	de f6       	brtc	.-74     	; 0x2e88 <__ultoa_invert+0xe>
    2ed2:	cf 01       	movw	r24, r30
    2ed4:	08 95       	ret
    2ed6:	46 2f       	mov	r20, r22
    2ed8:	47 70       	andi	r20, 0x07	; 7
    2eda:	40 5d       	subi	r20, 0xD0	; 208
    2edc:	41 93       	st	Z+, r20
    2ede:	b3 e0       	ldi	r27, 0x03	; 3
    2ee0:	0f d0       	rcall	.+30     	; 0x2f00 <__ultoa_invert+0x86>
    2ee2:	c9 f7       	brne	.-14     	; 0x2ed6 <__ultoa_invert+0x5c>
    2ee4:	f6 cf       	rjmp	.-20     	; 0x2ed2 <__ultoa_invert+0x58>
    2ee6:	46 2f       	mov	r20, r22
    2ee8:	4f 70       	andi	r20, 0x0F	; 15
    2eea:	40 5d       	subi	r20, 0xD0	; 208
    2eec:	4a 33       	cpi	r20, 0x3A	; 58
    2eee:	18 f0       	brcs	.+6      	; 0x2ef6 <__ultoa_invert+0x7c>
    2ef0:	49 5d       	subi	r20, 0xD9	; 217
    2ef2:	31 fd       	sbrc	r19, 1
    2ef4:	40 52       	subi	r20, 0x20	; 32
    2ef6:	41 93       	st	Z+, r20
    2ef8:	02 d0       	rcall	.+4      	; 0x2efe <__ultoa_invert+0x84>
    2efa:	a9 f7       	brne	.-22     	; 0x2ee6 <__ultoa_invert+0x6c>
    2efc:	ea cf       	rjmp	.-44     	; 0x2ed2 <__ultoa_invert+0x58>
    2efe:	b4 e0       	ldi	r27, 0x04	; 4
    2f00:	a6 95       	lsr	r26
    2f02:	97 95       	ror	r25
    2f04:	87 95       	ror	r24
    2f06:	77 95       	ror	r23
    2f08:	67 95       	ror	r22
    2f0a:	ba 95       	dec	r27
    2f0c:	c9 f7       	brne	.-14     	; 0x2f00 <__ultoa_invert+0x86>
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	61 05       	cpc	r22, r1
    2f12:	71 05       	cpc	r23, r1
    2f14:	08 95       	ret
    2f16:	9b 01       	movw	r18, r22
    2f18:	ac 01       	movw	r20, r24
    2f1a:	0a 2e       	mov	r0, r26
    2f1c:	06 94       	lsr	r0
    2f1e:	57 95       	ror	r21
    2f20:	47 95       	ror	r20
    2f22:	37 95       	ror	r19
    2f24:	27 95       	ror	r18
    2f26:	ba 95       	dec	r27
    2f28:	c9 f7       	brne	.-14     	; 0x2f1c <__ultoa_invert+0xa2>
    2f2a:	62 0f       	add	r22, r18
    2f2c:	73 1f       	adc	r23, r19
    2f2e:	84 1f       	adc	r24, r20
    2f30:	95 1f       	adc	r25, r21
    2f32:	a0 1d       	adc	r26, r0
    2f34:	08 95       	ret

00002f36 <_exit>:
    2f36:	f8 94       	cli

00002f38 <__stop_program>:
    2f38:	ff cf       	rjmp	.-2      	; 0x2f38 <__stop_program>
