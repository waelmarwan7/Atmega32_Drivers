
LAB5_KEYPAD_DRIVER03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  000021e6  0000227a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080013c  0080013c  00002356  2**0
                  ALLOC
  3 .stab         000015e4  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c32  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000456e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000046ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000481e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007352  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008100  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008260  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000084ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 34       	cpi	r26, 0x42	; 66
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <main>
      8a:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPinValue>:
#include  "util/delay.h"



void  DIO_SetPinValue (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinValueCopy)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	08 f0       	brcs	.+2      	; 0xb68 <DIO_SetPinValue+0x22>
     b66:	fc c0       	rjmp	.+504    	; 0xd60 <DIO_SetPinValue+0x21a>
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	88 30       	cpi	r24, 0x08	; 8
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <DIO_SetPinValue+0x2a>
     b6e:	f8 c0       	rjmp	.+496    	; 0xd60 <DIO_SetPinValue+0x21a>
	{
		if(U8PinValueCopy == DIO_HIGH)
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	09 f0       	breq	.+2      	; 0xb78 <DIO_SetPinValue+0x32>
     b76:	6f c0       	rjmp	.+222    	; 0xc56 <DIO_SetPinValue+0x110>
		{
			switch (U8PortIdcopy)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3f 83       	std	Y+7, r19	; 0x07
     b80:	2e 83       	std	Y+6, r18	; 0x06
     b82:	8e 81       	ldd	r24, Y+6	; 0x06
     b84:	9f 81       	ldd	r25, Y+7	; 0x07
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	91 05       	cpc	r25, r1
     b8a:	49 f1       	breq	.+82     	; 0xbde <DIO_SetPinValue+0x98>
     b8c:	2e 81       	ldd	r18, Y+6	; 0x06
     b8e:	3f 81       	ldd	r19, Y+7	; 0x07
     b90:	22 30       	cpi	r18, 0x02	; 2
     b92:	31 05       	cpc	r19, r1
     b94:	2c f4       	brge	.+10     	; 0xba0 <DIO_SetPinValue+0x5a>
     b96:	8e 81       	ldd	r24, Y+6	; 0x06
     b98:	9f 81       	ldd	r25, Y+7	; 0x07
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	61 f0       	breq	.+24     	; 0xbb6 <DIO_SetPinValue+0x70>
     b9e:	ec c0       	rjmp	.+472    	; 0xd78 <DIO_SetPinValue+0x232>
     ba0:	2e 81       	ldd	r18, Y+6	; 0x06
     ba2:	3f 81       	ldd	r19, Y+7	; 0x07
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	71 f1       	breq	.+92     	; 0xc06 <DIO_SetPinValue+0xc0>
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	9f 81       	ldd	r25, Y+7	; 0x07
     bae:	83 30       	cpi	r24, 0x03	; 3
     bb0:	91 05       	cpc	r25, r1
     bb2:	e9 f1       	breq	.+122    	; 0xc2e <DIO_SetPinValue+0xe8>
     bb4:	e1 c0       	rjmp	.+450    	; 0xd78 <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : SET_BIT(PORTA,U8PinIdCopy); break;
     bb6:	ab e3       	ldi	r26, 0x3B	; 59
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	eb e3       	ldi	r30, 0x3B	; 59
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	48 2f       	mov	r20, r24
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 2e       	mov	r0, r18
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <DIO_SetPinValue+0x8e>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <DIO_SetPinValue+0x8a>
     bd8:	84 2b       	or	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	cd c0       	rjmp	.+410    	; 0xd78 <DIO_SetPinValue+0x232>
				case DIO_PORTB : SET_BIT(PORTB,U8PinIdCopy); break;
     bde:	a8 e3       	ldi	r26, 0x38	; 56
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e8 e3       	ldi	r30, 0x38	; 56
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_SetPinValue+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_SetPinValue+0xb2>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	b9 c0       	rjmp	.+370    	; 0xd78 <DIO_SetPinValue+0x232>
				case DIO_PORTC : SET_BIT(PORTC,U8PinIdCopy); break;
     c06:	a5 e3       	ldi	r26, 0x35	; 53
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e5 e3       	ldi	r30, 0x35	; 53
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_SetPinValue+0xde>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_SetPinValue+0xda>
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	a5 c0       	rjmp	.+330    	; 0xd78 <DIO_SetPinValue+0x232>
				case DIO_PORTD : SET_BIT(PORTD,U8PinIdCopy); break;
     c2e:	a2 e3       	ldi	r26, 0x32	; 50
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e2 e3       	ldi	r30, 0x32	; 50
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_SetPinValue+0x106>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_SetPinValue+0x102>
     c50:	84 2b       	or	r24, r20
     c52:	8c 93       	st	X, r24
     c54:	91 c0       	rjmp	.+290    	; 0xd78 <DIO_SetPinValue+0x232>
			}
		}
		else if (U8PinValueCopy == DIO_LOW)
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	88 23       	and	r24, r24
     c5a:	09 f0       	breq	.+2      	; 0xc5e <DIO_SetPinValue+0x118>
     c5c:	74 c0       	rjmp	.+232    	; 0xd46 <DIO_SetPinValue+0x200>
		{
			switch (U8PortIdcopy)
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	3d 83       	std	Y+5, r19	; 0x05
     c66:	2c 83       	std	Y+4, r18	; 0x04
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	59 f1       	breq	.+86     	; 0xcc8 <DIO_SetPinValue+0x182>
     c72:	2c 81       	ldd	r18, Y+4	; 0x04
     c74:	3d 81       	ldd	r19, Y+5	; 0x05
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	2c f4       	brge	.+10     	; 0xc86 <DIO_SetPinValue+0x140>
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	9d 81       	ldd	r25, Y+5	; 0x05
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	69 f0       	breq	.+26     	; 0xc9e <DIO_SetPinValue+0x158>
     c84:	79 c0       	rjmp	.+242    	; 0xd78 <DIO_SetPinValue+0x232>
     c86:	2c 81       	ldd	r18, Y+4	; 0x04
     c88:	3d 81       	ldd	r19, Y+5	; 0x05
     c8a:	22 30       	cpi	r18, 0x02	; 2
     c8c:	31 05       	cpc	r19, r1
     c8e:	89 f1       	breq	.+98     	; 0xcf2 <DIO_SetPinValue+0x1ac>
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	91 05       	cpc	r25, r1
     c98:	09 f4       	brne	.+2      	; 0xc9c <DIO_SetPinValue+0x156>
     c9a:	40 c0       	rjmp	.+128    	; 0xd1c <DIO_SetPinValue+0x1d6>
     c9c:	6d c0       	rjmp	.+218    	; 0xd78 <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : CLR_BIT(PORTA,U8PinIdCopy); break;
     c9e:	ab e3       	ldi	r26, 0x3B	; 59
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	eb e3       	ldi	r30, 0x3B	; 59
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_SetPinValue+0x176>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_SetPinValue+0x172>
     cc0:	80 95       	com	r24
     cc2:	84 23       	and	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	58 c0       	rjmp	.+176    	; 0xd78 <DIO_SetPinValue+0x232>
				case DIO_PORTB : CLR_BIT(PORTB,U8PinIdCopy); break;
     cc8:	a8 e3       	ldi	r26, 0x38	; 56
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_SetPinValue+0x1a0>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_SetPinValue+0x19c>
     cea:	80 95       	com	r24
     cec:	84 23       	and	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	43 c0       	rjmp	.+134    	; 0xd78 <DIO_SetPinValue+0x232>
				case DIO_PORTC : CLR_BIT(PORTC,U8PinIdCopy); break;
     cf2:	a5 e3       	ldi	r26, 0x35	; 53
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e5 e3       	ldi	r30, 0x35	; 53
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_SetPinValue+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_SetPinValue+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	2e c0       	rjmp	.+92     	; 0xd78 <DIO_SetPinValue+0x232>
				case DIO_PORTD : CLR_BIT(PORTD,U8PinIdCopy); break;
     d1c:	a2 e3       	ldi	r26, 0x32	; 50
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e2 e3       	ldi	r30, 0x32	; 50
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_SetPinValue+0x1f4>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_SetPinValue+0x1f0>
     d3e:	80 95       	com	r24
     d40:	84 23       	and	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	19 c0       	rjmp	.+50     	; 0xd78 <DIO_SetPinValue+0x232>
			}
		}
		else
			printf("ERROR SELECT HIGH OR LOW VALUE.. ");
     d46:	00 d0       	rcall	.+0      	; 0xd48 <DIO_SetPinValue+0x202>
     d48:	ed b7       	in	r30, 0x3d	; 61
     d4a:	fe b7       	in	r31, 0x3e	; 62
     d4c:	31 96       	adiw	r30, 0x01	; 1
     d4e:	80 e6       	ldi	r24, 0x60	; 96
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	80 83       	st	Z, r24
     d56:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <printf>
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0c c0       	rjmp	.+24     	; 0xd78 <DIO_SetPinValue+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
     d60:	00 d0       	rcall	.+0      	; 0xd62 <DIO_SetPinValue+0x21c>
     d62:	ed b7       	in	r30, 0x3d	; 61
     d64:	fe b7       	in	r31, 0x3e	; 62
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	82 e8       	ldi	r24, 0x82	; 130
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
     d70:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <printf>
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0

}
     d78:	27 96       	adiw	r28, 0x07	; 7
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <DIO_SetPinDirection>:



void  DIO_SetPinDirection (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinDirCopy)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	27 97       	sbiw	r28, 0x07	; 7
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	6a 83       	std	Y+2, r22	; 0x02
     da2:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	08 f0       	brcs	.+2      	; 0xdac <DIO_SetPinDirection+0x22>
     daa:	fc c0       	rjmp	.+504    	; 0xfa4 <DIO_SetPinDirection+0x21a>
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	88 30       	cpi	r24, 0x08	; 8
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <DIO_SetPinDirection+0x2a>
     db2:	f8 c0       	rjmp	.+496    	; 0xfa4 <DIO_SetPinDirection+0x21a>
	{
		if(U8PinDirCopy == DIO_OUTPUT)
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	09 f0       	breq	.+2      	; 0xdbc <DIO_SetPinDirection+0x32>
     dba:	6f c0       	rjmp	.+222    	; 0xe9a <DIO_SetPinDirection+0x110>
		{
			switch (U8PortIdcopy)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3f 83       	std	Y+7, r19	; 0x07
     dc4:	2e 83       	std	Y+6, r18	; 0x06
     dc6:	8e 81       	ldd	r24, Y+6	; 0x06
     dc8:	9f 81       	ldd	r25, Y+7	; 0x07
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	49 f1       	breq	.+82     	; 0xe22 <DIO_SetPinDirection+0x98>
     dd0:	2e 81       	ldd	r18, Y+6	; 0x06
     dd2:	3f 81       	ldd	r19, Y+7	; 0x07
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	31 05       	cpc	r19, r1
     dd8:	2c f4       	brge	.+10     	; 0xde4 <DIO_SetPinDirection+0x5a>
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	9f 81       	ldd	r25, Y+7	; 0x07
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	61 f0       	breq	.+24     	; 0xdfa <DIO_SetPinDirection+0x70>
     de2:	ec c0       	rjmp	.+472    	; 0xfbc <DIO_SetPinDirection+0x232>
     de4:	2e 81       	ldd	r18, Y+6	; 0x06
     de6:	3f 81       	ldd	r19, Y+7	; 0x07
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	71 f1       	breq	.+92     	; 0xe4a <DIO_SetPinDirection+0xc0>
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	83 30       	cpi	r24, 0x03	; 3
     df4:	91 05       	cpc	r25, r1
     df6:	e9 f1       	breq	.+122    	; 0xe72 <DIO_SetPinDirection+0xe8>
     df8:	e1 c0       	rjmp	.+450    	; 0xfbc <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : SET_BIT(DDRA,U8PinIdCopy); break;
     dfa:	aa e3       	ldi	r26, 0x3A	; 58
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ea e3       	ldi	r30, 0x3A	; 58
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_SetPinDirection+0x8e>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_SetPinDirection+0x8a>
     e1c:	84 2b       	or	r24, r20
     e1e:	8c 93       	st	X, r24
     e20:	cd c0       	rjmp	.+410    	; 0xfbc <DIO_SetPinDirection+0x232>
			case DIO_PORTB : SET_BIT(DDRB,U8PinIdCopy); break;
     e22:	a7 e3       	ldi	r26, 0x37	; 55
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e7 e3       	ldi	r30, 0x37	; 55
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_SetPinDirection+0xb6>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_SetPinDirection+0xb2>
     e44:	84 2b       	or	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	b9 c0       	rjmp	.+370    	; 0xfbc <DIO_SetPinDirection+0x232>
			case DIO_PORTC : SET_BIT(DDRC,U8PinIdCopy); break;
     e4a:	a4 e3       	ldi	r26, 0x34	; 52
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e4 e3       	ldi	r30, 0x34	; 52
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_SetPinDirection+0xde>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_SetPinDirection+0xda>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	a5 c0       	rjmp	.+330    	; 0xfbc <DIO_SetPinDirection+0x232>
			case DIO_PORTD : SET_BIT(DDRD,U8PinIdCopy); break;
     e72:	a1 e3       	ldi	r26, 0x31	; 49
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e1 e3       	ldi	r30, 0x31	; 49
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_SetPinDirection+0x106>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_SetPinDirection+0x102>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	91 c0       	rjmp	.+290    	; 0xfbc <DIO_SetPinDirection+0x232>
			}
		}
		else if (U8PinDirCopy == DIO_INPUT)
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 23       	and	r24, r24
     e9e:	09 f0       	breq	.+2      	; 0xea2 <DIO_SetPinDirection+0x118>
     ea0:	74 c0       	rjmp	.+232    	; 0xf8a <DIO_SetPinDirection+0x200>
		{
			switch (U8PortIdcopy)
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3d 83       	std	Y+5, r19	; 0x05
     eaa:	2c 83       	std	Y+4, r18	; 0x04
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	9d 81       	ldd	r25, Y+5	; 0x05
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	59 f1       	breq	.+86     	; 0xf0c <DIO_SetPinDirection+0x182>
     eb6:	2c 81       	ldd	r18, Y+4	; 0x04
     eb8:	3d 81       	ldd	r19, Y+5	; 0x05
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f4       	brge	.+10     	; 0xeca <DIO_SetPinDirection+0x140>
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	69 f0       	breq	.+26     	; 0xee2 <DIO_SetPinDirection+0x158>
     ec8:	79 c0       	rjmp	.+242    	; 0xfbc <DIO_SetPinDirection+0x232>
     eca:	2c 81       	ldd	r18, Y+4	; 0x04
     ecc:	3d 81       	ldd	r19, Y+5	; 0x05
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	89 f1       	breq	.+98     	; 0xf36 <DIO_SetPinDirection+0x1ac>
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	9d 81       	ldd	r25, Y+5	; 0x05
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <DIO_SetPinDirection+0x156>
     ede:	40 c0       	rjmp	.+128    	; 0xf60 <DIO_SetPinDirection+0x1d6>
     ee0:	6d c0       	rjmp	.+218    	; 0xfbc <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : CLR_BIT(DDRA,U8PinIdCopy); break;
     ee2:	aa e3       	ldi	r26, 0x3A	; 58
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e3       	ldi	r30, 0x3A	; 58
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_SetPinDirection+0x176>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_SetPinDirection+0x172>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	58 c0       	rjmp	.+176    	; 0xfbc <DIO_SetPinDirection+0x232>
			case DIO_PORTB : CLR_BIT(DDRB,U8PinIdCopy); break;
     f0c:	a7 e3       	ldi	r26, 0x37	; 55
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e7 e3       	ldi	r30, 0x37	; 55
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_SetPinDirection+0x1a0>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_SetPinDirection+0x19c>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	43 c0       	rjmp	.+134    	; 0xfbc <DIO_SetPinDirection+0x232>
			case DIO_PORTC : CLR_BIT(DDRC,U8PinIdCopy); break;
     f36:	a4 e3       	ldi	r26, 0x34	; 52
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e4 e3       	ldi	r30, 0x34	; 52
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_SetPinDirection+0x1ca>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_SetPinDirection+0x1c6>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	2e c0       	rjmp	.+92     	; 0xfbc <DIO_SetPinDirection+0x232>
			case DIO_PORTD : CLR_BIT(DDRD,U8PinIdCopy); break;
     f60:	a1 e3       	ldi	r26, 0x31	; 49
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e1 e3       	ldi	r30, 0x31	; 49
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_SetPinDirection+0x1f4>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_SetPinDirection+0x1f0>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	19 c0       	rjmp	.+50     	; 0xfbc <DIO_SetPinDirection+0x232>
			}
		}else
			printf("ERROR SELECT OUTPUT OR INPUT VALUE.. ");
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <DIO_SetPinDirection+0x202>
     f8c:	ed b7       	in	r30, 0x3d	; 61
     f8e:	fe b7       	in	r31, 0x3e	; 62
     f90:	31 96       	adiw	r30, 0x01	; 1
     f92:	86 eb       	ldi	r24, 0xB6	; 182
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
     f9a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <printf>
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0c c0       	rjmp	.+24     	; 0xfbc <DIO_SetPinDirection+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <DIO_SetPinDirection+0x21c>
     fa6:	ed b7       	in	r30, 0x3d	; 61
     fa8:	fe b7       	in	r31, 0x3e	; 62
     faa:	31 96       	adiw	r30, 0x01	; 1
     fac:	82 e8       	ldi	r24, 0x82	; 130
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <printf>
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
}
     fbc:	27 96       	adiw	r28, 0x07	; 7
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DIO_GetPinValue>:


u8    DIO_GetPinValue  (u8 U8PortIdCopy , u8 U8PinIdCopy)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <DIO_GetPinValue+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DIO_GetPinValue+0x8>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_GetPinValue+0xa>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	6b 83       	std	Y+3, r22	; 0x03
	if((U8PortIdCopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <DIO_GetPinValue+0x1a>
     fe6:	70 c0       	rjmp	.+224    	; 0x10c8 <DIO_GetPinValue+0xfa>
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	88 30       	cpi	r24, 0x08	; 8
     fec:	08 f0       	brcs	.+2      	; 0xff0 <DIO_GetPinValue+0x22>
     fee:	6c c0       	rjmp	.+216    	; 0x10c8 <DIO_GetPinValue+0xfa>
	{
		u8 PinValue=0;
     ff0:	19 82       	std	Y+1, r1	; 0x01

			switch (U8PortIdCopy)
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3d 83       	std	Y+5, r19	; 0x05
     ffa:	2c 83       	std	Y+4, r18	; 0x04
     ffc:	4c 81       	ldd	r20, Y+4	; 0x04
     ffe:	5d 81       	ldd	r21, Y+5	; 0x05
    1000:	41 30       	cpi	r20, 0x01	; 1
    1002:	51 05       	cpc	r21, r1
    1004:	41 f1       	breq	.+80     	; 0x1056 <DIO_GetPinValue+0x88>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	91 05       	cpc	r25, r1
    100e:	34 f4       	brge	.+12     	; 0x101c <DIO_GetPinValue+0x4e>
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	3d 81       	ldd	r19, Y+5	; 0x05
    1014:	21 15       	cp	r18, r1
    1016:	31 05       	cpc	r19, r1
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_GetPinValue+0x64>
    101a:	52 c0       	rjmp	.+164    	; 0x10c0 <DIO_GetPinValue+0xf2>
    101c:	4c 81       	ldd	r20, Y+4	; 0x04
    101e:	5d 81       	ldd	r21, Y+5	; 0x05
    1020:	42 30       	cpi	r20, 0x02	; 2
    1022:	51 05       	cpc	r21, r1
    1024:	51 f1       	breq	.+84     	; 0x107a <DIO_GetPinValue+0xac>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	b9 f1       	breq	.+110    	; 0x109e <DIO_GetPinValue+0xd0>
    1030:	47 c0       	rjmp	.+142    	; 0x10c0 <DIO_GetPinValue+0xf2>
			{
				case DIO_PORTA : PinValue= GET_BIT(PINA,U8PinIdCopy); break;
    1032:	e9 e3       	ldi	r30, 0x39	; 57
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a9 01       	movw	r20, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_GetPinValue+0x7c>
    1046:	55 95       	asr	r21
    1048:	47 95       	ror	r20
    104a:	8a 95       	dec	r24
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_GetPinValue+0x78>
    104e:	ca 01       	movw	r24, r20
    1050:	81 70       	andi	r24, 0x01	; 1
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	35 c0       	rjmp	.+106    	; 0x10c0 <DIO_GetPinValue+0xf2>
				case DIO_PORTB : PinValue= GET_BIT(PINB,U8PinIdCopy); break;
    1056:	e6 e3       	ldi	r30, 0x36	; 54
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a9 01       	movw	r20, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_GetPinValue+0xa0>
    106a:	55 95       	asr	r21
    106c:	47 95       	ror	r20
    106e:	8a 95       	dec	r24
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_GetPinValue+0x9c>
    1072:	ca 01       	movw	r24, r20
    1074:	81 70       	andi	r24, 0x01	; 1
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	23 c0       	rjmp	.+70     	; 0x10c0 <DIO_GetPinValue+0xf2>
				case DIO_PORTC : PinValue= GET_BIT(PINC,U8PinIdCopy); break;
    107a:	e3 e3       	ldi	r30, 0x33	; 51
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a9 01       	movw	r20, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_GetPinValue+0xc4>
    108e:	55 95       	asr	r21
    1090:	47 95       	ror	r20
    1092:	8a 95       	dec	r24
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_GetPinValue+0xc0>
    1096:	ca 01       	movw	r24, r20
    1098:	81 70       	andi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	11 c0       	rjmp	.+34     	; 0x10c0 <DIO_GetPinValue+0xf2>
				case DIO_PORTD : PinValue= GET_BIT(PIND,U8PinIdCopy); break;
    109e:	e0 e3       	ldi	r30, 0x30	; 48
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_GetPinValue+0xe8>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_GetPinValue+0xe4>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
			}
		return PinValue;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	8e 83       	std	Y+6, r24	; 0x06

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
}
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	0c c0       	rjmp	.+24     	; 0x10e0 <DIO_GetPinValue+0x112>
				case DIO_PORTD : PinValue= GET_BIT(PIND,U8PinIdCopy); break;
			}
		return PinValue;

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <DIO_GetPinValue+0xfc>
    10ca:	ed b7       	in	r30, 0x3d	; 61
    10cc:	fe b7       	in	r31, 0x3e	; 62
    10ce:	31 96       	adiw	r30, 0x01	; 1
    10d0:	82 e8       	ldi	r24, 0x82	; 130
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
    10d8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <printf>
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
}
    10e0:	26 96       	adiw	r28, 0x06	; 6
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <DIO_SetPortValue>:


void  DIO_SetPortValue (u8 U8PortIdcopy ,u8 U8PinValueCopy)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <DIO_SetPortValue+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <DIO_SetPortValue+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	98 f5       	brcc	.+102    	; 0x116e <DIO_SetPortValue+0x7c>
	{

			switch (U8PortIdcopy)
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3c 83       	std	Y+4, r19	; 0x04
    1110:	2b 83       	std	Y+3, r18	; 0x03
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	d1 f0       	breq	.+52     	; 0x1150 <DIO_SetPortValue+0x5e>
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	3c 81       	ldd	r19, Y+4	; 0x04
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <DIO_SetPortValue+0x3e>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	61 f0       	breq	.+24     	; 0x1146 <DIO_SetPortValue+0x54>
    112e:	2b c0       	rjmp	.+86     	; 0x1186 <DIO_SetPortValue+0x94>
    1130:	2b 81       	ldd	r18, Y+3	; 0x03
    1132:	3c 81       	ldd	r19, Y+4	; 0x04
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	81 f0       	breq	.+32     	; 0x115a <DIO_SetPortValue+0x68>
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	81 f0       	breq	.+32     	; 0x1164 <DIO_SetPortValue+0x72>
    1144:	20 c0       	rjmp	.+64     	; 0x1186 <DIO_SetPortValue+0x94>
			{
				case DIO_PORTA : SET_PORT(PORTA,U8PinValueCopy); break;
    1146:	eb e3       	ldi	r30, 0x3B	; 59
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
    114e:	1b c0       	rjmp	.+54     	; 0x1186 <DIO_SetPortValue+0x94>
				case DIO_PORTB : SET_PORT(PORTB,U8PinValueCopy); break;
    1150:	e8 e3       	ldi	r30, 0x38	; 56
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 83       	st	Z, r24
    1158:	16 c0       	rjmp	.+44     	; 0x1186 <DIO_SetPortValue+0x94>
				case DIO_PORTC : SET_PORT(PORTC,U8PinValueCopy); break;
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	80 83       	st	Z, r24
    1162:	11 c0       	rjmp	.+34     	; 0x1186 <DIO_SetPortValue+0x94>
				case DIO_PORTD : SET_PORT(PORTD,U8PinValueCopy); break;
    1164:	e2 e3       	ldi	r30, 0x32	; 50
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	80 83       	st	Z, r24
    116c:	0c c0       	rjmp	.+24     	; 0x1186 <DIO_SetPortValue+0x94>
			}



	}else
		printf("ERROR SELECTION PORTS FROM 0--3...");
    116e:	00 d0       	rcall	.+0      	; 0x1170 <DIO_SetPortValue+0x7e>
    1170:	ed b7       	in	r30, 0x3d	; 61
    1172:	fe b7       	in	r31, 0x3e	; 62
    1174:	31 96       	adiw	r30, 0x01	; 1
    1176:	8c ed       	ldi	r24, 0xDC	; 220
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
    117e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <printf>
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0


}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <DIO_SetPortDirection>:
void  DIO_SetPortDirection (u8 U8PortIdcopy ,u8 U8PinDirCopy)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <DIO_SetPortDirection+0x6>
    119a:	00 d0       	rcall	.+0      	; 0x119c <DIO_SetPortDirection+0x8>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	98 f5       	brcc	.+102    	; 0x1210 <DIO_SetPortDirection+0x7c>
	{

			switch (U8PortIdcopy)
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3c 83       	std	Y+4, r19	; 0x04
    11b2:	2b 83       	std	Y+3, r18	; 0x03
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	91 05       	cpc	r25, r1
    11bc:	d1 f0       	breq	.+52     	; 0x11f2 <DIO_SetPortDirection+0x5e>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	2c f4       	brge	.+10     	; 0x11d2 <DIO_SetPortDirection+0x3e>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	61 f0       	breq	.+24     	; 0x11e8 <DIO_SetPortDirection+0x54>
    11d0:	2b c0       	rjmp	.+86     	; 0x1228 <DIO_SetPortDirection+0x94>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	81 f0       	breq	.+32     	; 0x11fc <DIO_SetPortDirection+0x68>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	91 05       	cpc	r25, r1
    11e4:	81 f0       	breq	.+32     	; 0x1206 <DIO_SetPortDirection+0x72>
    11e6:	20 c0       	rjmp	.+64     	; 0x1228 <DIO_SetPortDirection+0x94>
			{
			case DIO_PORTA : SET_PORT(DDRA,0XFF); break;
    11e8:	ea e3       	ldi	r30, 0x3A	; 58
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	80 83       	st	Z, r24
    11f0:	1b c0       	rjmp	.+54     	; 0x1228 <DIO_SetPortDirection+0x94>
			case DIO_PORTB : SET_PORT(DDRB,0XFF); break;
    11f2:	e7 e3       	ldi	r30, 0x37	; 55
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	80 83       	st	Z, r24
    11fa:	16 c0       	rjmp	.+44     	; 0x1228 <DIO_SetPortDirection+0x94>
			case DIO_PORTC : SET_PORT(DDRC,0XFF); break;
    11fc:	e4 e3       	ldi	r30, 0x34	; 52
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	80 83       	st	Z, r24
    1204:	11 c0       	rjmp	.+34     	; 0x1228 <DIO_SetPortDirection+0x94>
			case DIO_PORTD : SET_PORT(DDRD,0XFF); break;
    1206:	e1 e3       	ldi	r30, 0x31	; 49
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	80 83       	st	Z, r24
    120e:	0c c0       	rjmp	.+24     	; 0x1228 <DIO_SetPortDirection+0x94>
			}


	}else
		printf("ERROR SELECTION PORTS FROM 0--3....");
    1210:	00 d0       	rcall	.+0      	; 0x1212 <DIO_SetPortDirection+0x7e>
    1212:	ed b7       	in	r30, 0x3d	; 61
    1214:	fe b7       	in	r31, 0x3e	; 62
    1216:	31 96       	adiw	r30, 0x01	; 1
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
    1220:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <printf>
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0

}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <LCD_VoidSendChar>:




void LCD_VoidSendChar(u8 U8DataCopy)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	2f 97       	sbiw	r28, 0x0f	; 15
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	6f ef       	ldi	r22, 0xFF	; 255
    1250:	0e 94 ca 08 	call	0x1194	; 0x1194 <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	62 e0       	ldi	r22, 0x02	; 2
    126c:	41 e0       	ldi	r20, 0x01	; 1
    126e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_HIGH);
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	41 e0       	ldi	r20, 0x01	; 1
    1278:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8DataCopy);
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	6f 85       	ldd	r22, Y+15	; 0x0f
    128a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	62 e0       	ldi	r22, 0x02	; 2
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a0 ea       	ldi	r26, 0xA0	; 160
    129e:	b1 e4       	ldi	r27, 0x41	; 65
    12a0:	8b 87       	std	Y+11, r24	; 0x0b
    12a2:	9c 87       	std	Y+12, r25	; 0x0c
    12a4:	ad 87       	std	Y+13, r26	; 0x0d
    12a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a ef       	ldi	r20, 0xFA	; 250
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8f 83       	std	Y+7, r24	; 0x07
    12c2:	98 87       	std	Y+8, r25	; 0x08
    12c4:	a9 87       	std	Y+9, r26	; 0x09
    12c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	6b 85       	ldd	r22, Y+11	; 0x0b
    1304:	7c 85       	ldd	r23, Y+12	; 0x0c
    1306:	8d 85       	ldd	r24, Y+13	; 0x0d
    1308:	9e 85       	ldd	r25, Y+14	; 0x0e
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	0f c0       	rjmp	.+30     	; 0x134a <LCD_VoidSendChar+0x114>
    132c:	88 ec       	ldi	r24, 0xC8	; 200
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_VoidSendChar+0x102>
    133c:	9c 83       	std	Y+4, r25	; 0x04
    133e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <LCD_VoidSendChar+0xf6>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	9a 85       	ldd	r25, Y+10	; 0x0a
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCD_VoidSendChar+0x13e>
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	62 e0       	ldi	r22, 0x02	; 2
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>


}
    1386:	2f 96       	adiw	r28, 0x0f	; 15
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 U8CommandCopy)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	2f 97       	sbiw	r28, 0x0f	; 15
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	6f ef       	ldi	r22, 0xFF	; 255
    13b2:	0e 94 ca 08 	call	0x1194	; 0x1194 <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	62 e0       	ldi	r22, 0x02	; 2
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8CommandCopy);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    13ec:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 ea       	ldi	r26, 0xA0	; 160
    1400:	b1 e4       	ldi	r27, 0x41	; 65
    1402:	8b 87       	std	Y+11, r24	; 0x0b
    1404:	9c 87       	std	Y+12, r25	; 0x0c
    1406:	ad 87       	std	Y+13, r26	; 0x0d
    1408:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	6b 85       	ldd	r22, Y+11	; 0x0b
    140c:	7c 85       	ldd	r23, Y+12	; 0x0c
    140e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1410:	9e 85       	ldd	r25, Y+14	; 0x0e
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a ef       	ldi	r20, 0xFA	; 250
    1418:	54 e4       	ldi	r21, 0x44	; 68
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8f 83       	std	Y+7, r24	; 0x07
    1424:	98 87       	std	Y+8, r25	; 0x08
    1426:	a9 87       	std	Y+9, r26	; 0x09
    1428:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    142a:	6f 81       	ldd	r22, Y+7	; 0x07
    142c:	78 85       	ldd	r23, Y+8	; 0x08
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	9a 85       	ldd	r25, Y+10	; 0x0a
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	9a 85       	ldd	r25, Y+10	; 0x0a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	6b 85       	ldd	r22, Y+11	; 0x0b
    1466:	7c 85       	ldd	r23, Y+12	; 0x0c
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <LCD_VoidSendCommand+0x114>
    148e:	88 ec       	ldi	r24, 0xC8	; 200
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9c 83       	std	Y+4, r25	; 0x04
    1494:	8b 83       	std	Y+3, r24	; 0x03
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <LCD_VoidSendCommand+0x102>
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <LCD_VoidSendCommand+0xf6>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_VoidSendCommand+0x13e>
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	62 e0       	ldi	r22, 0x02	; 2
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>


}
    14e8:	2f 96       	adiw	r28, 0x0f	; 15
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <LCD_voidSendData>:
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <LCD_voidSendData+0x6>
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	8a 83       	std	Y+2, r24	; 0x02
    150a:	19 82       	std	Y+1, r1	; 0x01
    150c:	0e c0       	rjmp	.+28     	; 0x152a <LCD_voidSendData+0x30>
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	fc 01       	movw	r30, r24
    151a:	e2 0f       	add	r30, r18
    151c:	f3 1f       	adc	r31, r19
    151e:	80 81       	ld	r24, Z
    1520:	0e 94 1b 09 	call	0x1236	; 0x1236 <LCD_VoidSendChar>
    	  Local_u8Counter ++;
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	89 83       	std	Y+1, r24	; 0x01


}
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	fc 01       	movw	r30, r24
    1536:	e2 0f       	add	r30, r18
    1538:	f3 1f       	adc	r31, r19
    153a:	80 81       	ld	r24, Z
    153c:	88 23       	and	r24, r24
    153e:	39 f7       	brne	.-50     	; 0x150e <LCD_voidSendData+0x14>
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    	  Local_u8Counter ++;
      }
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <LCD_Voidinit>:
void LCD_Voidinit(void)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	e8 97       	sbiw	r28, 0x38	; 56
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e2       	ldi	r26, 0x20	; 32
    158e:	b2 e4       	ldi	r27, 0x42	; 66
    1590:	8d ab       	std	Y+53, r24	; 0x35
    1592:	9e ab       	std	Y+54, r25	; 0x36
    1594:	af ab       	std	Y+55, r26	; 0x37
    1596:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	6d a9       	ldd	r22, Y+53	; 0x35
    159a:	7e a9       	ldd	r23, Y+54	; 0x36
    159c:	8f a9       	ldd	r24, Y+55	; 0x37
    159e:	98 ad       	ldd	r25, Y+56	; 0x38
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a ef       	ldi	r20, 0xFA	; 250
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	89 ab       	std	Y+49, r24	; 0x31
    15b2:	9a ab       	std	Y+50, r25	; 0x32
    15b4:	ab ab       	std	Y+51, r26	; 0x33
    15b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15b8:	69 a9       	ldd	r22, Y+49	; 0x31
    15ba:	7a a9       	ldd	r23, Y+50	; 0x32
    15bc:	8b a9       	ldd	r24, Y+51	; 0x33
    15be:	9c a9       	ldd	r25, Y+52	; 0x34
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <LCD_Voidinit+0x8e>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	98 ab       	std	Y+48, r25	; 0x30
    15d6:	8f a7       	std	Y+47, r24	; 0x2f
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <LCD_Voidinit+0x10c>
	else if (__tmp > 65535)
    15da:	69 a9       	ldd	r22, Y+49	; 0x31
    15dc:	7a a9       	ldd	r23, Y+50	; 0x32
    15de:	8b a9       	ldd	r24, Y+51	; 0x33
    15e0:	9c a9       	ldd	r25, Y+52	; 0x34
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <LCD_Voidinit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	6d a9       	ldd	r22, Y+53	; 0x35
    15f4:	7e a9       	ldd	r23, Y+54	; 0x36
    15f6:	8f a9       	ldd	r24, Y+55	; 0x37
    15f8:	98 ad       	ldd	r25, Y+56	; 0x38
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	98 ab       	std	Y+48, r25	; 0x30
    1618:	8f a7       	std	Y+47, r24	; 0x2f
    161a:	0f c0       	rjmp	.+30     	; 0x163a <LCD_Voidinit+0xee>
    161c:	88 ec       	ldi	r24, 0xC8	; 200
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9e a7       	std	Y+46, r25	; 0x2e
    1622:	8d a7       	std	Y+45, r24	; 0x2d
    1624:	8d a5       	ldd	r24, Y+45	; 0x2d
    1626:	9e a5       	ldd	r25, Y+46	; 0x2e
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCD_Voidinit+0xdc>
    162c:	9e a7       	std	Y+46, r25	; 0x2e
    162e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8f a5       	ldd	r24, Y+47	; 0x2f
    1632:	98 a9       	ldd	r25, Y+48	; 0x30
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	98 ab       	std	Y+48, r25	; 0x30
    1638:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8f a5       	ldd	r24, Y+47	; 0x2f
    163c:	98 a9       	ldd	r25, Y+48	; 0x30
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <LCD_Voidinit+0xd0>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <LCD_Voidinit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	69 a9       	ldd	r22, Y+49	; 0x31
    1646:	7a a9       	ldd	r23, Y+50	; 0x32
    1648:	8b a9       	ldd	r24, Y+51	; 0x33
    164a:	9c a9       	ldd	r25, Y+52	; 0x34
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	98 ab       	std	Y+48, r25	; 0x30
    1656:	8f a7       	std	Y+47, r24	; 0x2f
    1658:	8f a5       	ldd	r24, Y+47	; 0x2f
    165a:	98 a9       	ldd	r25, Y+48	; 0x30
    165c:	9c a7       	std	Y+44, r25	; 0x2c
    165e:	8b a7       	std	Y+43, r24	; 0x2b
    1660:	8b a5       	ldd	r24, Y+43	; 0x2b
    1662:	9c a5       	ldd	r25, Y+44	; 0x2c
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_Voidinit+0x118>
    1668:	9c a7       	std	Y+44, r25	; 0x2c
    166a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	/*Function set command: 2 lines(N = 1), 5*8 Font size (F = 0 )*/
	LCD_VoidSendCommand(FUNCTION_SET);
    166c:	88 e3       	ldi	r24, 0x38	; 56
    166e:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCD_VoidSendCommand>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e8       	ldi	r26, 0x80	; 128
    1678:	bf e3       	ldi	r27, 0x3F	; 63
    167a:	8f a3       	std	Y+39, r24	; 0x27
    167c:	98 a7       	std	Y+40, r25	; 0x28
    167e:	a9 a7       	std	Y+41, r26	; 0x29
    1680:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1682:	6f a1       	ldd	r22, Y+39	; 0x27
    1684:	78 a5       	ldd	r23, Y+40	; 0x28
    1686:	89 a5       	ldd	r24, Y+41	; 0x29
    1688:	9a a5       	ldd	r25, Y+42	; 0x2a
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4a ef       	ldi	r20, 0xFA	; 250
    1690:	54 e4       	ldi	r21, 0x44	; 68
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	8b a3       	std	Y+35, r24	; 0x23
    169c:	9c a3       	std	Y+36, r25	; 0x24
    169e:	ad a3       	std	Y+37, r26	; 0x25
    16a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16a2:	6b a1       	ldd	r22, Y+35	; 0x23
    16a4:	7c a1       	ldd	r23, Y+36	; 0x24
    16a6:	8d a1       	ldd	r24, Y+37	; 0x25
    16a8:	9e a1       	ldd	r25, Y+38	; 0x26
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <LCD_Voidinit+0x178>
		__ticks = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9a a3       	std	Y+34, r25	; 0x22
    16c0:	89 a3       	std	Y+33, r24	; 0x21
    16c2:	3f c0       	rjmp	.+126    	; 0x1742 <LCD_Voidinit+0x1f6>
	else if (__tmp > 65535)
    16c4:	6b a1       	ldd	r22, Y+35	; 0x23
    16c6:	7c a1       	ldd	r23, Y+36	; 0x24
    16c8:	8d a1       	ldd	r24, Y+37	; 0x25
    16ca:	9e a1       	ldd	r25, Y+38	; 0x26
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d8:	18 16       	cp	r1, r24
    16da:	4c f5       	brge	.+82     	; 0x172e <LCD_Voidinit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	6f a1       	ldd	r22, Y+39	; 0x27
    16de:	78 a5       	ldd	r23, Y+40	; 0x28
    16e0:	89 a5       	ldd	r24, Y+41	; 0x29
    16e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9a a3       	std	Y+34, r25	; 0x22
    1702:	89 a3       	std	Y+33, r24	; 0x21
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <LCD_Voidinit+0x1d8>
    1706:	88 ec       	ldi	r24, 0xC8	; 200
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	98 a3       	std	Y+32, r25	; 0x20
    170c:	8f 8f       	std	Y+31, r24	; 0x1f
    170e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1710:	98 a1       	ldd	r25, Y+32	; 0x20
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_Voidinit+0x1c6>
    1716:	98 a3       	std	Y+32, r25	; 0x20
    1718:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	89 a1       	ldd	r24, Y+33	; 0x21
    171c:	9a a1       	ldd	r25, Y+34	; 0x22
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9a a3       	std	Y+34, r25	; 0x22
    1722:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	89 a1       	ldd	r24, Y+33	; 0x21
    1726:	9a a1       	ldd	r25, Y+34	; 0x22
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f7       	brne	.-38     	; 0x1706 <LCD_Voidinit+0x1ba>
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <LCD_Voidinit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	6b a1       	ldd	r22, Y+35	; 0x23
    1730:	7c a1       	ldd	r23, Y+36	; 0x24
    1732:	8d a1       	ldd	r24, Y+37	; 0x25
    1734:	9e a1       	ldd	r25, Y+38	; 0x26
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9a a3       	std	Y+34, r25	; 0x22
    1740:	89 a3       	std	Y+33, r24	; 0x21
    1742:	89 a1       	ldd	r24, Y+33	; 0x21
    1744:	9a a1       	ldd	r25, Y+34	; 0x22
    1746:	9e 8f       	std	Y+30, r25	; 0x1e
    1748:	8d 8f       	std	Y+29, r24	; 0x1d
    174a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <LCD_Voidinit+0x202>
    1752:	9e 8f       	std	Y+30, r25	; 0x1e
    1754:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display on off control: display enable, disable cursor, no blink cursor*/
	LCD_VoidSendCommand(DISPLAY_SET);
    1756:	8c e0       	ldi	r24, 0x0C	; 12
    1758:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCD_VoidSendCommand>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e8       	ldi	r26, 0x80	; 128
    1762:	bf e3       	ldi	r27, 0x3F	; 63
    1764:	89 8f       	std	Y+25, r24	; 0x19
    1766:	9a 8f       	std	Y+26, r25	; 0x1a
    1768:	ab 8f       	std	Y+27, r26	; 0x1b
    176a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	69 8d       	ldd	r22, Y+25	; 0x19
    176e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1772:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	4a ef       	ldi	r20, 0xFA	; 250
    177a:	54 e4       	ldi	r21, 0x44	; 68
    177c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	8d 8b       	std	Y+21, r24	; 0x15
    1786:	9e 8b       	std	Y+22, r25	; 0x16
    1788:	af 8b       	std	Y+23, r26	; 0x17
    178a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    178c:	6d 89       	ldd	r22, Y+21	; 0x15
    178e:	7e 89       	ldd	r23, Y+22	; 0x16
    1790:	8f 89       	ldd	r24, Y+23	; 0x17
    1792:	98 8d       	ldd	r25, Y+24	; 0x18
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a0:	88 23       	and	r24, r24
    17a2:	2c f4       	brge	.+10     	; 0x17ae <LCD_Voidinit+0x262>
		__ticks = 1;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9c 8b       	std	Y+20, r25	; 0x14
    17aa:	8b 8b       	std	Y+19, r24	; 0x13
    17ac:	3f c0       	rjmp	.+126    	; 0x182c <LCD_Voidinit+0x2e0>
	else if (__tmp > 65535)
    17ae:	6d 89       	ldd	r22, Y+21	; 0x15
    17b0:	7e 89       	ldd	r23, Y+22	; 0x16
    17b2:	8f 89       	ldd	r24, Y+23	; 0x17
    17b4:	98 8d       	ldd	r25, Y+24	; 0x18
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	4c f5       	brge	.+82     	; 0x1818 <LCD_Voidinit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c6:	69 8d       	ldd	r22, Y+25	; 0x19
    17c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e2       	ldi	r20, 0x20	; 32
    17d4:	51 e4       	ldi	r21, 0x41	; 65
    17d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9c 8b       	std	Y+20, r25	; 0x14
    17ec:	8b 8b       	std	Y+19, r24	; 0x13
    17ee:	0f c0       	rjmp	.+30     	; 0x180e <LCD_Voidinit+0x2c2>
    17f0:	88 ec       	ldi	r24, 0xC8	; 200
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9a 8b       	std	Y+18, r25	; 0x12
    17f6:	89 8b       	std	Y+17, r24	; 0x11
    17f8:	89 89       	ldd	r24, Y+17	; 0x11
    17fa:	9a 89       	ldd	r25, Y+18	; 0x12
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCD_Voidinit+0x2b0>
    1800:	9a 8b       	std	Y+18, r25	; 0x12
    1802:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1804:	8b 89       	ldd	r24, Y+19	; 0x13
    1806:	9c 89       	ldd	r25, Y+20	; 0x14
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	9c 8b       	std	Y+20, r25	; 0x14
    180c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180e:	8b 89       	ldd	r24, Y+19	; 0x13
    1810:	9c 89       	ldd	r25, Y+20	; 0x14
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	69 f7       	brne	.-38     	; 0x17f0 <LCD_Voidinit+0x2a4>
    1816:	14 c0       	rjmp	.+40     	; 0x1840 <LCD_Voidinit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1818:	6d 89       	ldd	r22, Y+21	; 0x15
    181a:	7e 89       	ldd	r23, Y+22	; 0x16
    181c:	8f 89       	ldd	r24, Y+23	; 0x17
    181e:	98 8d       	ldd	r25, Y+24	; 0x18
    1820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9c 8b       	std	Y+20, r25	; 0x14
    182a:	8b 8b       	std	Y+19, r24	; 0x13
    182c:	8b 89       	ldd	r24, Y+19	; 0x13
    182e:	9c 89       	ldd	r25, Y+20	; 0x14
    1830:	98 8b       	std	Y+16, r25	; 0x10
    1832:	8f 87       	std	Y+15, r24	; 0x0f
    1834:	8f 85       	ldd	r24, Y+15	; 0x0f
    1836:	98 89       	ldd	r25, Y+16	; 0x10
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_Voidinit+0x2ec>
    183c:	98 8b       	std	Y+16, r25	; 0x10
    183e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Clear display*/
	LCD_VoidSendCommand(CLEAR);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCD_VoidSendCommand>
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e8       	ldi	r26, 0x80	; 128
    184c:	bf e3       	ldi	r27, 0x3F	; 63
    184e:	8b 87       	std	Y+11, r24	; 0x0b
    1850:	9c 87       	std	Y+12, r25	; 0x0c
    1852:	ad 87       	std	Y+13, r26	; 0x0d
    1854:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1856:	6b 85       	ldd	r22, Y+11	; 0x0b
    1858:	7c 85       	ldd	r23, Y+12	; 0x0c
    185a:	8d 85       	ldd	r24, Y+13	; 0x0d
    185c:	9e 85       	ldd	r25, Y+14	; 0x0e
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	4a ef       	ldi	r20, 0xFA	; 250
    1864:	54 e4       	ldi	r21, 0x44	; 68
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	8f 83       	std	Y+7, r24	; 0x07
    1870:	98 87       	std	Y+8, r25	; 0x08
    1872:	a9 87       	std	Y+9, r26	; 0x09
    1874:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1876:	6f 81       	ldd	r22, Y+7	; 0x07
    1878:	78 85       	ldd	r23, Y+8	; 0x08
    187a:	89 85       	ldd	r24, Y+9	; 0x09
    187c:	9a 85       	ldd	r25, Y+10	; 0x0a
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e8       	ldi	r20, 0x80	; 128
    1884:	5f e3       	ldi	r21, 0x3F	; 63
    1886:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    188a:	88 23       	and	r24, r24
    188c:	2c f4       	brge	.+10     	; 0x1898 <LCD_Voidinit+0x34c>
		__ticks = 1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9e 83       	std	Y+6, r25	; 0x06
    1894:	8d 83       	std	Y+5, r24	; 0x05
    1896:	3f c0       	rjmp	.+126    	; 0x1916 <LCD_Voidinit+0x3ca>
	else if (__tmp > 65535)
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	3f ef       	ldi	r19, 0xFF	; 255
    18a4:	4f e7       	ldi	r20, 0x7F	; 127
    18a6:	57 e4       	ldi	r21, 0x47	; 71
    18a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ac:	18 16       	cp	r1, r24
    18ae:	4c f5       	brge	.+82     	; 0x1902 <LCD_Voidinit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e2       	ldi	r20, 0x20	; 32
    18be:	51 e4       	ldi	r21, 0x41	; 65
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	9e 83       	std	Y+6, r25	; 0x06
    18d6:	8d 83       	std	Y+5, r24	; 0x05
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <LCD_Voidinit+0x3ac>
    18da:	88 ec       	ldi	r24, 0xC8	; 200
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9c 83       	std	Y+4, r25	; 0x04
    18e0:	8b 83       	std	Y+3, r24	; 0x03
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <LCD_Voidinit+0x39a>
    18ea:	9c 83       	std	Y+4, r25	; 0x04
    18ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	69 f7       	brne	.-38     	; 0x18da <LCD_Voidinit+0x38e>
    1900:	14 c0       	rjmp	.+40     	; 0x192a <LCD_Voidinit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1902:	6f 81       	ldd	r22, Y+7	; 0x07
    1904:	78 85       	ldd	r23, Y+8	; 0x08
    1906:	89 85       	ldd	r24, Y+9	; 0x09
    1908:	9a 85       	ldd	r25, Y+10	; 0x0a
    190a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_Voidinit+0x3d6>
    1926:	9a 83       	std	Y+2, r25	; 0x02
    1928:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    192a:	e8 96       	adiw	r28, 0x38	; 56
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <KEYPAD_VoidInit>:
#include "../../MCAL/DIO/DIO.h"
#include "avr/delay.h"


void KEYPAD_VoidInit(void)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
	/*step1 configuring rows direction and pullup ressistor(internal)....	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_INPUT);
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_INPUT);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_INPUT);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	62 e0       	ldi	r22, 0x02	; 2
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_INPUT);
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	63 e0       	ldi	r22, 0x03	; 3
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_HIGH);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_HIGH);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_HIGH);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	62 e0       	ldi	r22, 0x02	; 2
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_HIGH);
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	63 e0       	ldi	r22, 0x03	; 3
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>


	/*STEP2 CONFIGURING COLUMNS DIRECTION AND INITIALING WITH HIGH...	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_OUTPUT);
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	64 e0       	ldi	r22, 0x04	; 4
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_OUTPUT);
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	65 e0       	ldi	r22, 0x05	; 5
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_OUTPUT);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	66 e0       	ldi	r22, 0x06	; 6
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_OUTPUT);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	67 e0       	ldi	r22, 0x07	; 7
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_HIGH);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	64 e0       	ldi	r22, 0x04	; 4
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_HIGH);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	65 e0       	ldi	r22, 0x05	; 5
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_HIGH);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	66 e0       	ldi	r22, 0x06	; 6
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_HIGH);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	67 e0       	ldi	r22, 0x07	; 7
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <KEYPAD_U8GetPressedKey>:



u8 KEYPAD_U8GetPressedKey(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	af 97       	sbiw	r28, 0x2f	; 47
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61

	u8 U8RowLOCAL=0;
    19fe:	19 8a       	std	Y+17, r1	; 0x11
	u8 U8ColumnLocal=0;
    1a00:	18 8a       	std	Y+16, r1	; 0x10

	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    1a02:	1a 8a       	std	Y+18, r1	; 0x12
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	8b 8b       	std	Y+19, r24	; 0x13
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	8c 8b       	std	Y+20, r24	; 0x14
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	8d 8b       	std	Y+21, r24	; 0x15
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    1a10:	84 e0       	ldi	r24, 0x04	; 4
    1a12:	8e 8b       	std	Y+22, r24	; 0x16
    1a14:	85 e0       	ldi	r24, 0x05	; 5
    1a16:	8f 8b       	std	Y+23, r24	; 0x17
    1a18:	86 e0       	ldi	r24, 0x06	; 6
    1a1a:	88 8f       	std	Y+24, r24	; 0x18
    1a1c:	87 e0       	ldi	r24, 0x07	; 7
    1a1e:	89 8f       	std	Y+25, r24	; 0x19



     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    1a20:	18 8a       	std	Y+16, r1	; 0x10
    1a22:	f3 c0       	rjmp	.+486    	; 0x1c0a <KEYPAD_U8GetPressedKey+0x220>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);
    1a24:	88 89       	ldd	r24, Y+16	; 0x10
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	46 96       	adiw	r24, 0x16	; 22
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e2 0f       	add	r30, r18
    1a32:	f3 1f       	adc	r31, r19
    1a34:	90 81       	ld	r25, Z
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	69 2f       	mov	r22, r25
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    1a40:	19 8a       	std	Y+17, r1	; 0x11
    1a42:	ce c0       	rjmp	.+412    	; 0x1be0 <KEYPAD_U8GetPressedKey+0x1f6>
    	 {
    		 u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    1a44:	89 89       	ldd	r24, Y+17	; 0x11
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	42 96       	adiw	r24, 0x12	; 18
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e2 0f       	add	r30, r18
    1a52:	f3 1f       	adc	r31, r19
    1a54:	90 81       	ld	r25, Z
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	69 2f       	mov	r22, r25
    1a5a:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_GetPinValue>
    1a5e:	8f 87       	std	Y+15, r24	; 0x0f
    		 if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    1a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a62:	88 23       	and	r24, r24
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <KEYPAD_U8GetPressedKey+0x7e>
    1a66:	b9 c0       	rjmp	.+370    	; 0x1bda <KEYPAD_U8GetPressedKey+0x1f0>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a8 e4       	ldi	r26, 0x48	; 72
    1a6e:	b2 e4       	ldi	r27, 0x42	; 66
    1a70:	8b 87       	std	Y+11, r24	; 0x0b
    1a72:	9c 87       	std	Y+12, r25	; 0x0c
    1a74:	ad 87       	std	Y+13, r26	; 0x0d
    1a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	4a ef       	ldi	r20, 0xFA	; 250
    1a86:	54 e4       	ldi	r21, 0x44	; 68
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8f 83       	std	Y+7, r24	; 0x07
    1a92:	98 87       	std	Y+8, r25	; 0x08
    1a94:	a9 87       	std	Y+9, r26	; 0x09
    1a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	2c f4       	brge	.+10     	; 0x1aba <KEYPAD_U8GetPressedKey+0xd0>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	3f c0       	rjmp	.+126    	; 0x1b38 <KEYPAD_U8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	57 e4       	ldi	r21, 0x47	; 71
    1aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	4c f5       	brge	.+82     	; 0x1b24 <KEYPAD_U8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e2       	ldi	r20, 0x20	; 32
    1ae0:	51 e4       	ldi	r21, 0x41	; 65
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <KEYPAD_U8GetPressedKey+0x130>
    1afc:	88 ec       	ldi	r24, 0xC8	; 200
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 83       	std	Y+3, r24	; 0x03
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <KEYPAD_U8GetPressedKey+0x11e>
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	69 f7       	brne	.-38     	; 0x1afc <KEYPAD_U8GetPressedKey+0x112>
    1b22:	23 c0       	rjmp	.+70     	; 0x1b6a <KEYPAD_U8GetPressedKey+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <KEYPAD_U8GetPressedKey+0x15a>
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	0e c0       	rjmp	.+28     	; 0x1b6a <KEYPAD_U8GetPressedKey+0x180>
    		 {
    			 //delay to avoid bouncing
					_delay_ms(50);
					//reread switch pin
						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
							   u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    1b4e:	89 89       	ldd	r24, Y+17	; 0x11
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	ce 01       	movw	r24, r28
    1b56:	42 96       	adiw	r24, 0x12	; 18
    1b58:	fc 01       	movw	r30, r24
    1b5a:	e2 0f       	add	r30, r18
    1b5c:	f3 1f       	adc	r31, r19
    1b5e:	90 81       	ld	r25, Z
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	69 2f       	mov	r22, r25
    1b64:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_GetPinValue>
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
    		 if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    		 {
    			 //delay to avoid bouncing
					_delay_ms(50);
					//reread switch pin
						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
    1b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6c:	88 23       	and	r24, r24
    1b6e:	79 f3       	breq	.-34     	; 0x1b4e <KEYPAD_U8GetPressedKey+0x164>
							   u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
						}

						u8 KPD_u8Value[ROWS_NUMBER][COLUMN_NUMBER]= KEYPAD_VALUES;
    1b70:	ce 01       	movw	r24, r28
    1b72:	4a 96       	adiw	r24, 0x1a	; 26
    1b74:	9c a7       	std	Y+44, r25	; 0x2c
    1b76:	8b a7       	std	Y+43, r24	; 0x2b
    1b78:	eb e2       	ldi	r30, 0x2B	; 43
    1b7a:	f1 e0       	ldi	r31, 0x01	; 1
    1b7c:	fe a7       	std	Y+46, r31	; 0x2e
    1b7e:	ed a7       	std	Y+45, r30	; 0x2d
    1b80:	f0 e1       	ldi	r31, 0x10	; 16
    1b82:	ff a7       	std	Y+47, r31	; 0x2f
    1b84:	ed a5       	ldd	r30, Y+45	; 0x2d
    1b86:	fe a5       	ldd	r31, Y+46	; 0x2e
    1b88:	00 80       	ld	r0, Z
    1b8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	9e a7       	std	Y+46, r25	; 0x2e
    1b92:	8d a7       	std	Y+45, r24	; 0x2d
    1b94:	eb a5       	ldd	r30, Y+43	; 0x2b
    1b96:	fc a5       	ldd	r31, Y+44	; 0x2c
    1b98:	00 82       	st	Z, r0
    1b9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	9c a7       	std	Y+44, r25	; 0x2c
    1ba2:	8b a7       	std	Y+43, r24	; 0x2b
    1ba4:	9f a5       	ldd	r25, Y+47	; 0x2f
    1ba6:	91 50       	subi	r25, 0x01	; 1
    1ba8:	9f a7       	std	Y+47, r25	; 0x2f
    1baa:	ef a5       	ldd	r30, Y+47	; 0x2f
    1bac:	ee 23       	and	r30, r30
    1bae:	51 f7       	brne	.-44     	; 0x1b84 <KEYPAD_U8GetPressedKey+0x19a>
						return KPD_u8Value[U8RowLOCAL][U8ColumnLocal];
    1bb0:	89 89       	ldd	r24, Y+17	; 0x11
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	88 89       	ldd	r24, Y+16	; 0x10
    1bb8:	48 2f       	mov	r20, r24
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	22 0f       	add	r18, r18
    1bbe:	33 1f       	adc	r19, r19
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	82 0f       	add	r24, r18
    1bca:	93 1f       	adc	r25, r19
    1bcc:	84 0f       	add	r24, r20
    1bce:	95 1f       	adc	r25, r21
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	79 96       	adiw	r30, 0x19	; 25
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8a a7       	std	Y+42, r24	; 0x2a
    1bd8:	1e c0       	rjmp	.+60     	; 0x1c16 <KEYPAD_U8GetPressedKey+0x22c>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    1bda:	89 89       	ldd	r24, Y+17	; 0x11
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	89 8b       	std	Y+17, r24	; 0x11
    1be0:	89 89       	ldd	r24, Y+17	; 0x11
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	08 f4       	brcc	.+2      	; 0x1be8 <KEYPAD_U8GetPressedKey+0x1fe>
    1be6:	2e cf       	rjmp	.-420    	; 0x1a44 <KEYPAD_U8GetPressedKey+0x5a>
					}


    		 }
			   //deactivate column
			   DIO_SetPinValue(KEYPAD_PORT,KPD_ColumnPinArr[U8ColumnLocal],DIO_HIGH);
    1be8:	88 89       	ldd	r24, Y+16	; 0x10
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	ce 01       	movw	r24, r28
    1bf0:	46 96       	adiw	r24, 0x16	; 22
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	e2 0f       	add	r30, r18
    1bf6:	f3 1f       	adc	r31, r19
    1bf8:	90 81       	ld	r25, Z
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	69 2f       	mov	r22, r25
    1bfe:	41 e0       	ldi	r20, 0x01	; 1
    1c00:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinValue>
	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};



     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    1c04:	88 89       	ldd	r24, Y+16	; 0x10
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	88 8b       	std	Y+16, r24	; 0x10
    1c0a:	88 89       	ldd	r24, Y+16	; 0x10
    1c0c:	84 30       	cpi	r24, 0x04	; 4
    1c0e:	08 f4       	brcc	.+2      	; 0x1c12 <KEYPAD_U8GetPressedKey+0x228>
    1c10:	09 cf       	rjmp	.-494    	; 0x1a24 <KEYPAD_U8GetPressedKey+0x3a>


        }


     return KEYPAD_NOT_PRESSED_KEY ;
    1c12:	9f ef       	ldi	r25, 0xFF	; 255
    1c14:	9a a7       	std	Y+42, r25	; 0x2a
    1c16:	8a a5       	ldd	r24, Y+42	; 0x2a
 }
    1c18:	af 96       	adiw	r28, 0x2f	; 47
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <main>:
#include "../HAL/KPD/KPD.h"
#include "util/delay.h"

#define F_CPU 8000000UL
void main (void)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
	LCD_Voidinit();
    1c34:	0e 94 a6 0a 	call	0x154c	; 0x154c <LCD_Voidinit>
	KEYPAD_VoidInit();
    1c38:	0e 94 9e 0c 	call	0x193c	; 0x193c <KEYPAD_VoidInit>
	while(1)
	{
		u8 X=KEYPAD_U8GetPressedKey();
    1c3c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <KEYPAD_U8GetPressedKey>
    1c40:	89 83       	std	Y+1, r24	; 0x01

		if(X!=KEYPAD_NOT_PRESSED_KEY)
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	8f 3f       	cpi	r24, 0xFF	; 255
    1c46:	d1 f3       	breq	.-12     	; 0x1c3c <main+0x12>
		{
			LCD_VoidSendChar(X);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	0e 94 1b 09 	call	0x1236	; 0x1236 <LCD_VoidSendChar>
    1c4e:	f6 cf       	rjmp	.-20     	; 0x1c3c <main+0x12>

00001c50 <__prologue_saves__>:
    1c50:	2f 92       	push	r2
    1c52:	3f 92       	push	r3
    1c54:	4f 92       	push	r4
    1c56:	5f 92       	push	r5
    1c58:	6f 92       	push	r6
    1c5a:	7f 92       	push	r7
    1c5c:	8f 92       	push	r8
    1c5e:	9f 92       	push	r9
    1c60:	af 92       	push	r10
    1c62:	bf 92       	push	r11
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	ca 1b       	sub	r28, r26
    1c7a:	db 0b       	sbc	r29, r27
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	09 94       	ijmp

00001c88 <__epilogue_restores__>:
    1c88:	2a 88       	ldd	r2, Y+18	; 0x12
    1c8a:	39 88       	ldd	r3, Y+17	; 0x11
    1c8c:	48 88       	ldd	r4, Y+16	; 0x10
    1c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c90:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c92:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c94:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c96:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c98:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c9a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c9c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c9e:	df 80       	ldd	r13, Y+7	; 0x07
    1ca0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ca6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    1caa:	b9 81       	ldd	r27, Y+1	; 0x01
    1cac:	ce 0f       	add	r28, r30
    1cae:	d1 1d       	adc	r29, r1
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	ed 01       	movw	r28, r26
    1cbc:	08 95       	ret

00001cbe <printf>:
    1cbe:	a0 e0       	ldi	r26, 0x00	; 0
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e5 e6       	ldi	r30, 0x65	; 101
    1cc4:	fe e0       	ldi	r31, 0x0E	; 14
    1cc6:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x20>
    1cca:	fe 01       	movw	r30, r28
    1ccc:	35 96       	adiw	r30, 0x05	; 5
    1cce:	61 91       	ld	r22, Z+
    1cd0:	71 91       	ld	r23, Z+
    1cd2:	80 91 3e 01 	lds	r24, 0x013E
    1cd6:	90 91 3f 01 	lds	r25, 0x013F
    1cda:	af 01       	movw	r20, r30
    1cdc:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <vfprintf>
    1ce0:	20 96       	adiw	r28, 0x00	; 0
    1ce2:	e2 e0       	ldi	r30, 0x02	; 2
    1ce4:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x20>

00001ce8 <vfprintf>:
    1ce8:	ab e0       	ldi	r26, 0x0B	; 11
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	ea e7       	ldi	r30, 0x7A	; 122
    1cee:	fe e0       	ldi	r31, 0x0E	; 14
    1cf0:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
    1cf4:	3c 01       	movw	r6, r24
    1cf6:	2b 01       	movw	r4, r22
    1cf8:	5a 01       	movw	r10, r20
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	17 82       	std	Z+7, r1	; 0x07
    1cfe:	16 82       	std	Z+6, r1	; 0x06
    1d00:	83 81       	ldd	r24, Z+3	; 0x03
    1d02:	81 fd       	sbrc	r24, 1
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <vfprintf+0x24>
    1d06:	6f ef       	ldi	r22, 0xFF	; 255
    1d08:	7f ef       	ldi	r23, 0xFF	; 255
    1d0a:	c6 c1       	rjmp	.+908    	; 0x2098 <vfprintf+0x3b0>
    1d0c:	9a e0       	ldi	r25, 0x0A	; 10
    1d0e:	89 2e       	mov	r8, r25
    1d10:	1e 01       	movw	r2, r28
    1d12:	08 94       	sec
    1d14:	21 1c       	adc	r2, r1
    1d16:	31 1c       	adc	r3, r1
    1d18:	f3 01       	movw	r30, r6
    1d1a:	23 81       	ldd	r18, Z+3	; 0x03
    1d1c:	f2 01       	movw	r30, r4
    1d1e:	23 fd       	sbrc	r18, 3
    1d20:	85 91       	lpm	r24, Z+
    1d22:	23 ff       	sbrs	r18, 3
    1d24:	81 91       	ld	r24, Z+
    1d26:	2f 01       	movw	r4, r30
    1d28:	88 23       	and	r24, r24
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <vfprintf+0x46>
    1d2c:	b2 c1       	rjmp	.+868    	; 0x2092 <vfprintf+0x3aa>
    1d2e:	85 32       	cpi	r24, 0x25	; 37
    1d30:	39 f4       	brne	.+14     	; 0x1d40 <vfprintf+0x58>
    1d32:	23 fd       	sbrc	r18, 3
    1d34:	85 91       	lpm	r24, Z+
    1d36:	23 ff       	sbrs	r18, 3
    1d38:	81 91       	ld	r24, Z+
    1d3a:	2f 01       	movw	r4, r30
    1d3c:	85 32       	cpi	r24, 0x25	; 37
    1d3e:	29 f4       	brne	.+10     	; 0x1d4a <vfprintf+0x62>
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	b3 01       	movw	r22, r6
    1d44:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    1d48:	e7 cf       	rjmp	.-50     	; 0x1d18 <vfprintf+0x30>
    1d4a:	98 2f       	mov	r25, r24
    1d4c:	ff 24       	eor	r15, r15
    1d4e:	ee 24       	eor	r14, r14
    1d50:	99 24       	eor	r9, r9
    1d52:	ff e1       	ldi	r31, 0x1F	; 31
    1d54:	ff 15       	cp	r31, r15
    1d56:	d0 f0       	brcs	.+52     	; 0x1d8c <vfprintf+0xa4>
    1d58:	9b 32       	cpi	r25, 0x2B	; 43
    1d5a:	69 f0       	breq	.+26     	; 0x1d76 <vfprintf+0x8e>
    1d5c:	9c 32       	cpi	r25, 0x2C	; 44
    1d5e:	28 f4       	brcc	.+10     	; 0x1d6a <vfprintf+0x82>
    1d60:	90 32       	cpi	r25, 0x20	; 32
    1d62:	59 f0       	breq	.+22     	; 0x1d7a <vfprintf+0x92>
    1d64:	93 32       	cpi	r25, 0x23	; 35
    1d66:	91 f4       	brne	.+36     	; 0x1d8c <vfprintf+0xa4>
    1d68:	0e c0       	rjmp	.+28     	; 0x1d86 <vfprintf+0x9e>
    1d6a:	9d 32       	cpi	r25, 0x2D	; 45
    1d6c:	49 f0       	breq	.+18     	; 0x1d80 <vfprintf+0x98>
    1d6e:	90 33       	cpi	r25, 0x30	; 48
    1d70:	69 f4       	brne	.+26     	; 0x1d8c <vfprintf+0xa4>
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	24 c0       	rjmp	.+72     	; 0x1dbe <vfprintf+0xd6>
    1d76:	52 e0       	ldi	r21, 0x02	; 2
    1d78:	f5 2a       	or	r15, r21
    1d7a:	84 e0       	ldi	r24, 0x04	; 4
    1d7c:	f8 2a       	or	r15, r24
    1d7e:	28 c0       	rjmp	.+80     	; 0x1dd0 <vfprintf+0xe8>
    1d80:	98 e0       	ldi	r25, 0x08	; 8
    1d82:	f9 2a       	or	r15, r25
    1d84:	25 c0       	rjmp	.+74     	; 0x1dd0 <vfprintf+0xe8>
    1d86:	e0 e1       	ldi	r30, 0x10	; 16
    1d88:	fe 2a       	or	r15, r30
    1d8a:	22 c0       	rjmp	.+68     	; 0x1dd0 <vfprintf+0xe8>
    1d8c:	f7 fc       	sbrc	r15, 7
    1d8e:	29 c0       	rjmp	.+82     	; 0x1de2 <vfprintf+0xfa>
    1d90:	89 2f       	mov	r24, r25
    1d92:	80 53       	subi	r24, 0x30	; 48
    1d94:	8a 30       	cpi	r24, 0x0A	; 10
    1d96:	70 f4       	brcc	.+28     	; 0x1db4 <vfprintf+0xcc>
    1d98:	f6 fe       	sbrs	r15, 6
    1d9a:	05 c0       	rjmp	.+10     	; 0x1da6 <vfprintf+0xbe>
    1d9c:	98 9c       	mul	r9, r8
    1d9e:	90 2c       	mov	r9, r0
    1da0:	11 24       	eor	r1, r1
    1da2:	98 0e       	add	r9, r24
    1da4:	15 c0       	rjmp	.+42     	; 0x1dd0 <vfprintf+0xe8>
    1da6:	e8 9c       	mul	r14, r8
    1da8:	e0 2c       	mov	r14, r0
    1daa:	11 24       	eor	r1, r1
    1dac:	e8 0e       	add	r14, r24
    1dae:	f0 e2       	ldi	r31, 0x20	; 32
    1db0:	ff 2a       	or	r15, r31
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <vfprintf+0xe8>
    1db4:	9e 32       	cpi	r25, 0x2E	; 46
    1db6:	29 f4       	brne	.+10     	; 0x1dc2 <vfprintf+0xda>
    1db8:	f6 fc       	sbrc	r15, 6
    1dba:	6b c1       	rjmp	.+726    	; 0x2092 <vfprintf+0x3aa>
    1dbc:	40 e4       	ldi	r20, 0x40	; 64
    1dbe:	f4 2a       	or	r15, r20
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <vfprintf+0xe8>
    1dc2:	9c 36       	cpi	r25, 0x6C	; 108
    1dc4:	19 f4       	brne	.+6      	; 0x1dcc <vfprintf+0xe4>
    1dc6:	50 e8       	ldi	r21, 0x80	; 128
    1dc8:	f5 2a       	or	r15, r21
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <vfprintf+0xe8>
    1dcc:	98 36       	cpi	r25, 0x68	; 104
    1dce:	49 f4       	brne	.+18     	; 0x1de2 <vfprintf+0xfa>
    1dd0:	f2 01       	movw	r30, r4
    1dd2:	23 fd       	sbrc	r18, 3
    1dd4:	95 91       	lpm	r25, Z+
    1dd6:	23 ff       	sbrs	r18, 3
    1dd8:	91 91       	ld	r25, Z+
    1dda:	2f 01       	movw	r4, r30
    1ddc:	99 23       	and	r25, r25
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <vfprintf+0xfa>
    1de0:	b8 cf       	rjmp	.-144    	; 0x1d52 <vfprintf+0x6a>
    1de2:	89 2f       	mov	r24, r25
    1de4:	85 54       	subi	r24, 0x45	; 69
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	18 f0       	brcs	.+6      	; 0x1df0 <vfprintf+0x108>
    1dea:	80 52       	subi	r24, 0x20	; 32
    1dec:	83 30       	cpi	r24, 0x03	; 3
    1dee:	38 f4       	brcc	.+14     	; 0x1dfe <vfprintf+0x116>
    1df0:	44 e0       	ldi	r20, 0x04	; 4
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	a4 0e       	add	r10, r20
    1df6:	b5 1e       	adc	r11, r21
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	59 83       	std	Y+1, r21	; 0x01
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <vfprintf+0x134>
    1dfe:	93 36       	cpi	r25, 0x63	; 99
    1e00:	31 f0       	breq	.+12     	; 0x1e0e <vfprintf+0x126>
    1e02:	93 37       	cpi	r25, 0x73	; 115
    1e04:	79 f0       	breq	.+30     	; 0x1e24 <vfprintf+0x13c>
    1e06:	93 35       	cpi	r25, 0x53	; 83
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <vfprintf+0x124>
    1e0a:	56 c0       	rjmp	.+172    	; 0x1eb8 <vfprintf+0x1d0>
    1e0c:	20 c0       	rjmp	.+64     	; 0x1e4e <vfprintf+0x166>
    1e0e:	f5 01       	movw	r30, r10
    1e10:	80 81       	ld	r24, Z
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	42 e0       	ldi	r20, 0x02	; 2
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	a4 0e       	add	r10, r20
    1e1a:	b5 1e       	adc	r11, r21
    1e1c:	61 01       	movw	r12, r2
    1e1e:	01 e0       	ldi	r16, 0x01	; 1
    1e20:	10 e0       	ldi	r17, 0x00	; 0
    1e22:	12 c0       	rjmp	.+36     	; 0x1e48 <vfprintf+0x160>
    1e24:	f5 01       	movw	r30, r10
    1e26:	c0 80       	ld	r12, Z
    1e28:	d1 80       	ldd	r13, Z+1	; 0x01
    1e2a:	f6 fc       	sbrc	r15, 6
    1e2c:	03 c0       	rjmp	.+6      	; 0x1e34 <vfprintf+0x14c>
    1e2e:	6f ef       	ldi	r22, 0xFF	; 255
    1e30:	7f ef       	ldi	r23, 0xFF	; 255
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <vfprintf+0x150>
    1e34:	69 2d       	mov	r22, r9
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	42 e0       	ldi	r20, 0x02	; 2
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	a4 0e       	add	r10, r20
    1e3e:	b5 1e       	adc	r11, r21
    1e40:	c6 01       	movw	r24, r12
    1e42:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <strnlen>
    1e46:	8c 01       	movw	r16, r24
    1e48:	5f e7       	ldi	r21, 0x7F	; 127
    1e4a:	f5 22       	and	r15, r21
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <vfprintf+0x18e>
    1e4e:	f5 01       	movw	r30, r10
    1e50:	c0 80       	ld	r12, Z
    1e52:	d1 80       	ldd	r13, Z+1	; 0x01
    1e54:	f6 fc       	sbrc	r15, 6
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <vfprintf+0x176>
    1e58:	6f ef       	ldi	r22, 0xFF	; 255
    1e5a:	7f ef       	ldi	r23, 0xFF	; 255
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <vfprintf+0x17a>
    1e5e:	69 2d       	mov	r22, r9
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	42 e0       	ldi	r20, 0x02	; 2
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	a4 0e       	add	r10, r20
    1e68:	b5 1e       	adc	r11, r21
    1e6a:	c6 01       	movw	r24, r12
    1e6c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <strnlen_P>
    1e70:	8c 01       	movw	r16, r24
    1e72:	50 e8       	ldi	r21, 0x80	; 128
    1e74:	f5 2a       	or	r15, r21
    1e76:	f3 fe       	sbrs	r15, 3
    1e78:	07 c0       	rjmp	.+14     	; 0x1e88 <vfprintf+0x1a0>
    1e7a:	1a c0       	rjmp	.+52     	; 0x1eb0 <vfprintf+0x1c8>
    1e7c:	80 e2       	ldi	r24, 0x20	; 32
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	b3 01       	movw	r22, r6
    1e82:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    1e86:	ea 94       	dec	r14
    1e88:	8e 2d       	mov	r24, r14
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	08 17       	cp	r16, r24
    1e8e:	19 07       	cpc	r17, r25
    1e90:	a8 f3       	brcs	.-22     	; 0x1e7c <vfprintf+0x194>
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <vfprintf+0x1c8>
    1e94:	f6 01       	movw	r30, r12
    1e96:	f7 fc       	sbrc	r15, 7
    1e98:	85 91       	lpm	r24, Z+
    1e9a:	f7 fe       	sbrs	r15, 7
    1e9c:	81 91       	ld	r24, Z+
    1e9e:	6f 01       	movw	r12, r30
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	b3 01       	movw	r22, r6
    1ea4:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    1ea8:	e1 10       	cpse	r14, r1
    1eaa:	ea 94       	dec	r14
    1eac:	01 50       	subi	r16, 0x01	; 1
    1eae:	10 40       	sbci	r17, 0x00	; 0
    1eb0:	01 15       	cp	r16, r1
    1eb2:	11 05       	cpc	r17, r1
    1eb4:	79 f7       	brne	.-34     	; 0x1e94 <vfprintf+0x1ac>
    1eb6:	ea c0       	rjmp	.+468    	; 0x208c <vfprintf+0x3a4>
    1eb8:	94 36       	cpi	r25, 0x64	; 100
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <vfprintf+0x1d8>
    1ebc:	99 36       	cpi	r25, 0x69	; 105
    1ebe:	69 f5       	brne	.+90     	; 0x1f1a <vfprintf+0x232>
    1ec0:	f7 fe       	sbrs	r15, 7
    1ec2:	08 c0       	rjmp	.+16     	; 0x1ed4 <vfprintf+0x1ec>
    1ec4:	f5 01       	movw	r30, r10
    1ec6:	20 81       	ld	r18, Z
    1ec8:	31 81       	ldd	r19, Z+1	; 0x01
    1eca:	42 81       	ldd	r20, Z+2	; 0x02
    1ecc:	53 81       	ldd	r21, Z+3	; 0x03
    1ece:	84 e0       	ldi	r24, 0x04	; 4
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0a c0       	rjmp	.+20     	; 0x1ee8 <vfprintf+0x200>
    1ed4:	f5 01       	movw	r30, r10
    1ed6:	80 81       	ld	r24, Z
    1ed8:	91 81       	ldd	r25, Z+1	; 0x01
    1eda:	9c 01       	movw	r18, r24
    1edc:	44 27       	eor	r20, r20
    1ede:	37 fd       	sbrc	r19, 7
    1ee0:	40 95       	com	r20
    1ee2:	54 2f       	mov	r21, r20
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a8 0e       	add	r10, r24
    1eea:	b9 1e       	adc	r11, r25
    1eec:	9f e6       	ldi	r25, 0x6F	; 111
    1eee:	f9 22       	and	r15, r25
    1ef0:	57 ff       	sbrs	r21, 7
    1ef2:	09 c0       	rjmp	.+18     	; 0x1f06 <vfprintf+0x21e>
    1ef4:	50 95       	com	r21
    1ef6:	40 95       	com	r20
    1ef8:	30 95       	com	r19
    1efa:	21 95       	neg	r18
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	4f 4f       	sbci	r20, 0xFF	; 255
    1f00:	5f 4f       	sbci	r21, 0xFF	; 255
    1f02:	e0 e8       	ldi	r30, 0x80	; 128
    1f04:	fe 2a       	or	r15, r30
    1f06:	ca 01       	movw	r24, r20
    1f08:	b9 01       	movw	r22, r18
    1f0a:	a1 01       	movw	r20, r2
    1f0c:	2a e0       	ldi	r18, 0x0A	; 10
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	0e 94 93 10 	call	0x2126	; 0x2126 <__ultoa_invert>
    1f14:	d8 2e       	mov	r13, r24
    1f16:	d2 18       	sub	r13, r2
    1f18:	40 c0       	rjmp	.+128    	; 0x1f9a <vfprintf+0x2b2>
    1f1a:	95 37       	cpi	r25, 0x75	; 117
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <vfprintf+0x240>
    1f1e:	1f 2d       	mov	r17, r15
    1f20:	1f 7e       	andi	r17, 0xEF	; 239
    1f22:	2a e0       	ldi	r18, 0x0A	; 10
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	1d c0       	rjmp	.+58     	; 0x1f62 <vfprintf+0x27a>
    1f28:	1f 2d       	mov	r17, r15
    1f2a:	19 7f       	andi	r17, 0xF9	; 249
    1f2c:	9f 36       	cpi	r25, 0x6F	; 111
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <vfprintf+0x260>
    1f30:	90 37       	cpi	r25, 0x70	; 112
    1f32:	20 f4       	brcc	.+8      	; 0x1f3c <vfprintf+0x254>
    1f34:	98 35       	cpi	r25, 0x58	; 88
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <vfprintf+0x252>
    1f38:	ac c0       	rjmp	.+344    	; 0x2092 <vfprintf+0x3aa>
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <vfprintf+0x272>
    1f3c:	90 37       	cpi	r25, 0x70	; 112
    1f3e:	39 f0       	breq	.+14     	; 0x1f4e <vfprintf+0x266>
    1f40:	98 37       	cpi	r25, 0x78	; 120
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <vfprintf+0x25e>
    1f44:	a6 c0       	rjmp	.+332    	; 0x2092 <vfprintf+0x3aa>
    1f46:	04 c0       	rjmp	.+8      	; 0x1f50 <vfprintf+0x268>
    1f48:	28 e0       	ldi	r18, 0x08	; 8
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	0a c0       	rjmp	.+20     	; 0x1f62 <vfprintf+0x27a>
    1f4e:	10 61       	ori	r17, 0x10	; 16
    1f50:	14 fd       	sbrc	r17, 4
    1f52:	14 60       	ori	r17, 0x04	; 4
    1f54:	20 e1       	ldi	r18, 0x10	; 16
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	04 c0       	rjmp	.+8      	; 0x1f62 <vfprintf+0x27a>
    1f5a:	14 fd       	sbrc	r17, 4
    1f5c:	16 60       	ori	r17, 0x06	; 6
    1f5e:	20 e1       	ldi	r18, 0x10	; 16
    1f60:	32 e0       	ldi	r19, 0x02	; 2
    1f62:	17 ff       	sbrs	r17, 7
    1f64:	08 c0       	rjmp	.+16     	; 0x1f76 <vfprintf+0x28e>
    1f66:	f5 01       	movw	r30, r10
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	44 e0       	ldi	r20, 0x04	; 4
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	08 c0       	rjmp	.+16     	; 0x1f86 <vfprintf+0x29e>
    1f76:	f5 01       	movw	r30, r10
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	42 e0       	ldi	r20, 0x02	; 2
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	a4 0e       	add	r10, r20
    1f88:	b5 1e       	adc	r11, r21
    1f8a:	a1 01       	movw	r20, r2
    1f8c:	0e 94 93 10 	call	0x2126	; 0x2126 <__ultoa_invert>
    1f90:	d8 2e       	mov	r13, r24
    1f92:	d2 18       	sub	r13, r2
    1f94:	8f e7       	ldi	r24, 0x7F	; 127
    1f96:	f8 2e       	mov	r15, r24
    1f98:	f1 22       	and	r15, r17
    1f9a:	f6 fe       	sbrs	r15, 6
    1f9c:	0b c0       	rjmp	.+22     	; 0x1fb4 <vfprintf+0x2cc>
    1f9e:	5e ef       	ldi	r21, 0xFE	; 254
    1fa0:	f5 22       	and	r15, r21
    1fa2:	d9 14       	cp	r13, r9
    1fa4:	38 f4       	brcc	.+14     	; 0x1fb4 <vfprintf+0x2cc>
    1fa6:	f4 fe       	sbrs	r15, 4
    1fa8:	07 c0       	rjmp	.+14     	; 0x1fb8 <vfprintf+0x2d0>
    1faa:	f2 fc       	sbrc	r15, 2
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <vfprintf+0x2d0>
    1fae:	8f ee       	ldi	r24, 0xEF	; 239
    1fb0:	f8 22       	and	r15, r24
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <vfprintf+0x2d0>
    1fb4:	1d 2d       	mov	r17, r13
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <vfprintf+0x2d2>
    1fb8:	19 2d       	mov	r17, r9
    1fba:	f4 fe       	sbrs	r15, 4
    1fbc:	0d c0       	rjmp	.+26     	; 0x1fd8 <vfprintf+0x2f0>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	ed 0d       	add	r30, r13
    1fc2:	f1 1d       	adc	r31, r1
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 33       	cpi	r24, 0x30	; 48
    1fc8:	19 f4       	brne	.+6      	; 0x1fd0 <vfprintf+0x2e8>
    1fca:	99 ee       	ldi	r25, 0xE9	; 233
    1fcc:	f9 22       	and	r15, r25
    1fce:	08 c0       	rjmp	.+16     	; 0x1fe0 <vfprintf+0x2f8>
    1fd0:	1f 5f       	subi	r17, 0xFF	; 255
    1fd2:	f2 fe       	sbrs	r15, 2
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <vfprintf+0x2f8>
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <vfprintf+0x2f6>
    1fd8:	8f 2d       	mov	r24, r15
    1fda:	86 78       	andi	r24, 0x86	; 134
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <vfprintf+0x2f8>
    1fde:	1f 5f       	subi	r17, 0xFF	; 255
    1fe0:	0f 2d       	mov	r16, r15
    1fe2:	f3 fc       	sbrc	r15, 3
    1fe4:	14 c0       	rjmp	.+40     	; 0x200e <vfprintf+0x326>
    1fe6:	f0 fe       	sbrs	r15, 0
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <vfprintf+0x320>
    1fea:	1e 15       	cp	r17, r14
    1fec:	10 f0       	brcs	.+4      	; 0x1ff2 <vfprintf+0x30a>
    1fee:	9d 2c       	mov	r9, r13
    1ff0:	0b c0       	rjmp	.+22     	; 0x2008 <vfprintf+0x320>
    1ff2:	9d 2c       	mov	r9, r13
    1ff4:	9e 0c       	add	r9, r14
    1ff6:	91 1a       	sub	r9, r17
    1ff8:	1e 2d       	mov	r17, r14
    1ffa:	06 c0       	rjmp	.+12     	; 0x2008 <vfprintf+0x320>
    1ffc:	80 e2       	ldi	r24, 0x20	; 32
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	b3 01       	movw	r22, r6
    2002:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    2006:	1f 5f       	subi	r17, 0xFF	; 255
    2008:	1e 15       	cp	r17, r14
    200a:	c0 f3       	brcs	.-16     	; 0x1ffc <vfprintf+0x314>
    200c:	04 c0       	rjmp	.+8      	; 0x2016 <vfprintf+0x32e>
    200e:	1e 15       	cp	r17, r14
    2010:	10 f4       	brcc	.+4      	; 0x2016 <vfprintf+0x32e>
    2012:	e1 1a       	sub	r14, r17
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <vfprintf+0x330>
    2016:	ee 24       	eor	r14, r14
    2018:	04 ff       	sbrs	r16, 4
    201a:	0f c0       	rjmp	.+30     	; 0x203a <vfprintf+0x352>
    201c:	80 e3       	ldi	r24, 0x30	; 48
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	b3 01       	movw	r22, r6
    2022:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    2026:	02 ff       	sbrs	r16, 2
    2028:	1d c0       	rjmp	.+58     	; 0x2064 <vfprintf+0x37c>
    202a:	01 fd       	sbrc	r16, 1
    202c:	03 c0       	rjmp	.+6      	; 0x2034 <vfprintf+0x34c>
    202e:	88 e7       	ldi	r24, 0x78	; 120
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e c0       	rjmp	.+28     	; 0x2050 <vfprintf+0x368>
    2034:	88 e5       	ldi	r24, 0x58	; 88
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0b c0       	rjmp	.+22     	; 0x2050 <vfprintf+0x368>
    203a:	80 2f       	mov	r24, r16
    203c:	86 78       	andi	r24, 0x86	; 134
    203e:	91 f0       	breq	.+36     	; 0x2064 <vfprintf+0x37c>
    2040:	01 ff       	sbrs	r16, 1
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <vfprintf+0x360>
    2044:	8b e2       	ldi	r24, 0x2B	; 43
    2046:	01 c0       	rjmp	.+2      	; 0x204a <vfprintf+0x362>
    2048:	80 e2       	ldi	r24, 0x20	; 32
    204a:	f7 fc       	sbrc	r15, 7
    204c:	8d e2       	ldi	r24, 0x2D	; 45
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	b3 01       	movw	r22, r6
    2052:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <vfprintf+0x37c>
    2058:	80 e3       	ldi	r24, 0x30	; 48
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	b3 01       	movw	r22, r6
    205e:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    2062:	9a 94       	dec	r9
    2064:	d9 14       	cp	r13, r9
    2066:	c0 f3       	brcs	.-16     	; 0x2058 <vfprintf+0x370>
    2068:	da 94       	dec	r13
    206a:	f1 01       	movw	r30, r2
    206c:	ed 0d       	add	r30, r13
    206e:	f1 1d       	adc	r31, r1
    2070:	80 81       	ld	r24, Z
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	b3 01       	movw	r22, r6
    2076:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    207a:	dd 20       	and	r13, r13
    207c:	a9 f7       	brne	.-22     	; 0x2068 <vfprintf+0x380>
    207e:	06 c0       	rjmp	.+12     	; 0x208c <vfprintf+0x3a4>
    2080:	80 e2       	ldi	r24, 0x20	; 32
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	b3 01       	movw	r22, r6
    2086:	0e 94 67 10 	call	0x20ce	; 0x20ce <fputc>
    208a:	ea 94       	dec	r14
    208c:	ee 20       	and	r14, r14
    208e:	c1 f7       	brne	.-16     	; 0x2080 <vfprintf+0x398>
    2090:	43 ce       	rjmp	.-890    	; 0x1d18 <vfprintf+0x30>
    2092:	f3 01       	movw	r30, r6
    2094:	66 81       	ldd	r22, Z+6	; 0x06
    2096:	77 81       	ldd	r23, Z+7	; 0x07
    2098:	cb 01       	movw	r24, r22
    209a:	2b 96       	adiw	r28, 0x0b	; 11
    209c:	e2 e1       	ldi	r30, 0x12	; 18
    209e:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

000020a2 <strnlen_P>:
    20a2:	fc 01       	movw	r30, r24
    20a4:	05 90       	lpm	r0, Z+
    20a6:	61 50       	subi	r22, 0x01	; 1
    20a8:	70 40       	sbci	r23, 0x00	; 0
    20aa:	01 10       	cpse	r0, r1
    20ac:	d8 f7       	brcc	.-10     	; 0x20a4 <strnlen_P+0x2>
    20ae:	80 95       	com	r24
    20b0:	90 95       	com	r25
    20b2:	8e 0f       	add	r24, r30
    20b4:	9f 1f       	adc	r25, r31
    20b6:	08 95       	ret

000020b8 <strnlen>:
    20b8:	fc 01       	movw	r30, r24
    20ba:	61 50       	subi	r22, 0x01	; 1
    20bc:	70 40       	sbci	r23, 0x00	; 0
    20be:	01 90       	ld	r0, Z+
    20c0:	01 10       	cpse	r0, r1
    20c2:	d8 f7       	brcc	.-10     	; 0x20ba <strnlen+0x2>
    20c4:	80 95       	com	r24
    20c6:	90 95       	com	r25
    20c8:	8e 0f       	add	r24, r30
    20ca:	9f 1f       	adc	r25, r31
    20cc:	08 95       	ret

000020ce <fputc>:
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	8c 01       	movw	r16, r24
    20d8:	eb 01       	movw	r28, r22
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	81 ff       	sbrs	r24, 1
    20de:	1b c0       	rjmp	.+54     	; 0x2116 <fputc+0x48>
    20e0:	82 ff       	sbrs	r24, 2
    20e2:	0d c0       	rjmp	.+26     	; 0x20fe <fputc+0x30>
    20e4:	2e 81       	ldd	r18, Y+6	; 0x06
    20e6:	3f 81       	ldd	r19, Y+7	; 0x07
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	28 17       	cp	r18, r24
    20ee:	39 07       	cpc	r19, r25
    20f0:	64 f4       	brge	.+24     	; 0x210a <fputc+0x3c>
    20f2:	e8 81       	ld	r30, Y
    20f4:	f9 81       	ldd	r31, Y+1	; 0x01
    20f6:	01 93       	st	Z+, r16
    20f8:	f9 83       	std	Y+1, r31	; 0x01
    20fa:	e8 83       	st	Y, r30
    20fc:	06 c0       	rjmp	.+12     	; 0x210a <fputc+0x3c>
    20fe:	e8 85       	ldd	r30, Y+8	; 0x08
    2100:	f9 85       	ldd	r31, Y+9	; 0x09
    2102:	80 2f       	mov	r24, r16
    2104:	09 95       	icall
    2106:	89 2b       	or	r24, r25
    2108:	31 f4       	brne	.+12     	; 0x2116 <fputc+0x48>
    210a:	8e 81       	ldd	r24, Y+6	; 0x06
    210c:	9f 81       	ldd	r25, Y+7	; 0x07
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	9f 83       	std	Y+7, r25	; 0x07
    2112:	8e 83       	std	Y+6, r24	; 0x06
    2114:	02 c0       	rjmp	.+4      	; 0x211a <fputc+0x4c>
    2116:	0f ef       	ldi	r16, 0xFF	; 255
    2118:	1f ef       	ldi	r17, 0xFF	; 255
    211a:	c8 01       	movw	r24, r16
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	08 95       	ret

00002126 <__ultoa_invert>:
    2126:	fa 01       	movw	r30, r20
    2128:	aa 27       	eor	r26, r26
    212a:	28 30       	cpi	r18, 0x08	; 8
    212c:	51 f1       	breq	.+84     	; 0x2182 <__ultoa_invert+0x5c>
    212e:	20 31       	cpi	r18, 0x10	; 16
    2130:	81 f1       	breq	.+96     	; 0x2192 <__ultoa_invert+0x6c>
    2132:	e8 94       	clt
    2134:	6f 93       	push	r22
    2136:	6e 7f       	andi	r22, 0xFE	; 254
    2138:	6e 5f       	subi	r22, 0xFE	; 254
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	8f 4f       	sbci	r24, 0xFF	; 255
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	af 4f       	sbci	r26, 0xFF	; 255
    2142:	b1 e0       	ldi	r27, 0x01	; 1
    2144:	3e d0       	rcall	.+124    	; 0x21c2 <__ultoa_invert+0x9c>
    2146:	b4 e0       	ldi	r27, 0x04	; 4
    2148:	3c d0       	rcall	.+120    	; 0x21c2 <__ultoa_invert+0x9c>
    214a:	67 0f       	add	r22, r23
    214c:	78 1f       	adc	r23, r24
    214e:	89 1f       	adc	r24, r25
    2150:	9a 1f       	adc	r25, r26
    2152:	a1 1d       	adc	r26, r1
    2154:	68 0f       	add	r22, r24
    2156:	79 1f       	adc	r23, r25
    2158:	8a 1f       	adc	r24, r26
    215a:	91 1d       	adc	r25, r1
    215c:	a1 1d       	adc	r26, r1
    215e:	6a 0f       	add	r22, r26
    2160:	71 1d       	adc	r23, r1
    2162:	81 1d       	adc	r24, r1
    2164:	91 1d       	adc	r25, r1
    2166:	a1 1d       	adc	r26, r1
    2168:	20 d0       	rcall	.+64     	; 0x21aa <__ultoa_invert+0x84>
    216a:	09 f4       	brne	.+2      	; 0x216e <__ultoa_invert+0x48>
    216c:	68 94       	set
    216e:	3f 91       	pop	r19
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	26 9f       	mul	r18, r22
    2174:	11 24       	eor	r1, r1
    2176:	30 19       	sub	r19, r0
    2178:	30 5d       	subi	r19, 0xD0	; 208
    217a:	31 93       	st	Z+, r19
    217c:	de f6       	brtc	.-74     	; 0x2134 <__ultoa_invert+0xe>
    217e:	cf 01       	movw	r24, r30
    2180:	08 95       	ret
    2182:	46 2f       	mov	r20, r22
    2184:	47 70       	andi	r20, 0x07	; 7
    2186:	40 5d       	subi	r20, 0xD0	; 208
    2188:	41 93       	st	Z+, r20
    218a:	b3 e0       	ldi	r27, 0x03	; 3
    218c:	0f d0       	rcall	.+30     	; 0x21ac <__ultoa_invert+0x86>
    218e:	c9 f7       	brne	.-14     	; 0x2182 <__ultoa_invert+0x5c>
    2190:	f6 cf       	rjmp	.-20     	; 0x217e <__ultoa_invert+0x58>
    2192:	46 2f       	mov	r20, r22
    2194:	4f 70       	andi	r20, 0x0F	; 15
    2196:	40 5d       	subi	r20, 0xD0	; 208
    2198:	4a 33       	cpi	r20, 0x3A	; 58
    219a:	18 f0       	brcs	.+6      	; 0x21a2 <__ultoa_invert+0x7c>
    219c:	49 5d       	subi	r20, 0xD9	; 217
    219e:	31 fd       	sbrc	r19, 1
    21a0:	40 52       	subi	r20, 0x20	; 32
    21a2:	41 93       	st	Z+, r20
    21a4:	02 d0       	rcall	.+4      	; 0x21aa <__ultoa_invert+0x84>
    21a6:	a9 f7       	brne	.-22     	; 0x2192 <__ultoa_invert+0x6c>
    21a8:	ea cf       	rjmp	.-44     	; 0x217e <__ultoa_invert+0x58>
    21aa:	b4 e0       	ldi	r27, 0x04	; 4
    21ac:	a6 95       	lsr	r26
    21ae:	97 95       	ror	r25
    21b0:	87 95       	ror	r24
    21b2:	77 95       	ror	r23
    21b4:	67 95       	ror	r22
    21b6:	ba 95       	dec	r27
    21b8:	c9 f7       	brne	.-14     	; 0x21ac <__ultoa_invert+0x86>
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	61 05       	cpc	r22, r1
    21be:	71 05       	cpc	r23, r1
    21c0:	08 95       	ret
    21c2:	9b 01       	movw	r18, r22
    21c4:	ac 01       	movw	r20, r24
    21c6:	0a 2e       	mov	r0, r26
    21c8:	06 94       	lsr	r0
    21ca:	57 95       	ror	r21
    21cc:	47 95       	ror	r20
    21ce:	37 95       	ror	r19
    21d0:	27 95       	ror	r18
    21d2:	ba 95       	dec	r27
    21d4:	c9 f7       	brne	.-14     	; 0x21c8 <__ultoa_invert+0xa2>
    21d6:	62 0f       	add	r22, r18
    21d8:	73 1f       	adc	r23, r19
    21da:	84 1f       	adc	r24, r20
    21dc:	95 1f       	adc	r25, r21
    21de:	a0 1d       	adc	r26, r0
    21e0:	08 95       	ret

000021e2 <_exit>:
    21e2:	f8 94       	cli

000021e4 <__stop_program>:
    21e4:	ff cf       	rjmp	.-2      	; 0x21e4 <__stop_program>
