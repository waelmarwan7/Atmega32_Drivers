
LAB9_TIMER_DRIVER07.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  000027fe  00002892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080013c  0080013c  0000296e  2**0
                  ALLOC
  3 .stab         000024c0  00000000  00000000  00002970  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000101e  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000060fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000099e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a59b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 34       	cpi	r26, 0x47	; 71
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 11 	call	0x2222	; 0x2222 <main>
      8a:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_Init>:
#include "avr/io.h"
#include "TIMER.h"

void (*TIMER0_PvSetCallBackFunc)(void) = NULL;

void TIMER0_Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
/* Choose CTC mode */
	CLR_BIT(TCCR0 , TCCR0_WGM00);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_WGM01);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24


/* Set Compare Match Intrrupt Enable */
	SET_BIT(TIMSK , TIMSK_OCIE0);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24

/* Set Compare Match Value to 64 */
	 OCR0=192;
     b78:	ec e5       	ldi	r30, 0x5C	; 92
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 ec       	ldi	r24, 0xC0	; 192
     b7e:	80 83       	st	Z, r24

/* Prescaler : Division by 8 */
	CLR_BIT(TCCR0 , TCCR0_CS00);
     b80:	a3 e5       	ldi	r26, 0x53	; 83
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e3 e5       	ldi	r30, 0x53	; 83
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	8e 7f       	andi	r24, 0xFE	; 254
     b8c:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_CS01);
     b8e:	a3 e5       	ldi	r26, 0x53	; 83
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e3 e5       	ldi	r30, 0x53	; 83
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_CS02);
     b9c:	a3 e5       	ldi	r26, 0x53	; 83
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8b 7f       	andi	r24, 0xFB	; 251
     ba8:	8c 93       	st	X, r24



}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <TIMER0_u8SetCallBack>:
u8   TIMER0_u8SetCallBack(void (* Copy_PvCallBackFunc)(void)){
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <TIMER0_u8SetCallBack+0x6>
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	9b 83       	std	Y+3, r25	; 0x03
     bbe:	8a 83       	std	Y+2, r24	; 0x02

	u8 U8ERROR_STATE=OK;
     bc0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PvCallBackFunc!=NULL)
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	9b 81       	ldd	r25, Y+3	; 0x03
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_PvSetCallBackFunc=Copy_PvCallBackFunc;
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	9b 81       	ldd	r25, Y+3	; 0x03
     bce:	90 93 3d 01 	sts	0x013D, r25
     bd2:	80 93 3c 01 	sts	0x013C, r24
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <TIMER0_u8SetCallBack+0x2c>

	}else
	{
		U8ERROR_STATE = NULL_POINTER ;
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	89 83       	std	Y+1, r24	; 0x01

	}
	return U8ERROR_STATE;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01

}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <__vector_10>:

/* Actual ISR */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	2f 93       	push	r18
     bf6:	3f 93       	push	r19
     bf8:	4f 93       	push	r20
     bfa:	5f 93       	push	r21
     bfc:	6f 93       	push	r22
     bfe:	7f 93       	push	r23
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
     c04:	af 93       	push	r26
     c06:	bf 93       	push	r27
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PvSetCallBackFunc != NULL){
     c14:	80 91 3c 01 	lds	r24, 0x013C
     c18:	90 91 3d 01 	lds	r25, 0x013D
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	29 f0       	breq	.+10     	; 0xc2a <__vector_10+0x40>
		TIMER0_PvSetCallBackFunc();
     c20:	e0 91 3c 01 	lds	r30, 0x013C
     c24:	f0 91 3d 01 	lds	r31, 0x013D
     c28:	09 95       	icall
	}
}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <GIE_Enable>:
 */
#include "../../LIB/BIT_MATH.h"
#include "avr/io.h"
#include "GIE.h"

void GIE_Enable (void){
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
	//SET bit 7 in SREG
	SET_BIT(SREG  ,  SREG_I );
     c58:	af e5       	ldi	r26, 0x5F	; 95
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	ef e5       	ldi	r30, 0x5F	; 95
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 68       	ori	r24, 0x80	; 128
     c64:	8c 93       	st	X, r24

}
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <GIE_Disable>:
void GIE_Disable(void){
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62

	//CLR bit 7 in SREG
	CLR_BIT(SREG  ,  SREG_I );
     c74:	af e5       	ldi	r26, 0x5F	; 95
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	ef e5       	ldi	r30, 0x5F	; 95
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 77       	andi	r24, 0x7F	; 127
     c80:	8c 93       	st	X, r24

}
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <EXTI_void_Int0Init>:


/* Global pointer to function to hold INT0 ISR address */
void (*EXTI_pvInt0func)(void)=NULL;

void    EXTI_void_Int0Init(void){
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62


	//Check Sense control :
#if   EXTI_SENSE_CONTROL == EXTI_LOW_LEVEL
	CLR_BIT(MCUCR , MCUCR_ISC00 );
     c90:	a5 e5       	ldi	r26, 0x55	; 85
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e5 e5       	ldi	r30, 0x55	; 85
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8e 7f       	andi	r24, 0xFE	; 254
     c9c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , MCUCR_ISC01 );
     c9e:	a5 e5       	ldi	r26, 0x55	; 85
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e5 e5       	ldi	r30, 0x55	; 85
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8d 7f       	andi	r24, 0xFD	; 253
     caa:	8c 93       	st	X, r24
#error "Warning Sense control configration option"
#endif

	/*Check Peripheral intrrupt enable*/
#if INT0_INITIAL_STATE == EXTI_ENABLED
	SET_BIT(GICR , GICR_INT0 );
     cac:	ab e5       	ldi	r26, 0x5B	; 91
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	eb e5       	ldi	r30, 0x5B	; 91
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 64       	ori	r24, 0x40	; 64
     cb8:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == EXTI_DISABLED
	CLR_BIT(GICR , GICR_INT0 );
#else
#error "Wrong Int0_INITIAL_STATE Configuration option "
#endif
}
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <EXTI_void_Int1Init>:


void    EXTI_void_Int1Init(void){
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	//TODO
}
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <EXTI_void_Int2Init>:
void    EXTI_void_Int2Init(void){
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	//TODO

}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <EXTI_u8Int0SetSenseControl>:


u8 EXTI_u8Int0SetSenseControl(u8 u8SenseCopy ){
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <EXTI_u8Int0SetSenseControl+0x6>
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <EXTI_u8Int0SetSenseControl+0x8>
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8ErrorState_Copy = OK;
     cea:	19 82       	std	Y+1, r1	; 0x01
	switch( u8SenseCopy )
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	3c 83       	std	Y+4, r19	; 0x04
     cf4:	2b 83       	std	Y+3, r18	; 0x03
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	91 05       	cpc	r25, r1
     cfe:	a1 f1       	breq	.+104    	; 0xd68 <EXTI_u8Int0SetSenseControl+0x8c>
     d00:	2b 81       	ldd	r18, Y+3	; 0x03
     d02:	3c 81       	ldd	r19, Y+4	; 0x04
     d04:	23 30       	cpi	r18, 0x03	; 3
     d06:	31 05       	cpc	r19, r1
     d08:	34 f4       	brge	.+12     	; 0xd16 <EXTI_u8Int0SetSenseControl+0x3a>
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	91 05       	cpc	r25, r1
     d12:	c9 f1       	breq	.+114    	; 0xd86 <EXTI_u8Int0SetSenseControl+0xaa>
     d14:	47 c0       	rjmp	.+142    	; 0xda4 <EXTI_u8Int0SetSenseControl+0xc8>
     d16:	2b 81       	ldd	r18, Y+3	; 0x03
     d18:	3c 81       	ldd	r19, Y+4	; 0x04
     d1a:	23 30       	cpi	r18, 0x03	; 3
     d1c:	31 05       	cpc	r19, r1
     d1e:	31 f0       	breq	.+12     	; 0xd2c <EXTI_u8Int0SetSenseControl+0x50>
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	84 30       	cpi	r24, 0x04	; 4
     d26:	91 05       	cpc	r25, r1
     d28:	81 f0       	breq	.+32     	; 0xd4a <EXTI_u8Int0SetSenseControl+0x6e>
     d2a:	3c c0       	rjmp	.+120    	; 0xda4 <EXTI_u8Int0SetSenseControl+0xc8>
	{
	case EXTI_LOW_LEVEL :
		CLR_BIT(MCUCR , MCUCR_ISC00);
     d2c:	a5 e5       	ldi	r26, 0x55	; 85
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e5 e5       	ldi	r30, 0x55	; 85
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8e 7f       	andi	r24, 0xFE	; 254
     d38:	8c 93       	st	X, r24
		CLR_BIT(MCUCR , MCUCR_ISC01);
     d3a:	a5 e5       	ldi	r26, 0x55	; 85
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e5 e5       	ldi	r30, 0x55	; 85
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	8d 7f       	andi	r24, 0xFD	; 253
     d46:	8c 93       	st	X, r24
     d48:	2f c0       	rjmp	.+94     	; 0xda8 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_ON_CHANGE :
		SET_BIT(MCUCR , MCUCR_ISC00);
     d4a:	a5 e5       	ldi	r26, 0x55	; 85
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e5 e5       	ldi	r30, 0x55	; 85
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	8c 93       	st	X, r24
		CLR_BIT(MCUCR , MCUCR_ISC01);
     d58:	a5 e5       	ldi	r26, 0x55	; 85
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e5       	ldi	r30, 0x55	; 85
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8d 7f       	andi	r24, 0xFD	; 253
     d64:	8c 93       	st	X, r24
     d66:	20 c0       	rjmp	.+64     	; 0xda8 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_FALLING_EDGE :
		CLR_BIT(MCUCR , MCUCR_ISC00);
     d68:	a5 e5       	ldi	r26, 0x55	; 85
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e5 e5       	ldi	r30, 0x55	; 85
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8e 7f       	andi	r24, 0xFE	; 254
     d74:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
     d76:	a5 e5       	ldi	r26, 0x55	; 85
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e5 e5       	ldi	r30, 0x55	; 85
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	82 60       	ori	r24, 0x02	; 2
     d82:	8c 93       	st	X, r24
     d84:	11 c0       	rjmp	.+34     	; 0xda8 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_RISING_EDGE :
		SET_BIT(MCUCR , MCUCR_ISC00);
     d86:	a5 e5       	ldi	r26, 0x55	; 85
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e5       	ldi	r30, 0x55	; 85
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
     d94:	a5 e5       	ldi	r26, 0x55	; 85
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e5       	ldi	r30, 0x55	; 85
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 60       	ori	r24, 0x02	; 2
     da0:	8c 93       	st	X, r24
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	default : u8ErrorState_Copy = NOK ;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	89 83       	std	Y+1, r24	; 0x01

	}
	return u8ErrorState_Copy ;
     da8:	89 81       	ldd	r24, Y+1	; 0x01
}
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <EXTI_u8Int1SetSenseControl>:
u8 EXTI_u8Int1SetSenseControl(u8 u8SenseCopy ){
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <EXTI_u8Int1SetSenseControl+0x6>
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	89 83       	std	Y+1, r24	; 0x01
	//TODO

}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <EXTI_u8Int2SetSenseControl>:
u8 EXTI_u8Int2SetSenseControl(u8 u8SenseCopy ){
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <EXTI_u8Int2SetSenseControl+0x6>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	89 83       	std	Y+1, r24	; 0x01
	//TODO

}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack (void (*PvInt0Func_Copy) (void)){
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <EXTI_u8Int0SetCallBack+0x6>
     dea:	0f 92       	push	r0
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	9b 83       	std	Y+3, r25	; 0x03
     df2:	8a 83       	std	Y+2, r24	; 0x02

	u8 u8ErrorStatusLocal = OK;
     df4:	19 82       	std	Y+1, r1	; 0x01
	if( PvInt0Func_Copy != NULL ){
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	39 f0       	breq	.+14     	; 0xe0c <EXTI_u8Int0SetCallBack+0x28>
		//global ptr = local variable
		EXTI_pvInt0func = PvInt0Func_Copy;
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	90 93 3f 01 	sts	0x013F, r25
     e06:	80 93 3e 01 	sts	0x013E, r24
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else{
		u8ErrorStatusLocal = NULL_POINTER;
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorStatusLocal ;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <__vector_1>:


/* ISR of INT0 */
void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void){
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0func != NULL){
     e48:	80 91 3e 01 	lds	r24, 0x013E
     e4c:	90 91 3f 01 	lds	r25, 0x013F
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	29 f0       	breq	.+10     	; 0xe5e <__vector_1+0x40>
		//global ptr
		EXTI_pvInt0func();
     e54:	e0 91 3e 01 	lds	r30, 0x013E
     e58:	f0 91 3f 01 	lds	r31, 0x013F
     e5c:	09 95       	icall
	}
	else{
		/* DO NOTHING */
	}

}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <DIO_SetPinValue>:
#include  "util/delay.h"



void  DIO_SetPinValue (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinValueCopy)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	27 97       	sbiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	6a 83       	std	Y+2, r22	; 0x02
     e9c:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <DIO_SetPinValue+0x22>
     ea4:	fc c0       	rjmp	.+504    	; 0x109e <DIO_SetPinValue+0x21a>
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	88 30       	cpi	r24, 0x08	; 8
     eaa:	08 f0       	brcs	.+2      	; 0xeae <DIO_SetPinValue+0x2a>
     eac:	f8 c0       	rjmp	.+496    	; 0x109e <DIO_SetPinValue+0x21a>
	{
		if(U8PinValueCopy == DIO_HIGH)
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <DIO_SetPinValue+0x32>
     eb4:	6f c0       	rjmp	.+222    	; 0xf94 <DIO_SetPinValue+0x110>
		{
			switch (U8PortIdcopy)
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3f 83       	std	Y+7, r19	; 0x07
     ebe:	2e 83       	std	Y+6, r18	; 0x06
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	9f 81       	ldd	r25, Y+7	; 0x07
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	91 05       	cpc	r25, r1
     ec8:	49 f1       	breq	.+82     	; 0xf1c <DIO_SetPinValue+0x98>
     eca:	2e 81       	ldd	r18, Y+6	; 0x06
     ecc:	3f 81       	ldd	r19, Y+7	; 0x07
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	2c f4       	brge	.+10     	; 0xede <DIO_SetPinValue+0x5a>
     ed4:	8e 81       	ldd	r24, Y+6	; 0x06
     ed6:	9f 81       	ldd	r25, Y+7	; 0x07
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	61 f0       	breq	.+24     	; 0xef4 <DIO_SetPinValue+0x70>
     edc:	ec c0       	rjmp	.+472    	; 0x10b6 <DIO_SetPinValue+0x232>
     ede:	2e 81       	ldd	r18, Y+6	; 0x06
     ee0:	3f 81       	ldd	r19, Y+7	; 0x07
     ee2:	22 30       	cpi	r18, 0x02	; 2
     ee4:	31 05       	cpc	r19, r1
     ee6:	71 f1       	breq	.+92     	; 0xf44 <DIO_SetPinValue+0xc0>
     ee8:	8e 81       	ldd	r24, Y+6	; 0x06
     eea:	9f 81       	ldd	r25, Y+7	; 0x07
     eec:	83 30       	cpi	r24, 0x03	; 3
     eee:	91 05       	cpc	r25, r1
     ef0:	e9 f1       	breq	.+122    	; 0xf6c <DIO_SetPinValue+0xe8>
     ef2:	e1 c0       	rjmp	.+450    	; 0x10b6 <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : SET_BIT(PORTA,U8PinIdCopy); break;
     ef4:	ab e3       	ldi	r26, 0x3B	; 59
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	eb e3       	ldi	r30, 0x3B	; 59
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_SetPinValue+0x8e>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_SetPinValue+0x8a>
     f16:	84 2b       	or	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	cd c0       	rjmp	.+410    	; 0x10b6 <DIO_SetPinValue+0x232>
				case DIO_PORTB : SET_BIT(PORTB,U8PinIdCopy); break;
     f1c:	a8 e3       	ldi	r26, 0x38	; 56
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_SetPinValue+0xb6>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_SetPinValue+0xb2>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	b9 c0       	rjmp	.+370    	; 0x10b6 <DIO_SetPinValue+0x232>
				case DIO_PORTC : SET_BIT(PORTC,U8PinIdCopy); break;
     f44:	a5 e3       	ldi	r26, 0x35	; 53
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e5 e3       	ldi	r30, 0x35	; 53
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_SetPinValue+0xde>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_SetPinValue+0xda>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	a5 c0       	rjmp	.+330    	; 0x10b6 <DIO_SetPinValue+0x232>
				case DIO_PORTD : SET_BIT(PORTD,U8PinIdCopy); break;
     f6c:	a2 e3       	ldi	r26, 0x32	; 50
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e2 e3       	ldi	r30, 0x32	; 50
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_SetPinValue+0x106>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_SetPinValue+0x102>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	91 c0       	rjmp	.+290    	; 0x10b6 <DIO_SetPinValue+0x232>
			}
		}
		else if (U8PinValueCopy == DIO_LOW)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 23       	and	r24, r24
     f98:	09 f0       	breq	.+2      	; 0xf9c <DIO_SetPinValue+0x118>
     f9a:	74 c0       	rjmp	.+232    	; 0x1084 <DIO_SetPinValue+0x200>
		{
			switch (U8PortIdcopy)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 83       	std	Y+5, r19	; 0x05
     fa4:	2c 83       	std	Y+4, r18	; 0x04
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	59 f1       	breq	.+86     	; 0x1006 <DIO_SetPinValue+0x182>
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <DIO_SetPinValue+0x140>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	69 f0       	breq	.+26     	; 0xfdc <DIO_SetPinValue+0x158>
     fc2:	79 c0       	rjmp	.+242    	; 0x10b6 <DIO_SetPinValue+0x232>
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	89 f1       	breq	.+98     	; 0x1030 <DIO_SetPinValue+0x1ac>
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	83 30       	cpi	r24, 0x03	; 3
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <DIO_SetPinValue+0x156>
     fd8:	40 c0       	rjmp	.+128    	; 0x105a <DIO_SetPinValue+0x1d6>
     fda:	6d c0       	rjmp	.+218    	; 0x10b6 <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : CLR_BIT(PORTA,U8PinIdCopy); break;
     fdc:	ab e3       	ldi	r26, 0x3B	; 59
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_SetPinValue+0x176>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_SetPinValue+0x172>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	58 c0       	rjmp	.+176    	; 0x10b6 <DIO_SetPinValue+0x232>
				case DIO_PORTB : CLR_BIT(PORTB,U8PinIdCopy); break;
    1006:	a8 e3       	ldi	r26, 0x38	; 56
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e8 e3       	ldi	r30, 0x38	; 56
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_SetPinValue+0x1a0>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_SetPinValue+0x19c>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	43 c0       	rjmp	.+134    	; 0x10b6 <DIO_SetPinValue+0x232>
				case DIO_PORTC : CLR_BIT(PORTC,U8PinIdCopy); break;
    1030:	a5 e3       	ldi	r26, 0x35	; 53
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_SetPinValue+0x1ca>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_SetPinValue+0x1c6>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	2e c0       	rjmp	.+92     	; 0x10b6 <DIO_SetPinValue+0x232>
				case DIO_PORTD : CLR_BIT(PORTD,U8PinIdCopy); break;
    105a:	a2 e3       	ldi	r26, 0x32	; 50
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e2 e3       	ldi	r30, 0x32	; 50
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_SetPinValue+0x1f4>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_SetPinValue+0x1f0>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	19 c0       	rjmp	.+50     	; 0x10b6 <DIO_SetPinValue+0x232>
			}
		}
		else
			printf("ERROR SELECT HIGH OR LOW VALUE.. ");
    1084:	00 d0       	rcall	.+0      	; 0x1086 <DIO_SetPinValue+0x202>
    1086:	ed b7       	in	r30, 0x3d	; 61
    1088:	fe b7       	in	r31, 0x3e	; 62
    108a:	31 96       	adiw	r30, 0x01	; 1
    108c:	80 e6       	ldi	r24, 0x60	; 96
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
    1094:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <printf>
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0c c0       	rjmp	.+24     	; 0x10b6 <DIO_SetPinValue+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <DIO_SetPinValue+0x21c>
    10a0:	ed b7       	in	r30, 0x3d	; 61
    10a2:	fe b7       	in	r31, 0x3e	; 62
    10a4:	31 96       	adiw	r30, 0x01	; 1
    10a6:	82 e8       	ldi	r24, 0x82	; 130
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
    10ae:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <printf>
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0

}
    10b6:	27 96       	adiw	r28, 0x07	; 7
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <DIO_SetPinDirection>:



void  DIO_SetPinDirection (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinDirCopy)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	27 97       	sbiw	r28, 0x07	; 7
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	6a 83       	std	Y+2, r22	; 0x02
    10e0:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	84 30       	cpi	r24, 0x04	; 4
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <DIO_SetPinDirection+0x22>
    10e8:	fc c0       	rjmp	.+504    	; 0x12e2 <DIO_SetPinDirection+0x21a>
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <DIO_SetPinDirection+0x2a>
    10f0:	f8 c0       	rjmp	.+496    	; 0x12e2 <DIO_SetPinDirection+0x21a>
	{
		if(U8PinDirCopy == DIO_OUTPUT)
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <DIO_SetPinDirection+0x32>
    10f8:	6f c0       	rjmp	.+222    	; 0x11d8 <DIO_SetPinDirection+0x110>
		{
			switch (U8PortIdcopy)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3f 83       	std	Y+7, r19	; 0x07
    1102:	2e 83       	std	Y+6, r18	; 0x06
    1104:	8e 81       	ldd	r24, Y+6	; 0x06
    1106:	9f 81       	ldd	r25, Y+7	; 0x07
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	49 f1       	breq	.+82     	; 0x1160 <DIO_SetPinDirection+0x98>
    110e:	2e 81       	ldd	r18, Y+6	; 0x06
    1110:	3f 81       	ldd	r19, Y+7	; 0x07
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <DIO_SetPinDirection+0x5a>
    1118:	8e 81       	ldd	r24, Y+6	; 0x06
    111a:	9f 81       	ldd	r25, Y+7	; 0x07
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <DIO_SetPinDirection+0x70>
    1120:	ec c0       	rjmp	.+472    	; 0x12fa <DIO_SetPinDirection+0x232>
    1122:	2e 81       	ldd	r18, Y+6	; 0x06
    1124:	3f 81       	ldd	r19, Y+7	; 0x07
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	71 f1       	breq	.+92     	; 0x1188 <DIO_SetPinDirection+0xc0>
    112c:	8e 81       	ldd	r24, Y+6	; 0x06
    112e:	9f 81       	ldd	r25, Y+7	; 0x07
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	e9 f1       	breq	.+122    	; 0x11b0 <DIO_SetPinDirection+0xe8>
    1136:	e1 c0       	rjmp	.+450    	; 0x12fa <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : SET_BIT(DDRA,U8PinIdCopy); break;
    1138:	aa e3       	ldi	r26, 0x3A	; 58
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ea e3       	ldi	r30, 0x3A	; 58
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_SetPinDirection+0x8e>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_SetPinDirection+0x8a>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	cd c0       	rjmp	.+410    	; 0x12fa <DIO_SetPinDirection+0x232>
			case DIO_PORTB : SET_BIT(DDRB,U8PinIdCopy); break;
    1160:	a7 e3       	ldi	r26, 0x37	; 55
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e7 e3       	ldi	r30, 0x37	; 55
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_SetPinDirection+0xb6>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_SetPinDirection+0xb2>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	b9 c0       	rjmp	.+370    	; 0x12fa <DIO_SetPinDirection+0x232>
			case DIO_PORTC : SET_BIT(DDRC,U8PinIdCopy); break;
    1188:	a4 e3       	ldi	r26, 0x34	; 52
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e4 e3       	ldi	r30, 0x34	; 52
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_SetPinDirection+0xde>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_SetPinDirection+0xda>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	a5 c0       	rjmp	.+330    	; 0x12fa <DIO_SetPinDirection+0x232>
			case DIO_PORTD : SET_BIT(DDRD,U8PinIdCopy); break;
    11b0:	a1 e3       	ldi	r26, 0x31	; 49
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e1 e3       	ldi	r30, 0x31	; 49
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_SetPinDirection+0x106>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_SetPinDirection+0x102>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	91 c0       	rjmp	.+290    	; 0x12fa <DIO_SetPinDirection+0x232>
			}
		}
		else if (U8PinDirCopy == DIO_INPUT)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <DIO_SetPinDirection+0x118>
    11de:	74 c0       	rjmp	.+232    	; 0x12c8 <DIO_SetPinDirection+0x200>
		{
			switch (U8PortIdcopy)
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3d 83       	std	Y+5, r19	; 0x05
    11e8:	2c 83       	std	Y+4, r18	; 0x04
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	9d 81       	ldd	r25, Y+5	; 0x05
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	91 05       	cpc	r25, r1
    11f2:	59 f1       	breq	.+86     	; 0x124a <DIO_SetPinDirection+0x182>
    11f4:	2c 81       	ldd	r18, Y+4	; 0x04
    11f6:	3d 81       	ldd	r19, Y+5	; 0x05
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	2c f4       	brge	.+10     	; 0x1208 <DIO_SetPinDirection+0x140>
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	69 f0       	breq	.+26     	; 0x1220 <DIO_SetPinDirection+0x158>
    1206:	79 c0       	rjmp	.+242    	; 0x12fa <DIO_SetPinDirection+0x232>
    1208:	2c 81       	ldd	r18, Y+4	; 0x04
    120a:	3d 81       	ldd	r19, Y+5	; 0x05
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	89 f1       	breq	.+98     	; 0x1274 <DIO_SetPinDirection+0x1ac>
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	91 05       	cpc	r25, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <DIO_SetPinDirection+0x156>
    121c:	40 c0       	rjmp	.+128    	; 0x129e <DIO_SetPinDirection+0x1d6>
    121e:	6d c0       	rjmp	.+218    	; 0x12fa <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : CLR_BIT(DDRA,U8PinIdCopy); break;
    1220:	aa e3       	ldi	r26, 0x3A	; 58
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ea e3       	ldi	r30, 0x3A	; 58
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_SetPinDirection+0x176>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_SetPinDirection+0x172>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	58 c0       	rjmp	.+176    	; 0x12fa <DIO_SetPinDirection+0x232>
			case DIO_PORTB : CLR_BIT(DDRB,U8PinIdCopy); break;
    124a:	a7 e3       	ldi	r26, 0x37	; 55
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e7 e3       	ldi	r30, 0x37	; 55
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_SetPinDirection+0x1a0>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_SetPinDirection+0x19c>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	43 c0       	rjmp	.+134    	; 0x12fa <DIO_SetPinDirection+0x232>
			case DIO_PORTC : CLR_BIT(DDRC,U8PinIdCopy); break;
    1274:	a4 e3       	ldi	r26, 0x34	; 52
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e4 e3       	ldi	r30, 0x34	; 52
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_SetPinDirection+0x1ca>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_SetPinDirection+0x1c6>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	2e c0       	rjmp	.+92     	; 0x12fa <DIO_SetPinDirection+0x232>
			case DIO_PORTD : CLR_BIT(DDRD,U8PinIdCopy); break;
    129e:	a1 e3       	ldi	r26, 0x31	; 49
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e1 e3       	ldi	r30, 0x31	; 49
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_SetPinDirection+0x1f4>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_SetPinDirection+0x1f0>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	19 c0       	rjmp	.+50     	; 0x12fa <DIO_SetPinDirection+0x232>
			}
		}else
			printf("ERROR SELECT OUTPUT OR INPUT VALUE.. ");
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_SetPinDirection+0x202>
    12ca:	ed b7       	in	r30, 0x3d	; 61
    12cc:	fe b7       	in	r31, 0x3e	; 62
    12ce:	31 96       	adiw	r30, 0x01	; 1
    12d0:	86 eb       	ldi	r24, 0xB6	; 182
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	80 83       	st	Z, r24
    12d8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <printf>
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0c c0       	rjmp	.+24     	; 0x12fa <DIO_SetPinDirection+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <DIO_SetPinDirection+0x21c>
    12e4:	ed b7       	in	r30, 0x3d	; 61
    12e6:	fe b7       	in	r31, 0x3e	; 62
    12e8:	31 96       	adiw	r30, 0x01	; 1
    12ea:	82 e8       	ldi	r24, 0x82	; 130
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
    12f2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <printf>
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
}
    12fa:	27 96       	adiw	r28, 0x07	; 7
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <DIO_GetPinValue>:


u8    DIO_GetPinValue  (u8 U8PortIdCopy , u8 U8PinIdCopy)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <DIO_GetPinValue+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <DIO_GetPinValue+0x8>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <DIO_GetPinValue+0xa>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	6b 83       	std	Y+3, r22	; 0x03
	if((U8PortIdCopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	08 f0       	brcs	.+2      	; 0x1326 <DIO_GetPinValue+0x1a>
    1324:	6f c0       	rjmp	.+222    	; 0x1404 <DIO_GetPinValue+0xf8>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 30       	cpi	r24, 0x08	; 8
    132a:	08 f0       	brcs	.+2      	; 0x132e <DIO_GetPinValue+0x22>
    132c:	6b c0       	rjmp	.+214    	; 0x1404 <DIO_GetPinValue+0xf8>
	{
		u8 PinValue=0;
    132e:	19 82       	std	Y+1, r1	; 0x01

			switch (U8PortIdCopy)
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3e 83       	std	Y+6, r19	; 0x06
    1338:	2d 83       	std	Y+5, r18	; 0x05
    133a:	4d 81       	ldd	r20, Y+5	; 0x05
    133c:	5e 81       	ldd	r21, Y+6	; 0x06
    133e:	41 30       	cpi	r20, 0x01	; 1
    1340:	51 05       	cpc	r21, r1
    1342:	41 f1       	breq	.+80     	; 0x1394 <DIO_GetPinValue+0x88>
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	91 05       	cpc	r25, r1
    134c:	34 f4       	brge	.+12     	; 0x135a <DIO_GetPinValue+0x4e>
    134e:	2d 81       	ldd	r18, Y+5	; 0x05
    1350:	3e 81       	ldd	r19, Y+6	; 0x06
    1352:	21 15       	cp	r18, r1
    1354:	31 05       	cpc	r19, r1
    1356:	61 f0       	breq	.+24     	; 0x1370 <DIO_GetPinValue+0x64>
    1358:	52 c0       	rjmp	.+164    	; 0x13fe <DIO_GetPinValue+0xf2>
    135a:	4d 81       	ldd	r20, Y+5	; 0x05
    135c:	5e 81       	ldd	r21, Y+6	; 0x06
    135e:	42 30       	cpi	r20, 0x02	; 2
    1360:	51 05       	cpc	r21, r1
    1362:	51 f1       	breq	.+84     	; 0x13b8 <DIO_GetPinValue+0xac>
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	b9 f1       	breq	.+110    	; 0x13dc <DIO_GetPinValue+0xd0>
    136e:	47 c0       	rjmp	.+142    	; 0x13fe <DIO_GetPinValue+0xf2>
			{
				case DIO_PORTA : PinValue= GET_BIT(PINA,U8PinIdCopy); break;
    1370:	e9 e3       	ldi	r30, 0x39	; 57
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_GetPinValue+0x7c>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_GetPinValue+0x78>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	35 c0       	rjmp	.+106    	; 0x13fe <DIO_GetPinValue+0xf2>
				case DIO_PORTB : PinValue= GET_BIT(PINB,U8PinIdCopy); break;
    1394:	e6 e3       	ldi	r30, 0x36	; 54
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_GetPinValue+0xa0>
    13a8:	55 95       	asr	r21
    13aa:	47 95       	ror	r20
    13ac:	8a 95       	dec	r24
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_GetPinValue+0x9c>
    13b0:	ca 01       	movw	r24, r20
    13b2:	81 70       	andi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	23 c0       	rjmp	.+70     	; 0x13fe <DIO_GetPinValue+0xf2>
				case DIO_PORTC : PinValue= GET_BIT(PINC,U8PinIdCopy); break;
    13b8:	e3 e3       	ldi	r30, 0x33	; 51
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_GetPinValue+0xc4>
    13cc:	55 95       	asr	r21
    13ce:	47 95       	ror	r20
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_GetPinValue+0xc0>
    13d4:	ca 01       	movw	r24, r20
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	11 c0       	rjmp	.+34     	; 0x13fe <DIO_GetPinValue+0xf2>
				case DIO_PORTD : PinValue= GET_BIT(PIND,U8PinIdCopy); break;
    13dc:	e0 e3       	ldi	r30, 0x30	; 48
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a9 01       	movw	r20, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_GetPinValue+0xe8>
    13f0:	55 95       	asr	r21
    13f2:	47 95       	ror	r20
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_GetPinValue+0xe4>
    13f8:	ca 01       	movw	r24, r20
    13fa:	81 70       	andi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
			}
		return PinValue;
    13fe:	59 81       	ldd	r21, Y+1	; 0x01
    1400:	5c 83       	std	Y+4, r21	; 0x04
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <DIO_GetPinValue+0xfa>

	}else
	{
	}
	return 0;
    1404:	1c 82       	std	Y+4, r1	; 0x04
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1408:	26 96       	adiw	r28, 0x06	; 6
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_SetPortValue>:


void  DIO_SetPortValue (u8 U8PortIdcopy ,u8 U8PinValueCopy)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_SetPortValue+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_SetPortValue+0x8>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	84 30       	cpi	r24, 0x04	; 4
    142e:	98 f5       	brcc	.+102    	; 0x1496 <DIO_SetPortValue+0x7c>
	{

			switch (U8PortIdcopy)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3c 83       	std	Y+4, r19	; 0x04
    1438:	2b 83       	std	Y+3, r18	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	d1 f0       	breq	.+52     	; 0x1478 <DIO_SetPortValue+0x5e>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	2c f4       	brge	.+10     	; 0x1458 <DIO_SetPortValue+0x3e>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	61 f0       	breq	.+24     	; 0x146e <DIO_SetPortValue+0x54>
    1456:	2b c0       	rjmp	.+86     	; 0x14ae <DIO_SetPortValue+0x94>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	81 f0       	breq	.+32     	; 0x1482 <DIO_SetPortValue+0x68>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	83 30       	cpi	r24, 0x03	; 3
    1468:	91 05       	cpc	r25, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <DIO_SetPortValue+0x72>
    146c:	20 c0       	rjmp	.+64     	; 0x14ae <DIO_SetPortValue+0x94>
			{
				case DIO_PORTA : SET_PORT(PORTA,U8PinValueCopy); break;
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
    1476:	1b c0       	rjmp	.+54     	; 0x14ae <DIO_SetPortValue+0x94>
				case DIO_PORTB : SET_PORT(PORTB,U8PinValueCopy); break;
    1478:	e8 e3       	ldi	r30, 0x38	; 56
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	16 c0       	rjmp	.+44     	; 0x14ae <DIO_SetPortValue+0x94>
				case DIO_PORTC : SET_PORT(PORTC,U8PinValueCopy); break;
    1482:	e5 e3       	ldi	r30, 0x35	; 53
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	11 c0       	rjmp	.+34     	; 0x14ae <DIO_SetPortValue+0x94>
				case DIO_PORTD : SET_PORT(PORTD,U8PinValueCopy); break;
    148c:	e2 e3       	ldi	r30, 0x32	; 50
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <DIO_SetPortValue+0x94>
			}



	}else
		printf("ERROR SELECTION PORTS FROM 0--3...");
    1496:	00 d0       	rcall	.+0      	; 0x1498 <DIO_SetPortValue+0x7e>
    1498:	ed b7       	in	r30, 0x3d	; 61
    149a:	fe b7       	in	r31, 0x3e	; 62
    149c:	31 96       	adiw	r30, 0x01	; 1
    149e:	8c ed       	ldi	r24, 0xDC	; 220
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <printf>
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0


}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <DIO_SetPortDirection>:
void  DIO_SetPortDirection (u8 U8PortIdcopy ,u8 U8PinDirCopy)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_SetPortDirection+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <DIO_SetPortDirection+0x8>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	84 30       	cpi	r24, 0x04	; 4
    14d0:	98 f5       	brcc	.+102    	; 0x1538 <DIO_SetPortDirection+0x7c>
	{

			switch (U8PortIdcopy)
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	3c 83       	std	Y+4, r19	; 0x04
    14da:	2b 83       	std	Y+3, r18	; 0x03
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	d1 f0       	breq	.+52     	; 0x151a <DIO_SetPortDirection+0x5e>
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	2c f4       	brge	.+10     	; 0x14fa <DIO_SetPortDirection+0x3e>
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	61 f0       	breq	.+24     	; 0x1510 <DIO_SetPortDirection+0x54>
    14f8:	2b c0       	rjmp	.+86     	; 0x1550 <DIO_SetPortDirection+0x94>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	81 f0       	breq	.+32     	; 0x1524 <DIO_SetPortDirection+0x68>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	91 05       	cpc	r25, r1
    150c:	81 f0       	breq	.+32     	; 0x152e <DIO_SetPortDirection+0x72>
    150e:	20 c0       	rjmp	.+64     	; 0x1550 <DIO_SetPortDirection+0x94>
			{
			case DIO_PORTA : SET_PORT(DDRA,0XFF); break;
    1510:	ea e3       	ldi	r30, 0x3A	; 58
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	80 83       	st	Z, r24
    1518:	1b c0       	rjmp	.+54     	; 0x1550 <DIO_SetPortDirection+0x94>
			case DIO_PORTB : SET_PORT(DDRB,0XFF); break;
    151a:	e7 e3       	ldi	r30, 0x37	; 55
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	80 83       	st	Z, r24
    1522:	16 c0       	rjmp	.+44     	; 0x1550 <DIO_SetPortDirection+0x94>
			case DIO_PORTC : SET_PORT(DDRC,0XFF); break;
    1524:	e4 e3       	ldi	r30, 0x34	; 52
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	80 83       	st	Z, r24
    152c:	11 c0       	rjmp	.+34     	; 0x1550 <DIO_SetPortDirection+0x94>
			case DIO_PORTD : SET_PORT(DDRD,0XFF); break;
    152e:	e1 e3       	ldi	r30, 0x31	; 49
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	80 83       	st	Z, r24
    1536:	0c c0       	rjmp	.+24     	; 0x1550 <DIO_SetPortDirection+0x94>
			}


	}else
		printf("ERROR SELECTION PORTS FROM 0--3....");
    1538:	00 d0       	rcall	.+0      	; 0x153a <DIO_SetPortDirection+0x7e>
    153a:	ed b7       	in	r30, 0x3d	; 61
    153c:	fe b7       	in	r31, 0x3e	; 62
    153e:	31 96       	adiw	r30, 0x01	; 1
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
    1548:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <printf>
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0

}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <ADC_Init>:
#include "avr/io.h"
#include "ADC.h"


void ADC_Init (void)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
	// ADC Enable
	SET_BIT(ADCSRA , ADCSRA_ADEN);
    1566:	a6 e2       	ldi	r26, 0x26	; 38
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e6 e2       	ldi	r30, 0x26	; 38
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	8c 93       	st	X, r24

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA , ADCSRA_ADPS2);
    1574:	a6 e2       	ldi	r26, 0x26	; 38
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e6 e2       	ldi	r30, 0x26	; 38
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	84 60       	ori	r24, 0x04	; 4
    1580:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1);
    1582:	a6 e2       	ldi	r26, 0x26	; 38
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e6 e2       	ldi	r30, 0x26	; 38
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	82 60       	ori	r24, 0x02	; 2
    158e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS0);
    1590:	a6 e2       	ldi	r26, 0x26	; 38
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e6 e2       	ldi	r30, 0x26	; 38
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	81 60       	ori	r24, 0x01	; 1
    159c:	8c 93       	st	X, r24


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT (ADMUX  , ADMUX_REFS1);
    159e:	a7 e2       	ldi	r26, 0x27	; 39
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e7 e2       	ldi	r30, 0x27	; 39
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8f 77       	andi	r24, 0x7F	; 127
    15aa:	8c 93       	st	X, r24
	SET_BIT (ADMUX  , ADMUX_REFS0);
    15ac:	a7 e2       	ldi	r26, 0x27	; 39
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e7 e2       	ldi	r30, 0x27	; 39
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 64       	ori	r24, 0x40	; 64
    15b8:	8c 93       	st	X, r24

	/*ADC Data Rgith Adjustment 10 bits
	CLR_BIT(ADMUX , ADMUX_ADLAR);*/

	/*Activate Left adjustment result 8 bits */
	SET_BIT(ADMUX , ADMUX_ADLAR);
    15ba:	a7 e2       	ldi	r26, 0x27	; 39
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e7 e2       	ldi	r30, 0x27	; 39
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 62       	ori	r24, 0x20	; 32
    15c6:	8c 93       	st	X, r24

}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <ADC_Read>:

u16 ADC_Read (u8 channel)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
	//step 1 : Clear MUX bits in ADMUX
	ADMUX   &= 0b11100000;
    15da:	a7 e2       	ldi	r26, 0x27	; 39
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e7 e2       	ldi	r30, 0x27	; 39
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	80 7e       	andi	r24, 0xE0	; 224
    15e6:	8c 93       	st	X, r24


	//Step 2 : Set the required  ADC Channel Selection into the MUX bits
	ADMUX   |=channel;
    15e8:	a7 e2       	ldi	r26, 0x27	; 39
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e7 e2       	ldi	r30, 0x27	; 39
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	90 81       	ld	r25, Z
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	89 2b       	or	r24, r25
    15f6:	8c 93       	st	X, r24


	// Step 3 : Start Single Converstion
	SET_BIT(ADCSRA , ADCSRA_ADSC );
    15f8:	a6 e2       	ldi	r26, 0x26	; 38
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e6 e2       	ldi	r30, 0x26	; 38
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	80 64       	ori	r24, 0x40	; 64
    1604:	8c 93       	st	X, r24


	// Step 4 :  Polling (busy wait ) until the conversion complete flag is set
	while((GET_BIT(ADCSRA , ADCSRA_ADIF)) == 0);
    1606:	e6 e2       	ldi	r30, 0x26	; 38
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	82 95       	swap	r24
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	81 70       	andi	r24, 0x01	; 1
    1616:	90 70       	andi	r25, 0x00	; 0
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	a9 f3       	breq	.-22     	; 0x1606 <ADC_Read+0x38>


	// Step 5 :  Clear Conversion Complete Flag
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    161c:	a6 e2       	ldi	r26, 0x26	; 38
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e6 e2       	ldi	r30, 0x26	; 38
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 61       	ori	r24, 0x10	; 16
    1628:	8c 93       	st	X, r24

	// Step 7 :   return value in ADCH (Left adjustment result 8 bits)

	return ADCH;
    162a:	e5 e2       	ldi	r30, 0x25	; 37
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
}
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <LCD_VoidSendChar>:




void LCD_VoidSendChar(u8 U8DataCopy)
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	2f 97       	sbiw	r28, 0x0f	; 15
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	6f ef       	ldi	r22, 0xFF	; 255
    1656:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_HIGH);
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8DataCopy);
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1690:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	62 e0       	ldi	r22, 0x02	; 2
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a0 ea       	ldi	r26, 0xA0	; 160
    16a4:	b1 e4       	ldi	r27, 0x41	; 65
    16a6:	8b 87       	std	Y+11, r24	; 0x0b
    16a8:	9c 87       	std	Y+12, r25	; 0x0c
    16aa:	ad 87       	std	Y+13, r26	; 0x0d
    16ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a ef       	ldi	r20, 0xFA	; 250
    16bc:	54 e4       	ldi	r21, 0x44	; 68
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8f 83       	std	Y+7, r24	; 0x07
    16c8:	98 87       	std	Y+8, r25	; 0x08
    16ca:	a9 87       	std	Y+9, r26	; 0x09
    16cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	3f c0       	rjmp	.+126    	; 0x176e <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <LCD_VoidSendChar+0x114>
    1732:	88 ec       	ldi	r24, 0xC8	; 200
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_VoidSendChar+0x102>
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <LCD_VoidSendChar+0xf6>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_VoidSendChar+0x13e>
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>


}
    178c:	2f 96       	adiw	r28, 0x0f	; 15
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 U8CommandCopy)
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	2f 97       	sbiw	r28, 0x0f	; 15
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	6f ef       	ldi	r22, 0xFF	; 255
    17b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	62 e0       	ldi	r22, 0x02	; 2
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8CommandCopy);
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    17f2:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 ea       	ldi	r26, 0xA0	; 160
    1806:	b1 e4       	ldi	r27, 0x41	; 65
    1808:	8b 87       	std	Y+11, r24	; 0x0b
    180a:	9c 87       	std	Y+12, r25	; 0x0c
    180c:	ad 87       	std	Y+13, r26	; 0x0d
    180e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1810:	6b 85       	ldd	r22, Y+11	; 0x0b
    1812:	7c 85       	ldd	r23, Y+12	; 0x0c
    1814:	8d 85       	ldd	r24, Y+13	; 0x0d
    1816:	9e 85       	ldd	r25, Y+14	; 0x0e
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4a ef       	ldi	r20, 0xFA	; 250
    181e:	54 e4       	ldi	r21, 0x44	; 68
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8f 83       	std	Y+7, r24	; 0x07
    182a:	98 87       	std	Y+8, r25	; 0x08
    182c:	a9 87       	std	Y+9, r26	; 0x09
    182e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1830:	6f 81       	ldd	r22, Y+7	; 0x07
    1832:	78 85       	ldd	r23, Y+8	; 0x08
    1834:	89 85       	ldd	r24, Y+9	; 0x09
    1836:	9a 85       	ldd	r25, Y+10	; 0x0a
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e8       	ldi	r20, 0x80	; 128
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1844:	88 23       	and	r24, r24
    1846:	2c f4       	brge	.+10     	; 0x1852 <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	3f c0       	rjmp	.+126    	; 0x18d0 <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    1852:	6f 81       	ldd	r22, Y+7	; 0x07
    1854:	78 85       	ldd	r23, Y+8	; 0x08
    1856:	89 85       	ldd	r24, Y+9	; 0x09
    1858:	9a 85       	ldd	r25, Y+10	; 0x0a
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	4f e7       	ldi	r20, 0x7F	; 127
    1860:	57 e4       	ldi	r21, 0x47	; 71
    1862:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1866:	18 16       	cp	r1, r24
    1868:	4c f5       	brge	.+82     	; 0x18bc <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186a:	6b 85       	ldd	r22, Y+11	; 0x0b
    186c:	7c 85       	ldd	r23, Y+12	; 0x0c
    186e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1870:	9e 85       	ldd	r25, Y+14	; 0x0e
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e2       	ldi	r20, 0x20	; 32
    1878:	51 e4       	ldi	r21, 0x41	; 65
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9e 83       	std	Y+6, r25	; 0x06
    1890:	8d 83       	std	Y+5, r24	; 0x05
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <LCD_VoidSendCommand+0x114>
    1894:	88 ec       	ldi	r24, 0xC8	; 200
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	9c 83       	std	Y+4, r25	; 0x04
    189a:	8b 83       	std	Y+3, r24	; 0x03
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_VoidSendCommand+0x102>
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	69 f7       	brne	.-38     	; 0x1894 <LCD_VoidSendCommand+0xf6>
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18bc:	6f 81       	ldd	r22, Y+7	; 0x07
    18be:	78 85       	ldd	r23, Y+8	; 0x08
    18c0:	89 85       	ldd	r24, Y+9	; 0x09
    18c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	9a 81       	ldd	r25, Y+2	; 0x02
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_VoidSendCommand+0x13e>
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	62 e0       	ldi	r22, 0x02	; 2
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>


}
    18ee:	2f 96       	adiw	r28, 0x0f	; 15
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <LCD_voidSendData>:
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <LCD_voidSendData+0x6>
    1906:	0f 92       	push	r0
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	9b 83       	std	Y+3, r25	; 0x03
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	0e c0       	rjmp	.+28     	; 0x1930 <LCD_voidSendData+0x30>
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	fc 01       	movw	r30, r24
    1920:	e2 0f       	add	r30, r18
    1922:	f3 1f       	adc	r31, r19
    1924:	80 81       	ld	r24, Z
    1926:	0e 94 1e 0b 	call	0x163c	; 0x163c <LCD_VoidSendChar>
    	  Local_u8Counter ++;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	89 83       	std	Y+1, r24	; 0x01


}
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	fc 01       	movw	r30, r24
    193c:	e2 0f       	add	r30, r18
    193e:	f3 1f       	adc	r31, r19
    1940:	80 81       	ld	r24, Z
    1942:	88 23       	and	r24, r24
    1944:	39 f7       	brne	.-50     	; 0x1914 <LCD_voidSendData+0x14>
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    	  Local_u8Counter ++;
      }
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <LCD_Voidinit>:
void LCD_Voidinit(void)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	e8 97       	sbiw	r28, 0x38	; 56
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a0 e2       	ldi	r26, 0x20	; 32
    1994:	b2 e4       	ldi	r27, 0x42	; 66
    1996:	8d ab       	std	Y+53, r24	; 0x35
    1998:	9e ab       	std	Y+54, r25	; 0x36
    199a:	af ab       	std	Y+55, r26	; 0x37
    199c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199e:	6d a9       	ldd	r22, Y+53	; 0x35
    19a0:	7e a9       	ldd	r23, Y+54	; 0x36
    19a2:	8f a9       	ldd	r24, Y+55	; 0x37
    19a4:	98 ad       	ldd	r25, Y+56	; 0x38
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	4a ef       	ldi	r20, 0xFA	; 250
    19ac:	54 e4       	ldi	r21, 0x44	; 68
    19ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	89 ab       	std	Y+49, r24	; 0x31
    19b8:	9a ab       	std	Y+50, r25	; 0x32
    19ba:	ab ab       	std	Y+51, r26	; 0x33
    19bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19be:	69 a9       	ldd	r22, Y+49	; 0x31
    19c0:	7a a9       	ldd	r23, Y+50	; 0x32
    19c2:	8b a9       	ldd	r24, Y+51	; 0x33
    19c4:	9c a9       	ldd	r25, Y+52	; 0x34
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e8       	ldi	r20, 0x80	; 128
    19cc:	5f e3       	ldi	r21, 0x3F	; 63
    19ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d2:	88 23       	and	r24, r24
    19d4:	2c f4       	brge	.+10     	; 0x19e0 <LCD_Voidinit+0x8e>
		__ticks = 1;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	98 ab       	std	Y+48, r25	; 0x30
    19dc:	8f a7       	std	Y+47, r24	; 0x2f
    19de:	3f c0       	rjmp	.+126    	; 0x1a5e <LCD_Voidinit+0x10c>
	else if (__tmp > 65535)
    19e0:	69 a9       	ldd	r22, Y+49	; 0x31
    19e2:	7a a9       	ldd	r23, Y+50	; 0x32
    19e4:	8b a9       	ldd	r24, Y+51	; 0x33
    19e6:	9c a9       	ldd	r25, Y+52	; 0x34
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	3f ef       	ldi	r19, 0xFF	; 255
    19ec:	4f e7       	ldi	r20, 0x7F	; 127
    19ee:	57 e4       	ldi	r21, 0x47	; 71
    19f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	4c f5       	brge	.+82     	; 0x1a4a <LCD_Voidinit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f8:	6d a9       	ldd	r22, Y+53	; 0x35
    19fa:	7e a9       	ldd	r23, Y+54	; 0x36
    19fc:	8f a9       	ldd	r24, Y+55	; 0x37
    19fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e2       	ldi	r20, 0x20	; 32
    1a06:	51 e4       	ldi	r21, 0x41	; 65
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	98 ab       	std	Y+48, r25	; 0x30
    1a1e:	8f a7       	std	Y+47, r24	; 0x2f
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <LCD_Voidinit+0xee>
    1a22:	88 ec       	ldi	r24, 0xC8	; 200
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9e a7       	std	Y+46, r25	; 0x2e
    1a28:	8d a7       	std	Y+45, r24	; 0x2d
    1a2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_Voidinit+0xdc>
    1a32:	9e a7       	std	Y+46, r25	; 0x2e
    1a34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a38:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	98 ab       	std	Y+48, r25	; 0x30
    1a3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a42:	98 a9       	ldd	r25, Y+48	; 0x30
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <LCD_Voidinit+0xd0>
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <LCD_Voidinit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a50:	9c a9       	ldd	r25, Y+52	; 0x34
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	98 ab       	std	Y+48, r25	; 0x30
    1a5c:	8f a7       	std	Y+47, r24	; 0x2f
    1a5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a60:	98 a9       	ldd	r25, Y+48	; 0x30
    1a62:	9c a7       	std	Y+44, r25	; 0x2c
    1a64:	8b a7       	std	Y+43, r24	; 0x2b
    1a66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <LCD_Voidinit+0x118>
    1a6e:	9c a7       	std	Y+44, r25	; 0x2c
    1a70:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	/*Function set command: 2 lines(N = 1), 5*8 Font size (F = 0 )*/
	LCD_VoidSendCommand(FUNCTION_SET);
    1a72:	88 e3       	ldi	r24, 0x38	; 56
    1a74:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_VoidSendCommand>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e8       	ldi	r26, 0x80	; 128
    1a7e:	bf e3       	ldi	r27, 0x3F	; 63
    1a80:	8f a3       	std	Y+39, r24	; 0x27
    1a82:	98 a7       	std	Y+40, r25	; 0x28
    1a84:	a9 a7       	std	Y+41, r26	; 0x29
    1a86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a ef       	ldi	r20, 0xFA	; 250
    1a96:	54 e4       	ldi	r21, 0x44	; 68
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8b a3       	std	Y+35, r24	; 0x23
    1aa2:	9c a3       	std	Y+36, r25	; 0x24
    1aa4:	ad a3       	std	Y+37, r26	; 0x25
    1aa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aa8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aaa:	7c a1       	ldd	r23, Y+36	; 0x24
    1aac:	8d a1       	ldd	r24, Y+37	; 0x25
    1aae:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <LCD_Voidinit+0x178>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9a a3       	std	Y+34, r25	; 0x22
    1ac6:	89 a3       	std	Y+33, r24	; 0x21
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <LCD_Voidinit+0x1f6>
	else if (__tmp > 65535)
    1aca:	6b a1       	ldd	r22, Y+35	; 0x23
    1acc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ace:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <LCD_Voidinit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9a a3       	std	Y+34, r25	; 0x22
    1b08:	89 a3       	std	Y+33, r24	; 0x21
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <LCD_Voidinit+0x1d8>
    1b0c:	88 ec       	ldi	r24, 0xC8	; 200
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	98 a3       	std	Y+32, r25	; 0x20
    1b12:	8f 8f       	std	Y+31, r24	; 0x1f
    1b14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b16:	98 a1       	ldd	r25, Y+32	; 0x20
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_Voidinit+0x1c6>
    1b1c:	98 a3       	std	Y+32, r25	; 0x20
    1b1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9a a3       	std	Y+34, r25	; 0x22
    1b28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <LCD_Voidinit+0x1ba>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <LCD_Voidinit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6b a1       	ldd	r22, Y+35	; 0x23
    1b36:	7c a1       	ldd	r23, Y+36	; 0x24
    1b38:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9a a3       	std	Y+34, r25	; 0x22
    1b46:	89 a3       	std	Y+33, r24	; 0x21
    1b48:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_Voidinit+0x202>
    1b58:	9e 8f       	std	Y+30, r25	; 0x1e
    1b5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display on off control: display enable, disable cursor, no blink cursor*/
	LCD_VoidSendCommand(DISPLAY_SET);
    1b5c:	8c e0       	ldi	r24, 0x0C	; 12
    1b5e:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_VoidSendCommand>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e8       	ldi	r26, 0x80	; 128
    1b68:	bf e3       	ldi	r27, 0x3F	; 63
    1b6a:	89 8f       	std	Y+25, r24	; 0x19
    1b6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	69 8d       	ldd	r22, Y+25	; 0x19
    1b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4a ef       	ldi	r20, 0xFA	; 250
    1b80:	54 e4       	ldi	r21, 0x44	; 68
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	8d 8b       	std	Y+21, r24	; 0x15
    1b8c:	9e 8b       	std	Y+22, r25	; 0x16
    1b8e:	af 8b       	std	Y+23, r26	; 0x17
    1b90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b92:	6d 89       	ldd	r22, Y+21	; 0x15
    1b94:	7e 89       	ldd	r23, Y+22	; 0x16
    1b96:	8f 89       	ldd	r24, Y+23	; 0x17
    1b98:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <LCD_Voidinit+0x262>
		__ticks = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <LCD_Voidinit+0x2e0>
	else if (__tmp > 65535)
    1bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bba:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f e7       	ldi	r20, 0x7F	; 127
    1bc2:	57 e4       	ldi	r21, 0x47	; 71
    1bc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	4c f5       	brge	.+82     	; 0x1c1e <LCD_Voidinit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e2       	ldi	r20, 0x20	; 32
    1bda:	51 e4       	ldi	r21, 0x41	; 65
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9c 8b       	std	Y+20, r25	; 0x14
    1bf2:	8b 8b       	std	Y+19, r24	; 0x13
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <LCD_Voidinit+0x2c2>
    1bf6:	88 ec       	ldi	r24, 0xC8	; 200
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9a 8b       	std	Y+18, r25	; 0x12
    1bfc:	89 8b       	std	Y+17, r24	; 0x11
    1bfe:	89 89       	ldd	r24, Y+17	; 0x11
    1c00:	9a 89       	ldd	r25, Y+18	; 0x12
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_Voidinit+0x2b0>
    1c06:	9a 8b       	std	Y+18, r25	; 0x12
    1c08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	9c 8b       	std	Y+20, r25	; 0x14
    1c12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c14:	8b 89       	ldd	r24, Y+19	; 0x13
    1c16:	9c 89       	ldd	r25, Y+20	; 0x14
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	69 f7       	brne	.-38     	; 0x1bf6 <LCD_Voidinit+0x2a4>
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <LCD_Voidinit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c20:	7e 89       	ldd	r23, Y+22	; 0x16
    1c22:	8f 89       	ldd	r24, Y+23	; 0x17
    1c24:	98 8d       	ldd	r25, Y+24	; 0x18
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9c 8b       	std	Y+20, r25	; 0x14
    1c30:	8b 8b       	std	Y+19, r24	; 0x13
    1c32:	8b 89       	ldd	r24, Y+19	; 0x13
    1c34:	9c 89       	ldd	r25, Y+20	; 0x14
    1c36:	98 8b       	std	Y+16, r25	; 0x10
    1c38:	8f 87       	std	Y+15, r24	; 0x0f
    1c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3c:	98 89       	ldd	r25, Y+16	; 0x10
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_Voidinit+0x2ec>
    1c42:	98 8b       	std	Y+16, r25	; 0x10
    1c44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Clear display*/
	LCD_VoidSendCommand(CLEAR);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_VoidSendCommand>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e8       	ldi	r26, 0x80	; 128
    1c52:	bf e3       	ldi	r27, 0x3F	; 63
    1c54:	8b 87       	std	Y+11, r24	; 0x0b
    1c56:	9c 87       	std	Y+12, r25	; 0x0c
    1c58:	ad 87       	std	Y+13, r26	; 0x0d
    1c5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a ef       	ldi	r20, 0xFA	; 250
    1c6a:	54 e4       	ldi	r21, 0x44	; 68
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8f 83       	std	Y+7, r24	; 0x07
    1c76:	98 87       	std	Y+8, r25	; 0x08
    1c78:	a9 87       	std	Y+9, r26	; 0x09
    1c7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <LCD_Voidinit+0x34c>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <LCD_Voidinit+0x3ca>
	else if (__tmp > 65535)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	4c f5       	brge	.+82     	; 0x1d08 <LCD_Voidinit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <LCD_Voidinit+0x3ac>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_Voidinit+0x39a>
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <LCD_Voidinit+0x38e>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <LCD_Voidinit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0a:	78 85       	ldd	r23, Y+8	; 0x08
    1d0c:	89 85       	ldd	r24, Y+9	; 0x09
    1d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9e 83       	std	Y+6, r25	; 0x06
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_Voidinit+0x3d6>
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1d30:	e8 96       	adiw	r28, 0x38	; 56
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <KEYPAD_VoidInit>:
#include "../../MCAL/DIO/DIO.h"
#include "avr/delay.h"


void KEYPAD_VoidInit(void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	/*step1 configuring rows direction and pullup ressistor(internal)....	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_INPUT);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_INPUT);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_INPUT);
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_INPUT);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	63 e0       	ldi	r22, 0x03	; 3
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_HIGH);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_HIGH);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_HIGH);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	62 e0       	ldi	r22, 0x02	; 2
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_HIGH);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	63 e0       	ldi	r22, 0x03	; 3
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>


	/*STEP2 CONFIGURING COLUMNS DIRECTION AND INITIALING WITH HIGH...	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_OUTPUT);
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	64 e0       	ldi	r22, 0x04	; 4
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_OUTPUT);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	65 e0       	ldi	r22, 0x05	; 5
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_OUTPUT);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	66 e0       	ldi	r22, 0x06	; 6
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_OUTPUT);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	67 e0       	ldi	r22, 0x07	; 7
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_HIGH);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	64 e0       	ldi	r22, 0x04	; 4
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_HIGH);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	65 e0       	ldi	r22, 0x05	; 5
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_HIGH);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	66 e0       	ldi	r22, 0x06	; 6
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_HIGH);
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	67 e0       	ldi	r22, 0x07	; 7
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>

}
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <KEYPAD_U8GetPressedKey>:



u8 KEYPAD_U8GetPressedKey(void)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	e2 97       	sbiw	r28, 0x32	; 50
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61

	u8 U8RowLOCAL=0;
    1e04:	1c 8a       	std	Y+20, r1	; 0x14
	u8 U8ColumnLocal=0;
    1e06:	1b 8a       	std	Y+19, r1	; 0x13

	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    1e08:	1d 8a       	std	Y+21, r1	; 0x15
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	8e 8b       	std	Y+22, r24	; 0x16
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	8f 8b       	std	Y+23, r24	; 0x17
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	88 8f       	std	Y+24, r24	; 0x18
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    1e16:	84 e0       	ldi	r24, 0x04	; 4
    1e18:	89 8f       	std	Y+25, r24	; 0x19
    1e1a:	85 e0       	ldi	r24, 0x05	; 5
    1e1c:	8a 8f       	std	Y+26, r24	; 0x1a
    1e1e:	86 e0       	ldi	r24, 0x06	; 6
    1e20:	8b 8f       	std	Y+27, r24	; 0x1b
    1e22:	87 e0       	ldi	r24, 0x07	; 7
    1e24:	8c 8f       	std	Y+28, r24	; 0x1c



     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    1e26:	1b 8a       	std	Y+19, r1	; 0x13
    1e28:	13 c1       	rjmp	.+550    	; 0x2050 <KEYPAD_U8GetPressedKey+0x260>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	ce 01       	movw	r24, r28
    1e32:	49 96       	adiw	r24, 0x19	; 25
    1e34:	fc 01       	movw	r30, r24
    1e36:	e2 0f       	add	r30, r18
    1e38:	f3 1f       	adc	r31, r19
    1e3a:	90 81       	ld	r25, Z
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	69 2f       	mov	r22, r25
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    1e46:	1c 8a       	std	Y+20, r1	; 0x14
    1e48:	ee c0       	rjmp	.+476    	; 0x2026 <KEYPAD_U8GetPressedKey+0x236>
    	 {
    		 u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    1e4a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	ce 01       	movw	r24, r28
    1e52:	45 96       	adiw	r24, 0x15	; 21
    1e54:	fc 01       	movw	r30, r24
    1e56:	e2 0f       	add	r30, r18
    1e58:	f3 1f       	adc	r31, r19
    1e5a:	90 81       	ld	r25, Z
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	69 2f       	mov	r22, r25
    1e60:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_GetPinValue>
    1e64:	8a 8b       	std	Y+18, r24	; 0x12
    		 if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    1e66:	8a 89       	ldd	r24, Y+18	; 0x12
    1e68:	88 23       	and	r24, r24
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <KEYPAD_U8GetPressedKey+0x7e>
    1e6c:	d9 c0       	rjmp	.+434    	; 0x2020 <KEYPAD_U8GetPressedKey+0x230>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a8 e4       	ldi	r26, 0x48	; 72
    1e74:	b2 e4       	ldi	r27, 0x42	; 66
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
    1e78:	9c 87       	std	Y+12, r25	; 0x0c
    1e7a:	ad 87       	std	Y+13, r26	; 0x0d
    1e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	98 87       	std	Y+8, r25	; 0x08
    1e9a:	a9 87       	std	Y+9, r26	; 0x09
    1e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <KEYPAD_U8GetPressedKey+0xd0>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <KEYPAD_U8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <KEYPAD_U8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <KEYPAD_U8GetPressedKey+0x130>
    1f02:	88 ec       	ldi	r24, 0xC8	; 200
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <KEYPAD_U8GetPressedKey+0x11e>
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <KEYPAD_U8GetPressedKey+0x112>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <KEYPAD_U8GetPressedKey+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <KEYPAD_U8GetPressedKey+0x15a>
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    		 {
    			 //delay to avoid bouncing
					_delay_ms(50);
					//reread switch pin
					u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    1f52:	8c 89       	ldd	r24, Y+20	; 0x14
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	ce 01       	movw	r24, r28
    1f5a:	45 96       	adiw	r24, 0x15	; 21
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	e2 0f       	add	r30, r18
    1f60:	f3 1f       	adc	r31, r19
    1f62:	90 81       	ld	r25, Z
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	69 2f       	mov	r22, r25
    1f68:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_GetPinValue>
    1f6c:	89 8b       	std	Y+17, r24	; 0x11
					if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    1f6e:	89 89       	ldd	r24, Y+17	; 0x11
    1f70:	88 23       	and	r24, r24
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <KEYPAD_U8GetPressedKey+0x186>
    1f74:	55 c0       	rjmp	.+170    	; 0x2020 <KEYPAD_U8GetPressedKey+0x230>
					{
						//hold
						u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    1f76:	8c 89       	ldd	r24, Y+20	; 0x14
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	45 96       	adiw	r24, 0x15	; 21
    1f80:	fc 01       	movw	r30, r24
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	90 81       	ld	r25, Z
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	69 2f       	mov	r22, r25
    1f8c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_GetPinValue>
    1f90:	88 8b       	std	Y+16, r24	; 0x10
    1f92:	0e c0       	rjmp	.+28     	; 0x1fb0 <KEYPAD_U8GetPressedKey+0x1c0>

						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
							u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    1f94:	8c 89       	ldd	r24, Y+20	; 0x14
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	45 96       	adiw	r24, 0x15	; 21
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	e2 0f       	add	r30, r18
    1fa2:	f3 1f       	adc	r31, r19
    1fa4:	90 81       	ld	r25, Z
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	69 2f       	mov	r22, r25
    1faa:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_GetPinValue>
    1fae:	8f 87       	std	Y+15, r24	; 0x0f
					if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
					{
						//hold
						u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);

						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
    1fb0:	88 89       	ldd	r24, Y+16	; 0x10
    1fb2:	88 23       	and	r24, r24
    1fb4:	79 f3       	breq	.-34     	; 0x1f94 <KEYPAD_U8GetPressedKey+0x1a4>
							u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
						}

						u8 KPD_u8Value[ROWS_NUMBER][COLUMN_NUMBER]= KEYPAD_VALUES;
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	4d 96       	adiw	r24, 0x1d	; 29
    1fba:	9f a7       	std	Y+47, r25	; 0x2f
    1fbc:	8e a7       	std	Y+46, r24	; 0x2e
    1fbe:	eb e2       	ldi	r30, 0x2B	; 43
    1fc0:	f1 e0       	ldi	r31, 0x01	; 1
    1fc2:	f9 ab       	std	Y+49, r31	; 0x31
    1fc4:	e8 ab       	std	Y+48, r30	; 0x30
    1fc6:	f0 e1       	ldi	r31, 0x10	; 16
    1fc8:	fa ab       	std	Y+50, r31	; 0x32
    1fca:	e8 a9       	ldd	r30, Y+48	; 0x30
    1fcc:	f9 a9       	ldd	r31, Y+49	; 0x31
    1fce:	00 80       	ld	r0, Z
    1fd0:	88 a9       	ldd	r24, Y+48	; 0x30
    1fd2:	99 a9       	ldd	r25, Y+49	; 0x31
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	99 ab       	std	Y+49, r25	; 0x31
    1fd8:	88 ab       	std	Y+48, r24	; 0x30
    1fda:	ee a5       	ldd	r30, Y+46	; 0x2e
    1fdc:	ff a5       	ldd	r31, Y+47	; 0x2f
    1fde:	00 82       	st	Z, r0
    1fe0:	8e a5       	ldd	r24, Y+46	; 0x2e
    1fe2:	9f a5       	ldd	r25, Y+47	; 0x2f
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	9f a7       	std	Y+47, r25	; 0x2f
    1fe8:	8e a7       	std	Y+46, r24	; 0x2e
    1fea:	9a a9       	ldd	r25, Y+50	; 0x32
    1fec:	91 50       	subi	r25, 0x01	; 1
    1fee:	9a ab       	std	Y+50, r25	; 0x32
    1ff0:	ea a9       	ldd	r30, Y+50	; 0x32
    1ff2:	ee 23       	and	r30, r30
    1ff4:	51 f7       	brne	.-44     	; 0x1fca <KEYPAD_U8GetPressedKey+0x1da>
						return KPD_u8Value[U8RowLOCAL][U8ColumnLocal];
    1ff6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffe:	48 2f       	mov	r20, r24
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	22 0f       	add	r18, r18
    2004:	33 1f       	adc	r19, r19
    2006:	22 0f       	add	r18, r18
    2008:	33 1f       	adc	r19, r19
    200a:	ce 01       	movw	r24, r28
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	82 0f       	add	r24, r18
    2010:	93 1f       	adc	r25, r19
    2012:	84 0f       	add	r24, r20
    2014:	95 1f       	adc	r25, r21
    2016:	fc 01       	movw	r30, r24
    2018:	7c 96       	adiw	r30, 0x1c	; 28
    201a:	80 81       	ld	r24, Z
    201c:	8d a7       	std	Y+45, r24	; 0x2d
    201e:	1e c0       	rjmp	.+60     	; 0x205c <KEYPAD_U8GetPressedKey+0x26c>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    2020:	8c 89       	ldd	r24, Y+20	; 0x14
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	8c 8b       	std	Y+20, r24	; 0x14
    2026:	8c 89       	ldd	r24, Y+20	; 0x14
    2028:	84 30       	cpi	r24, 0x04	; 4
    202a:	08 f4       	brcc	.+2      	; 0x202e <KEYPAD_U8GetPressedKey+0x23e>
    202c:	0e cf       	rjmp	.-484    	; 0x1e4a <KEYPAD_U8GetPressedKey+0x5a>

    		 }

        }
    	   //deactivate column
    	   DIO_SetPinValue(KEYPAD_PORT,KPD_ColumnPinArr[U8ColumnLocal],DIO_HIGH);
    202e:	8b 89       	ldd	r24, Y+19	; 0x13
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	ce 01       	movw	r24, r28
    2036:	49 96       	adiw	r24, 0x19	; 25
    2038:	fc 01       	movw	r30, r24
    203a:	e2 0f       	add	r30, r18
    203c:	f3 1f       	adc	r31, r19
    203e:	90 81       	ld	r25, Z
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	69 2f       	mov	r22, r25
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};



     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    204a:	8b 89       	ldd	r24, Y+19	; 0x13
    204c:	8f 5f       	subi	r24, 0xFF	; 255
    204e:	8b 8b       	std	Y+19, r24	; 0x13
    2050:	8b 89       	ldd	r24, Y+19	; 0x13
    2052:	84 30       	cpi	r24, 0x04	; 4
    2054:	08 f4       	brcc	.+2      	; 0x2058 <KEYPAD_U8GetPressedKey+0x268>
    2056:	e9 ce       	rjmp	.-558    	; 0x1e2a <KEYPAD_U8GetPressedKey+0x3a>
    	   //deactivate column
    	   DIO_SetPinValue(KEYPAD_PORT,KPD_ColumnPinArr[U8ColumnLocal],DIO_HIGH);

   }

     return KEYPAD_NOT_PRESSED_KEY ;
    2058:	9f ef       	ldi	r25, 0xFF	; 255
    205a:	9d a7       	std	Y+45, r25	; 0x2d
    205c:	8d a5       	ldd	r24, Y+45	; 0x2d
 }
    205e:	e2 96       	adiw	r28, 0x32	; 50
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <MOTOR_Init>:

#include "../../MCAL/DIO/DIO.h"
#include "H_BRIDGE.h"
#include "avr/io.h"

void MOTOR_Init(){
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_ENA,DIO_OUTPUT);
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_ENB,DIO_OUTPUT);
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	41 e0       	ldi	r20, 0x01	; 1
    2088:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN1,DIO_OUTPUT);
    208c:	83 e0       	ldi	r24, 0x03	; 3
    208e:	62 e0       	ldi	r22, 0x02	; 2
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN2,DIO_OUTPUT);
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	63 e0       	ldi	r22, 0x03	; 3
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN3,DIO_OUTPUT);
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	64 e0       	ldi	r22, 0x04	; 4
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT,MOTOR_IN4,DIO_OUTPUT);
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	65 e0       	ldi	r22, 0x05	; 5
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>


	DIO_SetPinValue(MOTOR_PORT,MOTOR_ENA,DIO_HIGH); //Enable motor A on H-bridge
    20b4:	83 e0       	ldi	r24, 0x03	; 3
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_ENA,DIO_HIGH); //Enable motor B on H-bridge
    20be:	83 e0       	ldi	r24, 0x03	; 3
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	62 e0       	ldi	r22, 0x02	; 2
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW);
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	63 e0       	ldi	r22, 0x03	; 3
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	64 e0       	ldi	r22, 0x04	; 4
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW);
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	65 e0       	ldi	r22, 0x05	; 5
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
}
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <MOTOR_CWDirection>:
void MOTOR_CWDirection(u8 U8MotorId){
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <MOTOR_CWDirection+0x6>
    20fc:	0f 92       	push	r0
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	89 83       	std	Y+1, r24	; 0x01
	switch(U8MotorId)
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	3b 83       	std	Y+3, r19	; 0x03
    210c:	2a 83       	std	Y+2, r18	; 0x02
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	91 05       	cpc	r25, r1
    2116:	31 f0       	breq	.+12     	; 0x2124 <MOTOR_CWDirection+0x2e>
    2118:	2a 81       	ldd	r18, Y+2	; 0x02
    211a:	3b 81       	ldd	r19, Y+3	; 0x03
    211c:	22 30       	cpi	r18, 0x02	; 2
    211e:	31 05       	cpc	r19, r1
    2120:	61 f0       	breq	.+24     	; 0x213a <MOTOR_CWDirection+0x44>
    2122:	15 c0       	rjmp	.+42     	; 0x214e <MOTOR_CWDirection+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW); //Turns off other switched direction
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	63 e0       	ldi	r22, 0x03	; 3
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_HIGH);//Turns on other switched direction
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	62 e0       	ldi	r22, 0x02	; 2
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
    2138:	0a c0       	rjmp	.+20     	; 0x214e <MOTOR_CWDirection+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW); //Turns off other switched direction
    213a:	83 e0       	ldi	r24, 0x03	; 3
    213c:	65 e0       	ldi	r22, 0x05	; 5
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_HIGH);//Turns on other switched direction
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	64 e0       	ldi	r22, 0x04	; 4
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
				}



	}
}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <MOTOR_CCWDirection>:
void MOTOR_CCWDirection(u8 U8MotorId){
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	00 d0       	rcall	.+0      	; 0x2160 <MOTOR_CCWDirection+0x6>
    2160:	0f 92       	push	r0
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01

	switch(U8MotorId)
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	3b 83       	std	Y+3, r19	; 0x03
    2170:	2a 83       	std	Y+2, r18	; 0x02
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	91 05       	cpc	r25, r1
    217a:	31 f0       	breq	.+12     	; 0x2188 <MOTOR_CCWDirection+0x2e>
    217c:	2a 81       	ldd	r18, Y+2	; 0x02
    217e:	3b 81       	ldd	r19, Y+3	; 0x03
    2180:	22 30       	cpi	r18, 0x02	; 2
    2182:	31 05       	cpc	r19, r1
    2184:	61 f0       	breq	.+24     	; 0x219e <MOTOR_CCWDirection+0x44>
    2186:	15 c0       	rjmp	.+42     	; 0x21b2 <MOTOR_CCWDirection+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_HIGH); //Turns off other switched direction
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	63 e0       	ldi	r22, 0x03	; 3
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);//Turns on other switched direction
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	62 e0       	ldi	r22, 0x02	; 2
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
    219c:	0a c0       	rjmp	.+20     	; 0x21b2 <MOTOR_CCWDirection+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_HIGH); //Turns off other switched direction
    219e:	83 e0       	ldi	r24, 0x03	; 3
    21a0:	65 e0       	ldi	r22, 0x05	; 5
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);//Turns on other switched direction
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	64 e0       	ldi	r22, 0x04	; 4
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>



	}

}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <MOTOR_StopMotion>:

void MOTOR_StopMotion(u8 U8MotorId){
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <MOTOR_StopMotion+0x6>
    21c4:	0f 92       	push	r0
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	89 83       	std	Y+1, r24	; 0x01
	switch(U8MotorId)
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	3b 83       	std	Y+3, r19	; 0x03
    21d4:	2a 83       	std	Y+2, r18	; 0x02
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	9b 81       	ldd	r25, Y+3	; 0x03
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	91 05       	cpc	r25, r1
    21de:	31 f0       	breq	.+12     	; 0x21ec <MOTOR_StopMotion+0x2e>
    21e0:	2a 81       	ldd	r18, Y+2	; 0x02
    21e2:	3b 81       	ldd	r19, Y+3	; 0x03
    21e4:	22 30       	cpi	r18, 0x02	; 2
    21e6:	31 05       	cpc	r19, r1
    21e8:	61 f0       	breq	.+24     	; 0x2202 <MOTOR_StopMotion+0x44>
    21ea:	15 c0       	rjmp	.+42     	; 0x2216 <MOTOR_StopMotion+0x58>
	{
		case MOTOR_1:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN2,DIO_LOW); //Turns off other switched direction
    21ec:	83 e0       	ldi	r24, 0x03	; 3
    21ee:	63 e0       	ldi	r22, 0x03	; 3
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN1,DIO_LOW);//Turns on other switched direction
    21f6:	83 e0       	ldi	r24, 0x03	; 3
    21f8:	62 e0       	ldi	r22, 0x02	; 2
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <MOTOR_StopMotion+0x58>
						break;
				}
		case MOTOR_2:
				{
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN4,DIO_LOW); //Turns off other switched direction
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	65 e0       	ldi	r22, 0x05	; 5
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
						DIO_SetPinValue(MOTOR_PORT,MOTOR_IN3,DIO_LOW);//Turns on other switched direction
    220c:	83 e0       	ldi	r24, 0x03	; 3
    220e:	64 e0       	ldi	r22, 0x04	; 4
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>
				}



	}
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <main>:

static u8 OVERFLOWS_COUNT=0;
void ISR_TIMER0 (void);

void main (void)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_OUTPUT);
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_SetPinDirection>
	DIO_SetPinValue(DIO_PORTA,DIO_PIN0,DIO_LOW);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_SetPinValue>

	GIE_Enable();
    223e:	0e 94 28 06 	call	0xc50	; 0xc50 <GIE_Enable>
	TIMER0_Init();
    2242:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_Init>
	TIMER0_u8SetCallBack(&ISR_TIMER0);
    2246:	88 e2       	ldi	r24, 0x28	; 40
    2248:	91 e1       	ldi	r25, 0x11	; 17
    224a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <TIMER0_u8SetCallBack>
    224e:	ff cf       	rjmp	.-2      	; 0x224e <main+0x2c>

00002250 <ISR_TIMER0>:
	}

}

void ISR_TIMER0 (void)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
	OVERFLOWS_COUNT++;
    2258:	80 91 40 01 	lds	r24, 0x0140
    225c:	8f 5f       	subi	r24, 0xFF	; 255
    225e:	80 93 40 01 	sts	0x0140, r24

		DIO_SetPinValue(DIO_PORTA,DIO_PIN0,DIO_LOW);


	}
}
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <__prologue_saves__>:
    2268:	2f 92       	push	r2
    226a:	3f 92       	push	r3
    226c:	4f 92       	push	r4
    226e:	5f 92       	push	r5
    2270:	6f 92       	push	r6
    2272:	7f 92       	push	r7
    2274:	8f 92       	push	r8
    2276:	9f 92       	push	r9
    2278:	af 92       	push	r10
    227a:	bf 92       	push	r11
    227c:	cf 92       	push	r12
    227e:	df 92       	push	r13
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	ca 1b       	sub	r28, r26
    2292:	db 0b       	sbc	r29, r27
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	09 94       	ijmp

000022a0 <__epilogue_restores__>:
    22a0:	2a 88       	ldd	r2, Y+18	; 0x12
    22a2:	39 88       	ldd	r3, Y+17	; 0x11
    22a4:	48 88       	ldd	r4, Y+16	; 0x10
    22a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    22a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    22aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    22ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    22b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    22b2:	b9 84       	ldd	r11, Y+9	; 0x09
    22b4:	c8 84       	ldd	r12, Y+8	; 0x08
    22b6:	df 80       	ldd	r13, Y+7	; 0x07
    22b8:	ee 80       	ldd	r14, Y+6	; 0x06
    22ba:	fd 80       	ldd	r15, Y+5	; 0x05
    22bc:	0c 81       	ldd	r16, Y+4	; 0x04
    22be:	1b 81       	ldd	r17, Y+3	; 0x03
    22c0:	aa 81       	ldd	r26, Y+2	; 0x02
    22c2:	b9 81       	ldd	r27, Y+1	; 0x01
    22c4:	ce 0f       	add	r28, r30
    22c6:	d1 1d       	adc	r29, r1
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	ed 01       	movw	r28, r26
    22d4:	08 95       	ret

000022d6 <printf>:
    22d6:	a0 e0       	ldi	r26, 0x00	; 0
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e1 e7       	ldi	r30, 0x71	; 113
    22dc:	f1 e1       	ldi	r31, 0x11	; 17
    22de:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__prologue_saves__+0x20>
    22e2:	fe 01       	movw	r30, r28
    22e4:	35 96       	adiw	r30, 0x05	; 5
    22e6:	61 91       	ld	r22, Z+
    22e8:	71 91       	ld	r23, Z+
    22ea:	80 91 43 01 	lds	r24, 0x0143
    22ee:	90 91 44 01 	lds	r25, 0x0144
    22f2:	af 01       	movw	r20, r30
    22f4:	0e 94 80 11 	call	0x2300	; 0x2300 <vfprintf>
    22f8:	20 96       	adiw	r28, 0x00	; 0
    22fa:	e2 e0       	ldi	r30, 0x02	; 2
    22fc:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__epilogue_restores__+0x20>

00002300 <vfprintf>:
    2300:	ab e0       	ldi	r26, 0x0B	; 11
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e6 e8       	ldi	r30, 0x86	; 134
    2306:	f1 e1       	ldi	r31, 0x11	; 17
    2308:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__>
    230c:	3c 01       	movw	r6, r24
    230e:	2b 01       	movw	r4, r22
    2310:	5a 01       	movw	r10, r20
    2312:	fc 01       	movw	r30, r24
    2314:	17 82       	std	Z+7, r1	; 0x07
    2316:	16 82       	std	Z+6, r1	; 0x06
    2318:	83 81       	ldd	r24, Z+3	; 0x03
    231a:	81 fd       	sbrc	r24, 1
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <vfprintf+0x24>
    231e:	6f ef       	ldi	r22, 0xFF	; 255
    2320:	7f ef       	ldi	r23, 0xFF	; 255
    2322:	c6 c1       	rjmp	.+908    	; 0x26b0 <vfprintf+0x3b0>
    2324:	9a e0       	ldi	r25, 0x0A	; 10
    2326:	89 2e       	mov	r8, r25
    2328:	1e 01       	movw	r2, r28
    232a:	08 94       	sec
    232c:	21 1c       	adc	r2, r1
    232e:	31 1c       	adc	r3, r1
    2330:	f3 01       	movw	r30, r6
    2332:	23 81       	ldd	r18, Z+3	; 0x03
    2334:	f2 01       	movw	r30, r4
    2336:	23 fd       	sbrc	r18, 3
    2338:	85 91       	lpm	r24, Z+
    233a:	23 ff       	sbrs	r18, 3
    233c:	81 91       	ld	r24, Z+
    233e:	2f 01       	movw	r4, r30
    2340:	88 23       	and	r24, r24
    2342:	09 f4       	brne	.+2      	; 0x2346 <vfprintf+0x46>
    2344:	b2 c1       	rjmp	.+868    	; 0x26aa <vfprintf+0x3aa>
    2346:	85 32       	cpi	r24, 0x25	; 37
    2348:	39 f4       	brne	.+14     	; 0x2358 <vfprintf+0x58>
    234a:	23 fd       	sbrc	r18, 3
    234c:	85 91       	lpm	r24, Z+
    234e:	23 ff       	sbrs	r18, 3
    2350:	81 91       	ld	r24, Z+
    2352:	2f 01       	movw	r4, r30
    2354:	85 32       	cpi	r24, 0x25	; 37
    2356:	29 f4       	brne	.+10     	; 0x2362 <vfprintf+0x62>
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	b3 01       	movw	r22, r6
    235c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    2360:	e7 cf       	rjmp	.-50     	; 0x2330 <vfprintf+0x30>
    2362:	98 2f       	mov	r25, r24
    2364:	ff 24       	eor	r15, r15
    2366:	ee 24       	eor	r14, r14
    2368:	99 24       	eor	r9, r9
    236a:	ff e1       	ldi	r31, 0x1F	; 31
    236c:	ff 15       	cp	r31, r15
    236e:	d0 f0       	brcs	.+52     	; 0x23a4 <vfprintf+0xa4>
    2370:	9b 32       	cpi	r25, 0x2B	; 43
    2372:	69 f0       	breq	.+26     	; 0x238e <vfprintf+0x8e>
    2374:	9c 32       	cpi	r25, 0x2C	; 44
    2376:	28 f4       	brcc	.+10     	; 0x2382 <vfprintf+0x82>
    2378:	90 32       	cpi	r25, 0x20	; 32
    237a:	59 f0       	breq	.+22     	; 0x2392 <vfprintf+0x92>
    237c:	93 32       	cpi	r25, 0x23	; 35
    237e:	91 f4       	brne	.+36     	; 0x23a4 <vfprintf+0xa4>
    2380:	0e c0       	rjmp	.+28     	; 0x239e <vfprintf+0x9e>
    2382:	9d 32       	cpi	r25, 0x2D	; 45
    2384:	49 f0       	breq	.+18     	; 0x2398 <vfprintf+0x98>
    2386:	90 33       	cpi	r25, 0x30	; 48
    2388:	69 f4       	brne	.+26     	; 0x23a4 <vfprintf+0xa4>
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	24 c0       	rjmp	.+72     	; 0x23d6 <vfprintf+0xd6>
    238e:	52 e0       	ldi	r21, 0x02	; 2
    2390:	f5 2a       	or	r15, r21
    2392:	84 e0       	ldi	r24, 0x04	; 4
    2394:	f8 2a       	or	r15, r24
    2396:	28 c0       	rjmp	.+80     	; 0x23e8 <vfprintf+0xe8>
    2398:	98 e0       	ldi	r25, 0x08	; 8
    239a:	f9 2a       	or	r15, r25
    239c:	25 c0       	rjmp	.+74     	; 0x23e8 <vfprintf+0xe8>
    239e:	e0 e1       	ldi	r30, 0x10	; 16
    23a0:	fe 2a       	or	r15, r30
    23a2:	22 c0       	rjmp	.+68     	; 0x23e8 <vfprintf+0xe8>
    23a4:	f7 fc       	sbrc	r15, 7
    23a6:	29 c0       	rjmp	.+82     	; 0x23fa <vfprintf+0xfa>
    23a8:	89 2f       	mov	r24, r25
    23aa:	80 53       	subi	r24, 0x30	; 48
    23ac:	8a 30       	cpi	r24, 0x0A	; 10
    23ae:	70 f4       	brcc	.+28     	; 0x23cc <vfprintf+0xcc>
    23b0:	f6 fe       	sbrs	r15, 6
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <vfprintf+0xbe>
    23b4:	98 9c       	mul	r9, r8
    23b6:	90 2c       	mov	r9, r0
    23b8:	11 24       	eor	r1, r1
    23ba:	98 0e       	add	r9, r24
    23bc:	15 c0       	rjmp	.+42     	; 0x23e8 <vfprintf+0xe8>
    23be:	e8 9c       	mul	r14, r8
    23c0:	e0 2c       	mov	r14, r0
    23c2:	11 24       	eor	r1, r1
    23c4:	e8 0e       	add	r14, r24
    23c6:	f0 e2       	ldi	r31, 0x20	; 32
    23c8:	ff 2a       	or	r15, r31
    23ca:	0e c0       	rjmp	.+28     	; 0x23e8 <vfprintf+0xe8>
    23cc:	9e 32       	cpi	r25, 0x2E	; 46
    23ce:	29 f4       	brne	.+10     	; 0x23da <vfprintf+0xda>
    23d0:	f6 fc       	sbrc	r15, 6
    23d2:	6b c1       	rjmp	.+726    	; 0x26aa <vfprintf+0x3aa>
    23d4:	40 e4       	ldi	r20, 0x40	; 64
    23d6:	f4 2a       	or	r15, r20
    23d8:	07 c0       	rjmp	.+14     	; 0x23e8 <vfprintf+0xe8>
    23da:	9c 36       	cpi	r25, 0x6C	; 108
    23dc:	19 f4       	brne	.+6      	; 0x23e4 <vfprintf+0xe4>
    23de:	50 e8       	ldi	r21, 0x80	; 128
    23e0:	f5 2a       	or	r15, r21
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <vfprintf+0xe8>
    23e4:	98 36       	cpi	r25, 0x68	; 104
    23e6:	49 f4       	brne	.+18     	; 0x23fa <vfprintf+0xfa>
    23e8:	f2 01       	movw	r30, r4
    23ea:	23 fd       	sbrc	r18, 3
    23ec:	95 91       	lpm	r25, Z+
    23ee:	23 ff       	sbrs	r18, 3
    23f0:	91 91       	ld	r25, Z+
    23f2:	2f 01       	movw	r4, r30
    23f4:	99 23       	and	r25, r25
    23f6:	09 f0       	breq	.+2      	; 0x23fa <vfprintf+0xfa>
    23f8:	b8 cf       	rjmp	.-144    	; 0x236a <vfprintf+0x6a>
    23fa:	89 2f       	mov	r24, r25
    23fc:	85 54       	subi	r24, 0x45	; 69
    23fe:	83 30       	cpi	r24, 0x03	; 3
    2400:	18 f0       	brcs	.+6      	; 0x2408 <vfprintf+0x108>
    2402:	80 52       	subi	r24, 0x20	; 32
    2404:	83 30       	cpi	r24, 0x03	; 3
    2406:	38 f4       	brcc	.+14     	; 0x2416 <vfprintf+0x116>
    2408:	44 e0       	ldi	r20, 0x04	; 4
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	a4 0e       	add	r10, r20
    240e:	b5 1e       	adc	r11, r21
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	59 83       	std	Y+1, r21	; 0x01
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <vfprintf+0x134>
    2416:	93 36       	cpi	r25, 0x63	; 99
    2418:	31 f0       	breq	.+12     	; 0x2426 <vfprintf+0x126>
    241a:	93 37       	cpi	r25, 0x73	; 115
    241c:	79 f0       	breq	.+30     	; 0x243c <vfprintf+0x13c>
    241e:	93 35       	cpi	r25, 0x53	; 83
    2420:	09 f0       	breq	.+2      	; 0x2424 <vfprintf+0x124>
    2422:	56 c0       	rjmp	.+172    	; 0x24d0 <vfprintf+0x1d0>
    2424:	20 c0       	rjmp	.+64     	; 0x2466 <vfprintf+0x166>
    2426:	f5 01       	movw	r30, r10
    2428:	80 81       	ld	r24, Z
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	42 e0       	ldi	r20, 0x02	; 2
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	a4 0e       	add	r10, r20
    2432:	b5 1e       	adc	r11, r21
    2434:	61 01       	movw	r12, r2
    2436:	01 e0       	ldi	r16, 0x01	; 1
    2438:	10 e0       	ldi	r17, 0x00	; 0
    243a:	12 c0       	rjmp	.+36     	; 0x2460 <vfprintf+0x160>
    243c:	f5 01       	movw	r30, r10
    243e:	c0 80       	ld	r12, Z
    2440:	d1 80       	ldd	r13, Z+1	; 0x01
    2442:	f6 fc       	sbrc	r15, 6
    2444:	03 c0       	rjmp	.+6      	; 0x244c <vfprintf+0x14c>
    2446:	6f ef       	ldi	r22, 0xFF	; 255
    2448:	7f ef       	ldi	r23, 0xFF	; 255
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <vfprintf+0x150>
    244c:	69 2d       	mov	r22, r9
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	42 e0       	ldi	r20, 0x02	; 2
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	a4 0e       	add	r10, r20
    2456:	b5 1e       	adc	r11, r21
    2458:	c6 01       	movw	r24, r12
    245a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <strnlen>
    245e:	8c 01       	movw	r16, r24
    2460:	5f e7       	ldi	r21, 0x7F	; 127
    2462:	f5 22       	and	r15, r21
    2464:	14 c0       	rjmp	.+40     	; 0x248e <vfprintf+0x18e>
    2466:	f5 01       	movw	r30, r10
    2468:	c0 80       	ld	r12, Z
    246a:	d1 80       	ldd	r13, Z+1	; 0x01
    246c:	f6 fc       	sbrc	r15, 6
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <vfprintf+0x176>
    2470:	6f ef       	ldi	r22, 0xFF	; 255
    2472:	7f ef       	ldi	r23, 0xFF	; 255
    2474:	02 c0       	rjmp	.+4      	; 0x247a <vfprintf+0x17a>
    2476:	69 2d       	mov	r22, r9
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	42 e0       	ldi	r20, 0x02	; 2
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	a4 0e       	add	r10, r20
    2480:	b5 1e       	adc	r11, r21
    2482:	c6 01       	movw	r24, r12
    2484:	0e 94 5d 13 	call	0x26ba	; 0x26ba <strnlen_P>
    2488:	8c 01       	movw	r16, r24
    248a:	50 e8       	ldi	r21, 0x80	; 128
    248c:	f5 2a       	or	r15, r21
    248e:	f3 fe       	sbrs	r15, 3
    2490:	07 c0       	rjmp	.+14     	; 0x24a0 <vfprintf+0x1a0>
    2492:	1a c0       	rjmp	.+52     	; 0x24c8 <vfprintf+0x1c8>
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	b3 01       	movw	r22, r6
    249a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    249e:	ea 94       	dec	r14
    24a0:	8e 2d       	mov	r24, r14
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	08 17       	cp	r16, r24
    24a6:	19 07       	cpc	r17, r25
    24a8:	a8 f3       	brcs	.-22     	; 0x2494 <vfprintf+0x194>
    24aa:	0e c0       	rjmp	.+28     	; 0x24c8 <vfprintf+0x1c8>
    24ac:	f6 01       	movw	r30, r12
    24ae:	f7 fc       	sbrc	r15, 7
    24b0:	85 91       	lpm	r24, Z+
    24b2:	f7 fe       	sbrs	r15, 7
    24b4:	81 91       	ld	r24, Z+
    24b6:	6f 01       	movw	r12, r30
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	b3 01       	movw	r22, r6
    24bc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    24c0:	e1 10       	cpse	r14, r1
    24c2:	ea 94       	dec	r14
    24c4:	01 50       	subi	r16, 0x01	; 1
    24c6:	10 40       	sbci	r17, 0x00	; 0
    24c8:	01 15       	cp	r16, r1
    24ca:	11 05       	cpc	r17, r1
    24cc:	79 f7       	brne	.-34     	; 0x24ac <vfprintf+0x1ac>
    24ce:	ea c0       	rjmp	.+468    	; 0x26a4 <vfprintf+0x3a4>
    24d0:	94 36       	cpi	r25, 0x64	; 100
    24d2:	11 f0       	breq	.+4      	; 0x24d8 <vfprintf+0x1d8>
    24d4:	99 36       	cpi	r25, 0x69	; 105
    24d6:	69 f5       	brne	.+90     	; 0x2532 <vfprintf+0x232>
    24d8:	f7 fe       	sbrs	r15, 7
    24da:	08 c0       	rjmp	.+16     	; 0x24ec <vfprintf+0x1ec>
    24dc:	f5 01       	movw	r30, r10
    24de:	20 81       	ld	r18, Z
    24e0:	31 81       	ldd	r19, Z+1	; 0x01
    24e2:	42 81       	ldd	r20, Z+2	; 0x02
    24e4:	53 81       	ldd	r21, Z+3	; 0x03
    24e6:	84 e0       	ldi	r24, 0x04	; 4
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0a c0       	rjmp	.+20     	; 0x2500 <vfprintf+0x200>
    24ec:	f5 01       	movw	r30, r10
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	9c 01       	movw	r18, r24
    24f4:	44 27       	eor	r20, r20
    24f6:	37 fd       	sbrc	r19, 7
    24f8:	40 95       	com	r20
    24fa:	54 2f       	mov	r21, r20
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a8 0e       	add	r10, r24
    2502:	b9 1e       	adc	r11, r25
    2504:	9f e6       	ldi	r25, 0x6F	; 111
    2506:	f9 22       	and	r15, r25
    2508:	57 ff       	sbrs	r21, 7
    250a:	09 c0       	rjmp	.+18     	; 0x251e <vfprintf+0x21e>
    250c:	50 95       	com	r21
    250e:	40 95       	com	r20
    2510:	30 95       	com	r19
    2512:	21 95       	neg	r18
    2514:	3f 4f       	sbci	r19, 0xFF	; 255
    2516:	4f 4f       	sbci	r20, 0xFF	; 255
    2518:	5f 4f       	sbci	r21, 0xFF	; 255
    251a:	e0 e8       	ldi	r30, 0x80	; 128
    251c:	fe 2a       	or	r15, r30
    251e:	ca 01       	movw	r24, r20
    2520:	b9 01       	movw	r22, r18
    2522:	a1 01       	movw	r20, r2
    2524:	2a e0       	ldi	r18, 0x0A	; 10
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	0e 94 9f 13 	call	0x273e	; 0x273e <__ultoa_invert>
    252c:	d8 2e       	mov	r13, r24
    252e:	d2 18       	sub	r13, r2
    2530:	40 c0       	rjmp	.+128    	; 0x25b2 <vfprintf+0x2b2>
    2532:	95 37       	cpi	r25, 0x75	; 117
    2534:	29 f4       	brne	.+10     	; 0x2540 <vfprintf+0x240>
    2536:	1f 2d       	mov	r17, r15
    2538:	1f 7e       	andi	r17, 0xEF	; 239
    253a:	2a e0       	ldi	r18, 0x0A	; 10
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	1d c0       	rjmp	.+58     	; 0x257a <vfprintf+0x27a>
    2540:	1f 2d       	mov	r17, r15
    2542:	19 7f       	andi	r17, 0xF9	; 249
    2544:	9f 36       	cpi	r25, 0x6F	; 111
    2546:	61 f0       	breq	.+24     	; 0x2560 <vfprintf+0x260>
    2548:	90 37       	cpi	r25, 0x70	; 112
    254a:	20 f4       	brcc	.+8      	; 0x2554 <vfprintf+0x254>
    254c:	98 35       	cpi	r25, 0x58	; 88
    254e:	09 f0       	breq	.+2      	; 0x2552 <vfprintf+0x252>
    2550:	ac c0       	rjmp	.+344    	; 0x26aa <vfprintf+0x3aa>
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <vfprintf+0x272>
    2554:	90 37       	cpi	r25, 0x70	; 112
    2556:	39 f0       	breq	.+14     	; 0x2566 <vfprintf+0x266>
    2558:	98 37       	cpi	r25, 0x78	; 120
    255a:	09 f0       	breq	.+2      	; 0x255e <vfprintf+0x25e>
    255c:	a6 c0       	rjmp	.+332    	; 0x26aa <vfprintf+0x3aa>
    255e:	04 c0       	rjmp	.+8      	; 0x2568 <vfprintf+0x268>
    2560:	28 e0       	ldi	r18, 0x08	; 8
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	0a c0       	rjmp	.+20     	; 0x257a <vfprintf+0x27a>
    2566:	10 61       	ori	r17, 0x10	; 16
    2568:	14 fd       	sbrc	r17, 4
    256a:	14 60       	ori	r17, 0x04	; 4
    256c:	20 e1       	ldi	r18, 0x10	; 16
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	04 c0       	rjmp	.+8      	; 0x257a <vfprintf+0x27a>
    2572:	14 fd       	sbrc	r17, 4
    2574:	16 60       	ori	r17, 0x06	; 6
    2576:	20 e1       	ldi	r18, 0x10	; 16
    2578:	32 e0       	ldi	r19, 0x02	; 2
    257a:	17 ff       	sbrs	r17, 7
    257c:	08 c0       	rjmp	.+16     	; 0x258e <vfprintf+0x28e>
    257e:	f5 01       	movw	r30, r10
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	44 e0       	ldi	r20, 0x04	; 4
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	08 c0       	rjmp	.+16     	; 0x259e <vfprintf+0x29e>
    258e:	f5 01       	movw	r30, r10
    2590:	80 81       	ld	r24, Z
    2592:	91 81       	ldd	r25, Z+1	; 0x01
    2594:	bc 01       	movw	r22, r24
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	42 e0       	ldi	r20, 0x02	; 2
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	a4 0e       	add	r10, r20
    25a0:	b5 1e       	adc	r11, r21
    25a2:	a1 01       	movw	r20, r2
    25a4:	0e 94 9f 13 	call	0x273e	; 0x273e <__ultoa_invert>
    25a8:	d8 2e       	mov	r13, r24
    25aa:	d2 18       	sub	r13, r2
    25ac:	8f e7       	ldi	r24, 0x7F	; 127
    25ae:	f8 2e       	mov	r15, r24
    25b0:	f1 22       	and	r15, r17
    25b2:	f6 fe       	sbrs	r15, 6
    25b4:	0b c0       	rjmp	.+22     	; 0x25cc <vfprintf+0x2cc>
    25b6:	5e ef       	ldi	r21, 0xFE	; 254
    25b8:	f5 22       	and	r15, r21
    25ba:	d9 14       	cp	r13, r9
    25bc:	38 f4       	brcc	.+14     	; 0x25cc <vfprintf+0x2cc>
    25be:	f4 fe       	sbrs	r15, 4
    25c0:	07 c0       	rjmp	.+14     	; 0x25d0 <vfprintf+0x2d0>
    25c2:	f2 fc       	sbrc	r15, 2
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <vfprintf+0x2d0>
    25c6:	8f ee       	ldi	r24, 0xEF	; 239
    25c8:	f8 22       	and	r15, r24
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <vfprintf+0x2d0>
    25cc:	1d 2d       	mov	r17, r13
    25ce:	01 c0       	rjmp	.+2      	; 0x25d2 <vfprintf+0x2d2>
    25d0:	19 2d       	mov	r17, r9
    25d2:	f4 fe       	sbrs	r15, 4
    25d4:	0d c0       	rjmp	.+26     	; 0x25f0 <vfprintf+0x2f0>
    25d6:	fe 01       	movw	r30, r28
    25d8:	ed 0d       	add	r30, r13
    25da:	f1 1d       	adc	r31, r1
    25dc:	80 81       	ld	r24, Z
    25de:	80 33       	cpi	r24, 0x30	; 48
    25e0:	19 f4       	brne	.+6      	; 0x25e8 <vfprintf+0x2e8>
    25e2:	99 ee       	ldi	r25, 0xE9	; 233
    25e4:	f9 22       	and	r15, r25
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <vfprintf+0x2f8>
    25e8:	1f 5f       	subi	r17, 0xFF	; 255
    25ea:	f2 fe       	sbrs	r15, 2
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <vfprintf+0x2f8>
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <vfprintf+0x2f6>
    25f0:	8f 2d       	mov	r24, r15
    25f2:	86 78       	andi	r24, 0x86	; 134
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <vfprintf+0x2f8>
    25f6:	1f 5f       	subi	r17, 0xFF	; 255
    25f8:	0f 2d       	mov	r16, r15
    25fa:	f3 fc       	sbrc	r15, 3
    25fc:	14 c0       	rjmp	.+40     	; 0x2626 <vfprintf+0x326>
    25fe:	f0 fe       	sbrs	r15, 0
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <vfprintf+0x320>
    2602:	1e 15       	cp	r17, r14
    2604:	10 f0       	brcs	.+4      	; 0x260a <vfprintf+0x30a>
    2606:	9d 2c       	mov	r9, r13
    2608:	0b c0       	rjmp	.+22     	; 0x2620 <vfprintf+0x320>
    260a:	9d 2c       	mov	r9, r13
    260c:	9e 0c       	add	r9, r14
    260e:	91 1a       	sub	r9, r17
    2610:	1e 2d       	mov	r17, r14
    2612:	06 c0       	rjmp	.+12     	; 0x2620 <vfprintf+0x320>
    2614:	80 e2       	ldi	r24, 0x20	; 32
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	b3 01       	movw	r22, r6
    261a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    261e:	1f 5f       	subi	r17, 0xFF	; 255
    2620:	1e 15       	cp	r17, r14
    2622:	c0 f3       	brcs	.-16     	; 0x2614 <vfprintf+0x314>
    2624:	04 c0       	rjmp	.+8      	; 0x262e <vfprintf+0x32e>
    2626:	1e 15       	cp	r17, r14
    2628:	10 f4       	brcc	.+4      	; 0x262e <vfprintf+0x32e>
    262a:	e1 1a       	sub	r14, r17
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <vfprintf+0x330>
    262e:	ee 24       	eor	r14, r14
    2630:	04 ff       	sbrs	r16, 4
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <vfprintf+0x352>
    2634:	80 e3       	ldi	r24, 0x30	; 48
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	b3 01       	movw	r22, r6
    263a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    263e:	02 ff       	sbrs	r16, 2
    2640:	1d c0       	rjmp	.+58     	; 0x267c <vfprintf+0x37c>
    2642:	01 fd       	sbrc	r16, 1
    2644:	03 c0       	rjmp	.+6      	; 0x264c <vfprintf+0x34c>
    2646:	88 e7       	ldi	r24, 0x78	; 120
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	0e c0       	rjmp	.+28     	; 0x2668 <vfprintf+0x368>
    264c:	88 e5       	ldi	r24, 0x58	; 88
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0b c0       	rjmp	.+22     	; 0x2668 <vfprintf+0x368>
    2652:	80 2f       	mov	r24, r16
    2654:	86 78       	andi	r24, 0x86	; 134
    2656:	91 f0       	breq	.+36     	; 0x267c <vfprintf+0x37c>
    2658:	01 ff       	sbrs	r16, 1
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <vfprintf+0x360>
    265c:	8b e2       	ldi	r24, 0x2B	; 43
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <vfprintf+0x362>
    2660:	80 e2       	ldi	r24, 0x20	; 32
    2662:	f7 fc       	sbrc	r15, 7
    2664:	8d e2       	ldi	r24, 0x2D	; 45
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	b3 01       	movw	r22, r6
    266a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    266e:	06 c0       	rjmp	.+12     	; 0x267c <vfprintf+0x37c>
    2670:	80 e3       	ldi	r24, 0x30	; 48
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	b3 01       	movw	r22, r6
    2676:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    267a:	9a 94       	dec	r9
    267c:	d9 14       	cp	r13, r9
    267e:	c0 f3       	brcs	.-16     	; 0x2670 <vfprintf+0x370>
    2680:	da 94       	dec	r13
    2682:	f1 01       	movw	r30, r2
    2684:	ed 0d       	add	r30, r13
    2686:	f1 1d       	adc	r31, r1
    2688:	80 81       	ld	r24, Z
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	b3 01       	movw	r22, r6
    268e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    2692:	dd 20       	and	r13, r13
    2694:	a9 f7       	brne	.-22     	; 0x2680 <vfprintf+0x380>
    2696:	06 c0       	rjmp	.+12     	; 0x26a4 <vfprintf+0x3a4>
    2698:	80 e2       	ldi	r24, 0x20	; 32
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	b3 01       	movw	r22, r6
    269e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <fputc>
    26a2:	ea 94       	dec	r14
    26a4:	ee 20       	and	r14, r14
    26a6:	c1 f7       	brne	.-16     	; 0x2698 <vfprintf+0x398>
    26a8:	43 ce       	rjmp	.-890    	; 0x2330 <vfprintf+0x30>
    26aa:	f3 01       	movw	r30, r6
    26ac:	66 81       	ldd	r22, Z+6	; 0x06
    26ae:	77 81       	ldd	r23, Z+7	; 0x07
    26b0:	cb 01       	movw	r24, r22
    26b2:	2b 96       	adiw	r28, 0x0b	; 11
    26b4:	e2 e1       	ldi	r30, 0x12	; 18
    26b6:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__>

000026ba <strnlen_P>:
    26ba:	fc 01       	movw	r30, r24
    26bc:	05 90       	lpm	r0, Z+
    26be:	61 50       	subi	r22, 0x01	; 1
    26c0:	70 40       	sbci	r23, 0x00	; 0
    26c2:	01 10       	cpse	r0, r1
    26c4:	d8 f7       	brcc	.-10     	; 0x26bc <strnlen_P+0x2>
    26c6:	80 95       	com	r24
    26c8:	90 95       	com	r25
    26ca:	8e 0f       	add	r24, r30
    26cc:	9f 1f       	adc	r25, r31
    26ce:	08 95       	ret

000026d0 <strnlen>:
    26d0:	fc 01       	movw	r30, r24
    26d2:	61 50       	subi	r22, 0x01	; 1
    26d4:	70 40       	sbci	r23, 0x00	; 0
    26d6:	01 90       	ld	r0, Z+
    26d8:	01 10       	cpse	r0, r1
    26da:	d8 f7       	brcc	.-10     	; 0x26d2 <strnlen+0x2>
    26dc:	80 95       	com	r24
    26de:	90 95       	com	r25
    26e0:	8e 0f       	add	r24, r30
    26e2:	9f 1f       	adc	r25, r31
    26e4:	08 95       	ret

000026e6 <fputc>:
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	8c 01       	movw	r16, r24
    26f0:	eb 01       	movw	r28, r22
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	81 ff       	sbrs	r24, 1
    26f6:	1b c0       	rjmp	.+54     	; 0x272e <fputc+0x48>
    26f8:	82 ff       	sbrs	r24, 2
    26fa:	0d c0       	rjmp	.+26     	; 0x2716 <fputc+0x30>
    26fc:	2e 81       	ldd	r18, Y+6	; 0x06
    26fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	9d 81       	ldd	r25, Y+5	; 0x05
    2704:	28 17       	cp	r18, r24
    2706:	39 07       	cpc	r19, r25
    2708:	64 f4       	brge	.+24     	; 0x2722 <fputc+0x3c>
    270a:	e8 81       	ld	r30, Y
    270c:	f9 81       	ldd	r31, Y+1	; 0x01
    270e:	01 93       	st	Z+, r16
    2710:	f9 83       	std	Y+1, r31	; 0x01
    2712:	e8 83       	st	Y, r30
    2714:	06 c0       	rjmp	.+12     	; 0x2722 <fputc+0x3c>
    2716:	e8 85       	ldd	r30, Y+8	; 0x08
    2718:	f9 85       	ldd	r31, Y+9	; 0x09
    271a:	80 2f       	mov	r24, r16
    271c:	09 95       	icall
    271e:	89 2b       	or	r24, r25
    2720:	31 f4       	brne	.+12     	; 0x272e <fputc+0x48>
    2722:	8e 81       	ldd	r24, Y+6	; 0x06
    2724:	9f 81       	ldd	r25, Y+7	; 0x07
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	9f 83       	std	Y+7, r25	; 0x07
    272a:	8e 83       	std	Y+6, r24	; 0x06
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <fputc+0x4c>
    272e:	0f ef       	ldi	r16, 0xFF	; 255
    2730:	1f ef       	ldi	r17, 0xFF	; 255
    2732:	c8 01       	movw	r24, r16
    2734:	df 91       	pop	r29
    2736:	cf 91       	pop	r28
    2738:	1f 91       	pop	r17
    273a:	0f 91       	pop	r16
    273c:	08 95       	ret

0000273e <__ultoa_invert>:
    273e:	fa 01       	movw	r30, r20
    2740:	aa 27       	eor	r26, r26
    2742:	28 30       	cpi	r18, 0x08	; 8
    2744:	51 f1       	breq	.+84     	; 0x279a <__ultoa_invert+0x5c>
    2746:	20 31       	cpi	r18, 0x10	; 16
    2748:	81 f1       	breq	.+96     	; 0x27aa <__ultoa_invert+0x6c>
    274a:	e8 94       	clt
    274c:	6f 93       	push	r22
    274e:	6e 7f       	andi	r22, 0xFE	; 254
    2750:	6e 5f       	subi	r22, 0xFE	; 254
    2752:	7f 4f       	sbci	r23, 0xFF	; 255
    2754:	8f 4f       	sbci	r24, 0xFF	; 255
    2756:	9f 4f       	sbci	r25, 0xFF	; 255
    2758:	af 4f       	sbci	r26, 0xFF	; 255
    275a:	b1 e0       	ldi	r27, 0x01	; 1
    275c:	3e d0       	rcall	.+124    	; 0x27da <__ultoa_invert+0x9c>
    275e:	b4 e0       	ldi	r27, 0x04	; 4
    2760:	3c d0       	rcall	.+120    	; 0x27da <__ultoa_invert+0x9c>
    2762:	67 0f       	add	r22, r23
    2764:	78 1f       	adc	r23, r24
    2766:	89 1f       	adc	r24, r25
    2768:	9a 1f       	adc	r25, r26
    276a:	a1 1d       	adc	r26, r1
    276c:	68 0f       	add	r22, r24
    276e:	79 1f       	adc	r23, r25
    2770:	8a 1f       	adc	r24, r26
    2772:	91 1d       	adc	r25, r1
    2774:	a1 1d       	adc	r26, r1
    2776:	6a 0f       	add	r22, r26
    2778:	71 1d       	adc	r23, r1
    277a:	81 1d       	adc	r24, r1
    277c:	91 1d       	adc	r25, r1
    277e:	a1 1d       	adc	r26, r1
    2780:	20 d0       	rcall	.+64     	; 0x27c2 <__ultoa_invert+0x84>
    2782:	09 f4       	brne	.+2      	; 0x2786 <__ultoa_invert+0x48>
    2784:	68 94       	set
    2786:	3f 91       	pop	r19
    2788:	2a e0       	ldi	r18, 0x0A	; 10
    278a:	26 9f       	mul	r18, r22
    278c:	11 24       	eor	r1, r1
    278e:	30 19       	sub	r19, r0
    2790:	30 5d       	subi	r19, 0xD0	; 208
    2792:	31 93       	st	Z+, r19
    2794:	de f6       	brtc	.-74     	; 0x274c <__ultoa_invert+0xe>
    2796:	cf 01       	movw	r24, r30
    2798:	08 95       	ret
    279a:	46 2f       	mov	r20, r22
    279c:	47 70       	andi	r20, 0x07	; 7
    279e:	40 5d       	subi	r20, 0xD0	; 208
    27a0:	41 93       	st	Z+, r20
    27a2:	b3 e0       	ldi	r27, 0x03	; 3
    27a4:	0f d0       	rcall	.+30     	; 0x27c4 <__ultoa_invert+0x86>
    27a6:	c9 f7       	brne	.-14     	; 0x279a <__ultoa_invert+0x5c>
    27a8:	f6 cf       	rjmp	.-20     	; 0x2796 <__ultoa_invert+0x58>
    27aa:	46 2f       	mov	r20, r22
    27ac:	4f 70       	andi	r20, 0x0F	; 15
    27ae:	40 5d       	subi	r20, 0xD0	; 208
    27b0:	4a 33       	cpi	r20, 0x3A	; 58
    27b2:	18 f0       	brcs	.+6      	; 0x27ba <__ultoa_invert+0x7c>
    27b4:	49 5d       	subi	r20, 0xD9	; 217
    27b6:	31 fd       	sbrc	r19, 1
    27b8:	40 52       	subi	r20, 0x20	; 32
    27ba:	41 93       	st	Z+, r20
    27bc:	02 d0       	rcall	.+4      	; 0x27c2 <__ultoa_invert+0x84>
    27be:	a9 f7       	brne	.-22     	; 0x27aa <__ultoa_invert+0x6c>
    27c0:	ea cf       	rjmp	.-44     	; 0x2796 <__ultoa_invert+0x58>
    27c2:	b4 e0       	ldi	r27, 0x04	; 4
    27c4:	a6 95       	lsr	r26
    27c6:	97 95       	ror	r25
    27c8:	87 95       	ror	r24
    27ca:	77 95       	ror	r23
    27cc:	67 95       	ror	r22
    27ce:	ba 95       	dec	r27
    27d0:	c9 f7       	brne	.-14     	; 0x27c4 <__ultoa_invert+0x86>
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	61 05       	cpc	r22, r1
    27d6:	71 05       	cpc	r23, r1
    27d8:	08 95       	ret
    27da:	9b 01       	movw	r18, r22
    27dc:	ac 01       	movw	r20, r24
    27de:	0a 2e       	mov	r0, r26
    27e0:	06 94       	lsr	r0
    27e2:	57 95       	ror	r21
    27e4:	47 95       	ror	r20
    27e6:	37 95       	ror	r19
    27e8:	27 95       	ror	r18
    27ea:	ba 95       	dec	r27
    27ec:	c9 f7       	brne	.-14     	; 0x27e0 <__ultoa_invert+0xa2>
    27ee:	62 0f       	add	r22, r18
    27f0:	73 1f       	adc	r23, r19
    27f2:	84 1f       	adc	r24, r20
    27f4:	95 1f       	adc	r25, r21
    27f6:	a0 1d       	adc	r26, r0
    27f8:	08 95       	ret

000027fa <_exit>:
    27fa:	f8 94       	cli

000027fc <__stop_program>:
    27fc:	ff cf       	rjmp	.-2      	; 0x27fc <__stop_program>
